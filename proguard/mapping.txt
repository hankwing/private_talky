android.support.v4.app.ActionBarDrawerToggle -> android.support.v4.app.a:
    android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl IMPL -> a
    android.app.Activity mActivity -> b
    android.support.v4.app.ActionBarDrawerToggle$Delegate mActivityImpl -> c
    android.support.v4.widget.DrawerLayout mDrawerLayout -> d
    boolean mDrawerIndicatorEnabled -> e
    android.graphics.drawable.Drawable mThemeImage -> f
    android.graphics.drawable.Drawable mDrawerImage -> g
    android.support.v4.app.ActionBarDrawerToggle$SlideDrawable mSlider -> h
    int mDrawerImageResource -> i
    int mOpenDrawerContentDescRes -> j
    int mCloseDrawerContentDescRes -> k
    java.lang.Object mSetIndicatorInfo -> l
    void syncState() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
    android.graphics.drawable.Drawable getThemeUpIndicator() -> b
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> a
    void setActionBarDescription(int) -> b
    android.app.Activity access$400(android.support.v4.app.ActionBarDrawerToggle) -> a
android.support.v4.app.ActionBarDrawerToggle$1 -> android.support.v4.app.b:
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl -> android.support.v4.app.c:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplBase -> android.support.v4.app.d:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplHC -> android.support.v4.app.e:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplJellybeanMR2 -> android.support.v4.app.f:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$Delegate -> android.support.v4.app.g:
    android.graphics.drawable.Drawable getThemeUpIndicator() -> a
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> a
    void setActionBarDescription(int) -> a
android.support.v4.app.ActionBarDrawerToggle$DelegateProvider -> android.support.v4.app.h:
    android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate() -> a
android.support.v4.app.ActionBarDrawerToggle$SlideDrawable -> android.support.v4.app.i:
    boolean mHasMirroring -> b
    android.graphics.Rect mTmpRect -> c
    float mPosition -> d
    float mOffset -> e
    android.support.v4.app.ActionBarDrawerToggle this$0 -> a
    void setPosition(float) -> a
    float getPosition() -> a
    void setOffset(float) -> b
    void draw(android.graphics.Canvas) -> draw
android.support.v4.app.ActionBarDrawerToggleHoneycomb -> android.support.v4.app.j:
    int[] THEME_ATTRS -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo -> android.support.v4.app.k:
    java.lang.reflect.Method setHomeAsUpIndicator -> a
    java.lang.reflect.Method setHomeActionContentDescription -> b
    android.widget.ImageView upIndicatorView -> c
android.support.v4.app.ActionBarDrawerToggleJellybeanMR2 -> android.support.v4.app.l:
    int[] THEME_ATTRS -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.m:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.n:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> c
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitAllowingStateLoss() -> b
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> c
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.o:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.p:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void setArguments(android.os.Bundle) -> b
    android.os.Bundle getArguments() -> b
    void setInitialSavedState(android.support.v4.app.Fragment$SavedState) -> a
    android.support.v4.app.FragmentActivity getActivity() -> c
    android.content.res.Resources getResources() -> d
    boolean isAdded() -> e
    boolean isDetached() -> f
    boolean isHidden() -> g
    void onHiddenChanged(boolean) -> a
    void setMenuVisibility(boolean) -> b
    void setUserVisibleHint(boolean) -> c
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> c
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> d
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> h
    void onActivityCreated(android.os.Bundle) -> e
    void onViewStateRestored(android.os.Bundle) -> f
    void onStart() -> i
    void onResume() -> j
    void onSaveInstanceState(android.os.Bundle) -> g
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> k
    void onStop() -> l
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> m
    void onDestroy() -> n
    void initState() -> o
    void onDetach() -> p
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> q
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> r
    void performCreate(android.os.Bundle) -> h
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> i
    void performStart() -> s
    void performResume() -> t
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> u
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> j
    void performPause() -> v
    void performStop() -> w
    void performReallyStop() -> x
    void performDestroyView() -> y
    void performDestroy() -> z
android.support.v4.app.Fragment$1 -> android.support.v4.app.q:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.r:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.s:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.t:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> e
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.u:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.v:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.w:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.x:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.y:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.z:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.aa:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.ab:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> b
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> c
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> d
    void makeInactive(android.support.v4.app.Fragment) -> e
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> f
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> g
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.ac:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.ad:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.ae:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.af:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentStatePagerAdapter -> android.support.v4.app.ag:
    android.support.v4.app.FragmentManager mFragmentManager -> a
    android.support.v4.app.FragmentTransaction mCurTransaction -> b
    java.util.ArrayList mSavedState -> c
    java.util.ArrayList mFragments -> d
    android.support.v4.app.Fragment mCurrentPrimaryItem -> e
    android.support.v4.app.Fragment getItem(int) -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.ah:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.ai:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.aj:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.ak:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> c
    int commit() -> a
    int commitAllowingStateLoss() -> b
android.support.v4.app.ListFragment -> android.support.v4.app.al:
    android.os.Handler mHandler -> X
    java.lang.Runnable mRequestFocus -> Y
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> Z
    android.widget.ListAdapter mAdapter -> P
    android.widget.ListView mList -> Q
    android.view.View mEmptyView -> R
    android.widget.TextView mStandardEmptyView -> S
    android.view.View mProgressContainer -> T
    android.view.View mListContainer -> U
    java.lang.CharSequence mEmptyText -> V
    boolean mListShown -> W
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onDestroyView() -> m
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void setListAdapter(android.widget.ListAdapter) -> a
    android.widget.ListView getListView() -> A
    void setListShown(boolean,boolean) -> a
    void ensureList() -> B
android.support.v4.app.ListFragment$1 -> android.support.v4.app.am:
    android.support.v4.app.ListFragment this$0 -> a
    void run() -> run
android.support.v4.app.ListFragment$2 -> android.support.v4.app.an:
    android.support.v4.app.ListFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v4.app.LoaderManager -> android.support.v4.app.ao:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.ap:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.aq:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ar:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NavUtils -> android.support.v4.app.as:
    android.support.v4.app.NavUtils$NavUtilsImpl IMPL -> a
    void navigateUpFromSameTask(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    android.content.Intent getParentActivityIntent(android.app.Activity) -> b
    java.lang.String getParentActivityName(android.app.Activity) -> c
    java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName) -> a
android.support.v4.app.NavUtils$NavUtilsImpl -> android.support.v4.app.at:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplBase -> android.support.v4.app.au:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplJB -> android.support.v4.app.av:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    android.content.Intent superGetParentActivityIntent(android.app.Activity) -> b
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtilsJB -> android.support.v4.app.aw:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.pm.ActivityInfo) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ax:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ay:
android.support.v4.content.IntentCompat -> android.support.v4.a.a:
    android.support.v4.content.IntentCompat$IntentCompatImpl IMPL -> a
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImpl -> android.support.v4.a.b:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplBase -> android.support.v4.a.c:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplHC -> android.support.v4.a.d:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1 -> android.support.v4.a.e:
android.support.v4.content.IntentCompatHoneycomb -> android.support.v4.a.f:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.Loader -> android.support.v4.a.g:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.h:
android.support.v4.internal.view.SupportMenu -> android.support.v4.b.a.a:
android.support.v4.internal.view.SupportMenuItem -> android.support.v4.b.a.b:
    boolean expandActionView() -> expandActionView
android.support.v4.os.ParcelableCompat -> android.support.v4.c.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.c.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.c.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.c.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.c.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.d.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.d.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.d.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
android.support.v4.util.DebugUtils -> android.support.v4.d.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.d.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.LruCache -> android.support.v4.d.f:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    void trimToSize(int) -> a
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> b
    int safeSizeOf(java.lang.Object,java.lang.Object) -> c
    int sizeOf(java.lang.Object,java.lang.Object) -> b
    java.lang.String toString() -> toString
android.support.v4.util.MapCollections -> android.support.v4.d.g:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.d.h:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.d.i:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.d.j:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.d.k:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.d.l:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.d.m:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfValue(java.lang.Object) -> a
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.d.n:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.g:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ActionProvider -> android.support.v4.view.n:
    android.support.v4.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener -> a
    android.view.View onCreateActionView() -> a
    android.view.View onCreateActionView(android.view.MenuItem) -> a
    boolean overridesItemVisibility() -> b
    boolean isVisible() -> c
    boolean onPerformDefaultAction() -> d
    boolean hasSubMenu() -> e
    void onPrepareSubMenu(android.view.SubMenu) -> a
    void setSubUiVisibilityListener(android.support.v4.view.ActionProvider$SubUiVisibilityListener) -> a
android.support.v4.view.ActionProvider$SubUiVisibilityListener -> android.support.v4.view.o:
android.support.v4.view.GravityCompat -> android.support.v4.view.p:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.q:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.r:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.s:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.t:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.u:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.v:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.w:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.x:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.y:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.z:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.aa:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MenuItemCompat -> android.support.v4.view.ab:
    android.support.v4.view.MenuItemCompat$MenuVersionImpl IMPL -> a
android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl -> android.support.v4.view.ac:
android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl -> android.support.v4.view.ad:
android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl -> android.support.v4.view.ae:
android.support.v4.view.MenuItemCompat$MenuVersionImpl -> android.support.v4.view.af:
android.support.v4.view.MenuItemCompat$OnActionExpandListener -> android.support.v4.view.ag:
    boolean onMenuItemActionExpand(android.view.MenuItem) -> a
    boolean onMenuItemActionCollapse(android.view.MenuItem) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.ah:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.ai:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.aj:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.ak:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.al:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.am:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> b
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    java.lang.CharSequence getPageTitle(int) -> b
    float getPageWidth(int) -> c
android.support.v4.view.PagerTabStrip -> android.support.v4.view.PagerTabStrip:
    int mIndicatorColor -> f
    int mIndicatorHeight -> g
    int mMinPaddingBottom -> h
    int mMinTextSpacing -> i
    int mMinStripHeight -> j
    int mTabPadding -> k
    android.graphics.Paint mTabPaint -> l
    android.graphics.Rect mTempRect -> m
    int mTabAlpha -> n
    boolean mDrawFullUnderline -> o
    boolean mDrawFullUnderlineSet -> p
    int mFullUnderlineHeight -> q
    boolean mIgnoreTap -> r
    float mInitialMotionX -> s
    float mInitialMotionY -> t
    int mTouchSlop -> u
    void setTabIndicatorColor(int) -> setTabIndicatorColor
    void setTabIndicatorColorResource(int) -> setTabIndicatorColorResource
    int getTabIndicatorColor() -> getTabIndicatorColor
    void setPadding(int,int,int,int) -> setPadding
    void setTextSpacing(int) -> setTextSpacing
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setBackgroundColor(int) -> setBackgroundColor
    void setBackgroundResource(int) -> setBackgroundResource
    void setDrawFullUnderline(boolean) -> setDrawFullUnderline
    boolean getDrawFullUnderline() -> getDrawFullUnderline
    int getMinHeight() -> getMinHeight
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onDraw(android.graphics.Canvas) -> onDraw
    void updateTextPositions(int,float,boolean) -> a
android.support.v4.view.PagerTabStrip$1 -> android.support.v4.view.an:
    android.support.v4.view.PagerTabStrip this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v4.view.PagerTabStrip$2 -> android.support.v4.view.ao:
    android.support.v4.view.PagerTabStrip this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v4.view.PagerTitleStrip -> android.support.v4.view.ap:
    android.support.v4.view.ViewPager mPager -> a
    android.widget.TextView mPrevText -> b
    android.widget.TextView mCurrText -> c
    android.widget.TextView mNextText -> d
    int mLastKnownCurrentPage -> f
    float mLastKnownPositionOffset -> g
    int mScaledTextSpacing -> h
    int mGravity -> i
    boolean mUpdatingText -> j
    boolean mUpdatingPositions -> k
    android.support.v4.view.PagerTitleStrip$PageListener mPageListener -> l
    java.lang.ref.WeakReference mWatchingAdapter -> m
    int[] ATTRS -> n
    int[] TEXT_ATTRS -> o
    int mNonPrimaryAlpha -> p
    int mTextColor -> e
    android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl IMPL -> q
    void setSingleLineAllCaps(android.widget.TextView) -> setSingleLineAllCaps
    void setTextSpacing(int) -> setTextSpacing
    int getTextSpacing() -> getTextSpacing
    void setNonPrimaryAlpha(float) -> setNonPrimaryAlpha
    void setTextColor(int) -> setTextColor
    void setTextSize(int,float) -> a
    void setGravity(int) -> setGravity
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void updateText(int,android.support.v4.view.PagerAdapter) -> a
    void requestLayout() -> requestLayout
    void updateAdapter(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
    void updateTextPositions(int,float,boolean) -> a
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getMinHeight() -> getMinHeight
    float access$100(android.support.v4.view.PagerTitleStrip) -> a
android.support.v4.view.PagerTitleStrip$1 -> android.support.v4.view.aq:
android.support.v4.view.PagerTitleStrip$PageListener -> android.support.v4.view.ar:
    int mScrollState -> b
    android.support.v4.view.PagerTitleStrip this$0 -> a
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
    void onChanged() -> onChanged
android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl -> android.support.v4.view.as:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase -> android.support.v4.view.at:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStrip$PagerTitleStripImplIcs -> android.support.v4.view.au:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStripIcs -> android.support.v4.view.av:
    void setSingleLineAllCaps(android.widget.TextView) -> a
android.support.v4.view.PagerTitleStripIcs$SingleLineAllCapsTransform -> android.support.v4.view.aw:
    java.util.Locale mLocale -> a
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.ax:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.ay:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.az:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ba:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.bb:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.bc:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    boolean canScrollVertically(android.view.View,int) -> b
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> c
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.bd:
    boolean canScrollHorizontally(android.view.View,int) -> a
    boolean canScrollVertically(android.view.View,int) -> b
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> c
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.be:
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.bf:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.bg:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.bh:
    boolean canScrollHorizontally(android.view.View,int) -> a
    boolean canScrollVertically(android.view.View,int) -> b
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.bi:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> c
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.bj:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.bk:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.bl:
    boolean canScrollHorizontally(android.view.View,int) -> a
    boolean canScrollVertically(android.view.View,int) -> b
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> c
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.bm:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.bn:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.bo:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.bp:
    boolean canScrollHorizontally(android.view.View,int) -> a
    boolean canScrollVertically(android.view.View,int) -> b
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.bq:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
    android.view.ViewParent getParentForAccessibility(android.view.View) -> c
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.br:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.bs:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.bt:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.bu:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.bv:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.bw:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewGroupCompat -> android.support.v4.view.bx:
    android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl IMPL -> a
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompat$ViewGroupCompatHCImpl -> android.support.v4.view.by:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl -> android.support.v4.view.bz:
android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl -> android.support.v4.view.ca:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompat$ViewGroupCompatJellybeanMR2Impl -> android.support.v4.view.cb:
android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl -> android.support.v4.view.cc:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompatHC -> android.support.v4.view.cd:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void initViewPager() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> g
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> a
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    void populate(int) -> a
    void sortChildDrawingOrder() -> h
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> i
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> j
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> d
    boolean pageRight() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> f
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ce:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.cf:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.cg:
    android.support.v4.view.ViewPager this$0 -> a
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ch:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ci:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.cj:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.ck:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
    boolean canScroll() -> b
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.cl:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.cm:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.cn:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.co:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.cp:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.cq:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(java.lang.Object) -> a
    java.lang.Object getInfo() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void setSource(android.view.View) -> a
    void addChild(android.view.View) -> b
    int getActions() -> b
    void addAction(int) -> a
    void setParent(android.view.View) -> c
    void getBoundsInParent(android.graphics.Rect) -> a
    void setBoundsInParent(android.graphics.Rect) -> b
    void getBoundsInScreen(android.graphics.Rect) -> c
    void setBoundsInScreen(android.graphics.Rect) -> d
    boolean isCheckable() -> c
    boolean isChecked() -> d
    boolean isFocusable() -> e
    void setFocusable(boolean) -> a
    boolean isFocused() -> f
    void setFocused(boolean) -> b
    boolean isVisibleToUser() -> g
    void setVisibleToUser(boolean) -> c
    boolean isAccessibilityFocused() -> h
    void setAccessibilityFocused(boolean) -> d
    boolean isSelected() -> i
    void setSelected(boolean) -> e
    boolean isClickable() -> j
    void setClickable(boolean) -> f
    boolean isLongClickable() -> k
    void setLongClickable(boolean) -> g
    boolean isEnabled() -> l
    void setEnabled(boolean) -> h
    boolean isPassword() -> m
    boolean isScrollable() -> n
    void setScrollable(boolean) -> i
    java.lang.CharSequence getPackageName() -> o
    void setPackageName(java.lang.CharSequence) -> a
    java.lang.CharSequence getClassName() -> p
    void setClassName(java.lang.CharSequence) -> b
    java.lang.CharSequence getText() -> q
    java.lang.CharSequence getContentDescription() -> r
    void setContentDescription(java.lang.CharSequence) -> c
    void recycle() -> s
    java.lang.String getViewIdResourceName() -> t
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String getActionSymbolicName(int) -> b
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    java.lang.Object obtain(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    java.lang.CharSequence getText(java.lang.Object) -> f
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isClickable(java.lang.Object) -> i
    boolean isEnabled(java.lang.Object) -> j
    boolean isFocusable(java.lang.Object) -> k
    boolean isFocused(java.lang.Object) -> l
    boolean isLongClickable(java.lang.Object) -> m
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    boolean isSelected(java.lang.Object) -> p
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setClickable(java.lang.Object,boolean) -> a
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void setEnabled(java.lang.Object,boolean) -> b
    void setFocusable(java.lang.Object,boolean) -> c
    void setFocused(java.lang.Object,boolean) -> d
    void setLongClickable(java.lang.Object,boolean) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    void setParent(java.lang.Object,android.view.View) -> b
    void setScrollable(java.lang.Object,boolean) -> f
    void setSelected(java.lang.Object,boolean) -> g
    void setSource(java.lang.Object,android.view.View) -> c
    void recycle(java.lang.Object) -> q
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    java.lang.Object obtain(java.lang.Object) -> a
    void setSource(java.lang.Object,android.view.View) -> c
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void addAction(java.lang.Object,int) -> a
    void setParent(java.lang.Object,android.view.View) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isFocusable(java.lang.Object) -> k
    void setFocusable(java.lang.Object,boolean) -> c
    boolean isFocused(java.lang.Object) -> l
    void setFocused(java.lang.Object,boolean) -> d
    boolean isVisibleToUser(java.lang.Object) -> r
    void setVisibleToUser(java.lang.Object,boolean) -> h
    boolean isAccessibilityFocused(java.lang.Object) -> s
    void setAccessibilityFocused(java.lang.Object,boolean) -> i
    boolean isSelected(java.lang.Object) -> p
    void setSelected(java.lang.Object,boolean) -> g
    boolean isClickable(java.lang.Object) -> i
    void setClickable(java.lang.Object,boolean) -> a
    boolean isLongClickable(java.lang.Object) -> m
    void setLongClickable(java.lang.Object,boolean) -> e
    boolean isEnabled(java.lang.Object) -> j
    void setEnabled(java.lang.Object,boolean) -> b
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    void setScrollable(java.lang.Object,boolean) -> f
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    java.lang.CharSequence getText(java.lang.Object) -> f
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void recycle(java.lang.Object) -> q
    java.lang.String getViewIdResourceName(java.lang.Object) -> t
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
    boolean isVisibleToUser(java.lang.Object) -> r
    void setVisibleToUser(java.lang.Object,boolean) -> h
    boolean isAccessibilityFocused(java.lang.Object) -> s
    void setAccessibilityFocused(java.lang.Object,boolean) -> i
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl -> android.support.v4.view.a.e:
    java.lang.String getViewIdResourceName(java.lang.Object) -> t
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoKitKatImpl -> android.support.v4.view.a.f:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.g:
    java.lang.Object obtain(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    java.lang.CharSequence getText(java.lang.Object) -> f
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isClickable(java.lang.Object) -> i
    boolean isEnabled(java.lang.Object) -> j
    boolean isFocusable(java.lang.Object) -> k
    boolean isFocused(java.lang.Object) -> l
    boolean isVisibleToUser(java.lang.Object) -> r
    boolean isAccessibilityFocused(java.lang.Object) -> s
    boolean isLongClickable(java.lang.Object) -> m
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    boolean isSelected(java.lang.Object) -> p
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setClickable(java.lang.Object,boolean) -> a
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void setEnabled(java.lang.Object,boolean) -> b
    void setFocusable(java.lang.Object,boolean) -> c
    void setFocused(java.lang.Object,boolean) -> d
    void setVisibleToUser(java.lang.Object,boolean) -> h
    void setAccessibilityFocused(java.lang.Object,boolean) -> i
    void setLongClickable(java.lang.Object,boolean) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    void setParent(java.lang.Object,android.view.View) -> b
    void setScrollable(java.lang.Object,boolean) -> f
    void setSelected(java.lang.Object,boolean) -> g
    void setSource(java.lang.Object,android.view.View) -> c
    void recycle(java.lang.Object) -> q
    java.lang.String getViewIdResourceName(java.lang.Object) -> t
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.h:
    java.lang.Object obtain(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    java.lang.CharSequence getText(java.lang.Object) -> f
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isClickable(java.lang.Object) -> i
    boolean isEnabled(java.lang.Object) -> j
    boolean isFocusable(java.lang.Object) -> k
    boolean isFocused(java.lang.Object) -> l
    boolean isLongClickable(java.lang.Object) -> m
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    boolean isSelected(java.lang.Object) -> p
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setClickable(java.lang.Object,boolean) -> a
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void setEnabled(java.lang.Object,boolean) -> b
    void setFocusable(java.lang.Object,boolean) -> c
    void setFocused(java.lang.Object,boolean) -> d
    void setLongClickable(java.lang.Object,boolean) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    void setParent(java.lang.Object,android.view.View) -> b
    void setScrollable(java.lang.Object,boolean) -> f
    void setSelected(java.lang.Object,boolean) -> g
    void setSource(java.lang.Object,android.view.View) -> c
    void recycle(java.lang.Object) -> q
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean -> android.support.v4.view.a.i:
    boolean isVisibleToUser(java.lang.Object) -> a
    void setVisibleToUser(java.lang.Object,boolean) -> a
    boolean isAccessibilityFocused(java.lang.Object) -> b
    void setAccesibilityFocused(java.lang.Object,boolean) -> b
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2 -> android.support.v4.view.a.j:
    java.lang.String getViewIdResourceName(java.lang.Object) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.k:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat findFocus(int) -> b
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.l:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.m:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.n:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl -> android.support.v4.view.a.o:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1 -> android.support.v4.view.a.p:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    java.lang.Object findFocus(int) -> b
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.q:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.r:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.s:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.t:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat -> android.support.v4.view.a.u:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1 -> android.support.v4.view.a.v:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge -> android.support.v4.view.a.w:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object findFocus(int) -> b
android.support.v4.view.accessibility.AccessibilityRecordCompat -> android.support.v4.view.a.x:
    android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl IMPL -> a
    java.lang.Object mRecord -> b
    android.support.v4.view.accessibility.AccessibilityRecordCompat obtain() -> a
    void setScrollable(boolean) -> a
    void setItemCount(int) -> a
    void setFromIndex(int) -> b
    void setToIndex(int) -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl -> android.support.v4.view.a.y:
    java.lang.Object obtain() -> a
    void setFromIndex(java.lang.Object,int) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl -> android.support.v4.view.a.z:
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl -> android.support.v4.view.a.aa:
    java.lang.Object obtain() -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setFromIndex(java.lang.Object,int) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl -> android.support.v4.view.a.ab:
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl -> android.support.v4.view.a.ac:
    java.lang.Object obtain() -> a
    void setFromIndex(java.lang.Object,int) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.view.accessibility.AccessibilityRecordCompatIcs -> android.support.v4.view.a.ad:
    java.lang.Object obtain() -> a
    void setFromIndex(java.lang.Object,int) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.widget.BakedBezierInterpolator -> android.support.v4.widget.a:
    android.support.v4.widget.BakedBezierInterpolator INSTANCE -> a
    float[] VALUES -> b
    float STEP_SIZE -> c
    android.support.v4.widget.BakedBezierInterpolator getInstance() -> a
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.CursorAdapter -> android.support.v4.widget.b:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    void onContentChanged() -> b
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.widget.c:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.widget.d:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.widget.e:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.widget.f:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.widget.g:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    java.lang.CharSequence mTitleLeft -> v
    java.lang.CharSequence mTitleRight -> w
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    java.lang.CharSequence getDrawerTitle(int) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> b
    java.lang.String gravityToString(int) -> c
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> l
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void openDrawer(int) -> d
    void closeDrawer(android.view.View) -> i
    void closeDrawer(int) -> e
    boolean isDrawerOpen(android.view.View) -> j
    boolean isDrawerOpen(int) -> f
    boolean isDrawerVisible(android.view.View) -> k
    boolean isDrawerVisible(int) -> g
    boolean hasPeekingDrawer() -> e
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> f
    android.view.View findVisibleDrawer() -> g
    void cancelChildViewTouch() -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> d
    android.view.View access$200(android.support.v4.widget.DrawerLayout) -> a
android.support.v4.widget.DrawerLayout$AccessibilityDelegate -> android.support.v4.widget.h:
    android.graphics.Rect mTmpRect -> c
    android.support.v4.widget.DrawerLayout this$0 -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void addChildrenForAccessibility(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.view.ViewGroup) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean filter(android.view.View) -> b
    void copyNodeInfoNoChildren(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.i:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.j:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.k:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.l:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void setDragger(android.support.v4.widget.ViewDragHelper) -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    void peekDrawer() -> c
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
    void access$000(android.support.v4.widget.DrawerLayout$ViewDragCallback) -> a
android.support.v4.widget.DrawerLayout$ViewDragCallback$1 -> android.support.v4.widget.m:
    android.support.v4.widget.DrawerLayout$ViewDragCallback this$1 -> a
    void run() -> run
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.n:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.o:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.p:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.q:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.r:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.widget.s:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.t:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.u:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.v:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.w:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.x:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.y:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.z:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.aa:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.ab:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.ac:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.ad:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.ae:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.af:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.ag:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.ah:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SwipeProgressBar -> android.support.v4.widget.ai:
    android.view.animation.Interpolator INTERPOLATOR -> a
    android.graphics.Paint mPaint -> b
    android.graphics.RectF mClipRect -> c
    float mTriggerPercentage -> d
    long mStartTime -> e
    long mFinishTime -> f
    boolean mRunning -> g
    int mColor1 -> h
    int mColor2 -> i
    int mColor3 -> j
    int mColor4 -> k
    android.view.View mParent -> l
    android.graphics.Rect mBounds -> m
    void setColorScheme(int,int,int,int) -> a
    void setTriggerPercentage(float) -> a
    void start() -> a
    void stop() -> b
    void draw(android.graphics.Canvas) -> a
    void drawTrigger(android.graphics.Canvas,int,int) -> a
    void drawCircle(android.graphics.Canvas,float,float,int,float) -> a
    void setBounds(int,int,int,int) -> b
android.support.v4.widget.SwipeRefreshLayout -> android.support.v4.widget.aj:
    android.support.v4.widget.SwipeProgressBar mProgressBar -> a
    android.view.View mTarget -> b
    int mOriginalOffsetTop -> c
    android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener mListener -> d
    android.view.MotionEvent mDownEvent -> e
    int mFrom -> f
    boolean mRefreshing -> g
    int mTouchSlop -> h
    float mDistanceToTriggerSync -> i
    float mPrevY -> j
    int mMediumAnimationDuration -> k
    float mFromPercentage -> l
    float mCurrPercentage -> m
    int mProgressBarHeight -> n
    int mCurrentTargetOffsetTop -> o
    boolean mReturningToStart -> p
    android.view.animation.DecelerateInterpolator mDecelerateInterpolator -> q
    android.view.animation.AccelerateInterpolator mAccelerateInterpolator -> r
    int[] LAYOUT_ATTRS -> s
    android.view.animation.Animation mAnimateToStartPosition -> t
    android.view.animation.Animation mShrinkTrigger -> u
    android.view.animation.Animation$AnimationListener mReturnToStartPositionListener -> v
    android.view.animation.Animation$AnimationListener mShrinkAnimationListener -> w
    java.lang.Runnable mReturnToStartPosition -> x
    java.lang.Runnable mCancel -> y
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void animateOffsetToStartPosition(int,android.view.animation.Animation$AnimationListener) -> a
    void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener) -> setOnRefreshListener
    void setTriggerPercentage(float) -> setTriggerPercentage
    void setRefreshing(boolean) -> setRefreshing
    void setColorScheme(int,int,int,int) -> a
    void ensureTarget() -> b
    void draw(android.graphics.Canvas) -> draw
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    boolean canChildScrollUp() -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void startRefresh() -> c
    void updateContentOffsetTop(int) -> a
    void setTargetOffsetTopAndBottom(int) -> setTargetOffsetTopAndBottom
    void updatePositionTimeout() -> d
    int access$000(android.support.v4.widget.SwipeRefreshLayout) -> a
    int access$100(android.support.v4.widget.SwipeRefreshLayout) -> b
    android.view.View access$200(android.support.v4.widget.SwipeRefreshLayout) -> c
    void access$300(android.support.v4.widget.SwipeRefreshLayout,int) -> a
    float access$400(android.support.v4.widget.SwipeRefreshLayout) -> d
    android.support.v4.widget.SwipeProgressBar access$500(android.support.v4.widget.SwipeRefreshLayout) -> e
    int access$702(android.support.v4.widget.SwipeRefreshLayout,int) -> b
    float access$802(android.support.v4.widget.SwipeRefreshLayout,float) -> a
    boolean access$902(android.support.v4.widget.SwipeRefreshLayout,boolean) -> a
    int access$700(android.support.v4.widget.SwipeRefreshLayout) -> f
    android.view.animation.Animation$AnimationListener access$1000(android.support.v4.widget.SwipeRefreshLayout) -> g
    void access$1100(android.support.v4.widget.SwipeRefreshLayout,int,android.view.animation.Animation$AnimationListener) -> a
    float access$402(android.support.v4.widget.SwipeRefreshLayout,float) -> b
    float access$800(android.support.v4.widget.SwipeRefreshLayout) -> h
    int access$1200(android.support.v4.widget.SwipeRefreshLayout) -> i
    android.view.animation.Animation access$1300(android.support.v4.widget.SwipeRefreshLayout) -> j
    android.view.animation.Animation$AnimationListener access$1400(android.support.v4.widget.SwipeRefreshLayout) -> k
    android.view.animation.DecelerateInterpolator access$1500(android.support.v4.widget.SwipeRefreshLayout) -> l
android.support.v4.widget.SwipeRefreshLayout$1 -> android.support.v4.widget.ak:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> a
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
android.support.v4.widget.SwipeRefreshLayout$2 -> android.support.v4.widget.al:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> a
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
android.support.v4.widget.SwipeRefreshLayout$3 -> android.support.v4.widget.am:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> a
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
android.support.v4.widget.SwipeRefreshLayout$4 -> android.support.v4.widget.an:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> a
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
android.support.v4.widget.SwipeRefreshLayout$5 -> android.support.v4.widget.ao:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> a
    void run() -> run
android.support.v4.widget.SwipeRefreshLayout$6 -> android.support.v4.widget.ap:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> a
    void run() -> run
android.support.v4.widget.SwipeRefreshLayout$BaseAnimationListener -> android.support.v4.widget.aq:
    android.support.v4.widget.SwipeRefreshLayout this$0 -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener -> android.support.v4.widget.ar:
    void onRefresh() -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.as:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,android.support.v4.widget.ViewDragHelper$Callback) -> a
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,float,android.support.v4.widget.ViewDragHelper$Callback) -> a
    void setMinVelocity(float) -> a
    int getViewDragState() -> a
    void setEdgeTrackingEnabled(int) -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> b
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> b
    void setDragState(int) -> c
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> d
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.at:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$2 -> android.support.v4.widget.au:
    android.support.v4.widget.ViewDragHelper this$0 -> a
    void run() -> run
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.av:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v7.app.ActionBar -> android.support.v7.a.a:
android.support.v7.app.ActionBar$LayoutParams -> android.support.v7.a.b:
    int gravity -> a
android.support.v7.app.ActionBar$OnNavigationListener -> android.support.v7.a.c:
    boolean onNavigationItemSelected(int,long) -> a
android.support.v7.app.ActionBar$Tab -> android.support.v7.a.d:
    android.graphics.drawable.Drawable getIcon() -> a
    java.lang.CharSequence getText() -> b
    android.view.View getCustomView() -> c
    void select() -> d
    java.lang.CharSequence getContentDescription() -> e
android.support.v7.appcompat.R -> android.support.v7.b.a:
android.support.v7.appcompat.R$attr -> android.support.v7.b.b:
    int actionBarDivider -> actionBarDivider
    int actionBarItemBackground -> actionBarItemBackground
    int actionBarSize -> actionBarSize
    int actionBarSplitStyle -> actionBarSplitStyle
    int actionBarStyle -> actionBarStyle
    int actionBarTabBarStyle -> actionBarTabBarStyle
    int actionBarTabStyle -> actionBarTabStyle
    int actionBarTabTextStyle -> actionBarTabTextStyle
    int actionBarWidgetTheme -> actionBarWidgetTheme
    int actionButtonStyle -> actionButtonStyle
    int actionDropDownStyle -> actionDropDownStyle
    int actionLayout -> actionLayout
    int actionMenuTextAppearance -> actionMenuTextAppearance
    int actionMenuTextColor -> actionMenuTextColor
    int actionModeBackground -> actionModeBackground
    int actionModeCloseButtonStyle -> actionModeCloseButtonStyle
    int actionModeCloseDrawable -> actionModeCloseDrawable
    int actionModeCopyDrawable -> actionModeCopyDrawable
    int actionModeCutDrawable -> actionModeCutDrawable
    int actionModeFindDrawable -> actionModeFindDrawable
    int actionModePasteDrawable -> actionModePasteDrawable
    int actionModePopupWindowStyle -> actionModePopupWindowStyle
    int actionModeSelectAllDrawable -> actionModeSelectAllDrawable
    int actionModeShareDrawable -> actionModeShareDrawable
    int actionModeSplitBackground -> actionModeSplitBackground
    int actionModeStyle -> actionModeStyle
    int actionModeWebSearchDrawable -> actionModeWebSearchDrawable
    int actionOverflowButtonStyle -> actionOverflowButtonStyle
    int actionProviderClass -> actionProviderClass
    int actionViewClass -> actionViewClass
    int activityChooserViewStyle -> activityChooserViewStyle
    int background -> background
    int backgroundSplit -> backgroundSplit
    int backgroundStacked -> backgroundStacked
    int buttonBarButtonStyle -> buttonBarButtonStyle
    int buttonBarStyle -> buttonBarStyle
    int customNavigationLayout -> customNavigationLayout
    int disableChildrenWhenDisabled -> disableChildrenWhenDisabled
    int displayOptions -> displayOptions
    int divider -> divider
    int dividerHorizontal -> dividerHorizontal
    int dividerPadding -> dividerPadding
    int dividerVertical -> dividerVertical
    int dropDownListViewStyle -> dropDownListViewStyle
    int dropdownListPreferredItemHeight -> dropdownListPreferredItemHeight
    int expandActivityOverflowButtonDrawable -> expandActivityOverflowButtonDrawable
    int height -> height
    int homeAsUpIndicator -> homeAsUpIndicator
    int homeLayout -> homeLayout
    int icon -> icon
    int iconifiedByDefault -> iconifiedByDefault
    int indeterminateProgressStyle -> indeterminateProgressStyle
    int initialActivityCount -> initialActivityCount
    int isLightTheme -> isLightTheme
    int itemPadding -> itemPadding
    int listChoiceBackgroundIndicator -> listChoiceBackgroundIndicator
    int listPopupWindowStyle -> listPopupWindowStyle
    int listPreferredItemHeight -> listPreferredItemHeight
    int listPreferredItemHeightLarge -> listPreferredItemHeightLarge
    int listPreferredItemHeightSmall -> listPreferredItemHeightSmall
    int listPreferredItemPaddingLeft -> listPreferredItemPaddingLeft
    int listPreferredItemPaddingRight -> listPreferredItemPaddingRight
    int logo -> logo
    int navigationMode -> navigationMode
    int paddingEnd -> paddingEnd
    int paddingStart -> paddingStart
    int panelMenuListTheme -> panelMenuListTheme
    int panelMenuListWidth -> panelMenuListWidth
    int popupMenuStyle -> popupMenuStyle
    int popupPromptView -> popupPromptView
    int progressBarPadding -> progressBarPadding
    int progressBarStyle -> progressBarStyle
    int prompt -> prompt
    int queryHint -> queryHint
    int searchDropdownBackground -> searchDropdownBackground
    int searchResultListItemHeight -> searchResultListItemHeight
    int searchViewAutoCompleteTextView -> searchViewAutoCompleteTextView
    int searchViewCloseIcon -> searchViewCloseIcon
    int searchViewEditQuery -> searchViewEditQuery
    int searchViewEditQueryBackground -> searchViewEditQueryBackground
    int searchViewGoIcon -> searchViewGoIcon
    int searchViewSearchIcon -> searchViewSearchIcon
    int searchViewTextField -> searchViewTextField
    int searchViewTextFieldRight -> searchViewTextFieldRight
    int searchViewVoiceIcon -> searchViewVoiceIcon
    int selectableItemBackground -> selectableItemBackground
    int showAsAction -> showAsAction
    int showDividers -> showDividers
    int spinnerDropDownItemStyle -> spinnerDropDownItemStyle
    int spinnerMode -> spinnerMode
    int spinnerStyle -> spinnerStyle
    int subtitle -> subtitle
    int subtitleTextStyle -> subtitleTextStyle
    int textAllCaps -> textAllCaps
    int textAppearanceLargePopupMenu -> textAppearanceLargePopupMenu
    int textAppearanceListItem -> textAppearanceListItem
    int textAppearanceListItemSmall -> textAppearanceListItemSmall
    int textAppearanceSearchResultSubtitle -> textAppearanceSearchResultSubtitle
    int textAppearanceSearchResultTitle -> textAppearanceSearchResultTitle
    int textAppearanceSmallPopupMenu -> textAppearanceSmallPopupMenu
    int textColorSearchUrl -> textColorSearchUrl
    int title -> title
    int titleTextStyle -> titleTextStyle
    int windowActionBar -> windowActionBar
    int windowActionBarOverlay -> windowActionBarOverlay
    int windowFixedHeightMajor -> windowFixedHeightMajor
    int windowFixedHeightMinor -> windowFixedHeightMinor
    int windowFixedWidthMajor -> windowFixedWidthMajor
    int windowFixedWidthMinor -> windowFixedWidthMinor
    int windowSplitActionBar -> windowSplitActionBar
android.support.v7.appcompat.R$bool -> android.support.v7.b.c:
    int abc_action_bar_embed_tabs_pre_jb -> abc_action_bar_embed_tabs_pre_jb
    int abc_action_bar_expanded_action_views_exclusive -> abc_action_bar_expanded_action_views_exclusive
    int abc_config_actionMenuItemAllCaps -> abc_config_actionMenuItemAllCaps
    int abc_config_allowActionMenuItemTextWithIcon -> abc_config_allowActionMenuItemTextWithIcon
    int abc_config_showMenuShortcutsWhenKeyboardPresent -> abc_config_showMenuShortcutsWhenKeyboardPresent
    int abc_split_action_bar_is_narrow -> abc_split_action_bar_is_narrow
android.support.v7.appcompat.R$dimen -> android.support.v7.b.d:
    int abc_action_bar_default_height -> abc_action_bar_default_height
    int abc_action_bar_icon_vertical_padding -> abc_action_bar_icon_vertical_padding
    int abc_action_bar_progress_bar_size -> abc_action_bar_progress_bar_size
    int abc_action_bar_stacked_max_height -> abc_action_bar_stacked_max_height
    int abc_action_bar_stacked_tab_max_width -> abc_action_bar_stacked_tab_max_width
    int abc_action_bar_subtitle_bottom_margin -> abc_action_bar_subtitle_bottom_margin
    int abc_action_bar_subtitle_text_size -> abc_action_bar_subtitle_text_size
    int abc_action_bar_subtitle_top_margin -> abc_action_bar_subtitle_top_margin
    int abc_action_bar_title_text_size -> abc_action_bar_title_text_size
    int abc_action_button_min_width -> abc_action_button_min_width
    int abc_config_prefDialogWidth -> abc_config_prefDialogWidth
    int abc_dropdownitem_icon_width -> abc_dropdownitem_icon_width
    int abc_dropdownitem_text_padding_left -> abc_dropdownitem_text_padding_left
    int abc_dropdownitem_text_padding_right -> abc_dropdownitem_text_padding_right
    int abc_panel_menu_list_width -> abc_panel_menu_list_width
    int abc_search_view_preferred_width -> abc_search_view_preferred_width
    int abc_search_view_text_min_width -> abc_search_view_text_min_width
    int dialog_fixed_height_major -> dialog_fixed_height_major
    int dialog_fixed_height_minor -> dialog_fixed_height_minor
    int dialog_fixed_width_major -> dialog_fixed_width_major
    int dialog_fixed_width_minor -> dialog_fixed_width_minor
android.support.v7.appcompat.R$id -> android.support.v7.b.e:
    int action_bar -> action_bar
    int action_bar_activity_content -> action_bar_activity_content
    int action_bar_container -> action_bar_container
    int action_bar_overlay_layout -> action_bar_overlay_layout
    int action_bar_root -> action_bar_root
    int action_bar_subtitle -> action_bar_subtitle
    int action_bar_title -> action_bar_title
    int action_context_bar -> action_context_bar
    int action_menu_divider -> action_menu_divider
    int action_menu_presenter -> action_menu_presenter
    int action_mode_close_button -> action_mode_close_button
    int activity_chooser_view_content -> activity_chooser_view_content
    int always -> always
    int beginning -> beginning
    int checkbox -> checkbox
    int collapseActionView -> collapseActionView
    int default_activity_button -> default_activity_button
    int dialog -> dialog
    int disableHome -> disableHome
    int dropdown -> dropdown
    int edit_query -> edit_query
    int end -> end
    int expand_activities_button -> expand_activities_button
    int expanded_menu -> expanded_menu
    int home -> home
    int homeAsUp -> homeAsUp
    int icon -> icon
    int ifRoom -> ifRoom
    int image -> image
    int listMode -> listMode
    int list_item -> list_item
    int middle -> middle
    int never -> never
    int none -> none
    int normal -> normal
    int progress_circular -> progress_circular
    int progress_horizontal -> progress_horizontal
    int radio -> radio
    int search_badge -> search_badge
    int search_bar -> search_bar
    int search_button -> search_button
    int search_close_btn -> search_close_btn
    int search_edit_frame -> search_edit_frame
    int search_go_btn -> search_go_btn
    int search_mag_icon -> search_mag_icon
    int search_plate -> search_plate
    int search_src_text -> search_src_text
    int search_voice_btn -> search_voice_btn
    int shortcut -> shortcut
    int showCustom -> showCustom
    int showHome -> showHome
    int showTitle -> showTitle
    int split_action_bar -> split_action_bar
    int submit_area -> submit_area
    int tabMode -> tabMode
    int title -> title
    int top_action_bar -> top_action_bar
    int up -> up
    int useLogo -> useLogo
    int withText -> withText
android.support.v7.appcompat.R$integer -> android.support.v7.b.f:
    int abc_max_action_buttons -> abc_max_action_buttons
android.support.v7.appcompat.R$layout -> android.support.v7.b.g:
    int abc_action_bar_decor -> abc_action_bar_decor
    int abc_action_bar_decor_include -> abc_action_bar_decor_include
    int abc_action_bar_decor_overlay -> abc_action_bar_decor_overlay
    int abc_action_bar_home -> abc_action_bar_home
    int abc_action_bar_tab -> abc_action_bar_tab
    int abc_action_bar_tabbar -> abc_action_bar_tabbar
    int abc_action_bar_title_item -> abc_action_bar_title_item
    int abc_action_bar_view_list_nav_layout -> abc_action_bar_view_list_nav_layout
    int abc_action_menu_item_layout -> abc_action_menu_item_layout
    int abc_action_menu_layout -> abc_action_menu_layout
    int abc_action_mode_bar -> abc_action_mode_bar
    int abc_action_mode_close_item -> abc_action_mode_close_item
    int abc_activity_chooser_view -> abc_activity_chooser_view
    int abc_activity_chooser_view_include -> abc_activity_chooser_view_include
    int abc_activity_chooser_view_list_item -> abc_activity_chooser_view_list_item
    int abc_expanded_menu_layout -> abc_expanded_menu_layout
    int abc_list_menu_item_checkbox -> abc_list_menu_item_checkbox
    int abc_list_menu_item_icon -> abc_list_menu_item_icon
    int abc_list_menu_item_layout -> abc_list_menu_item_layout
    int abc_list_menu_item_radio -> abc_list_menu_item_radio
    int abc_popup_menu_item_layout -> abc_popup_menu_item_layout
    int abc_search_dropdown_item_icons_2line -> abc_search_dropdown_item_icons_2line
    int abc_search_view -> abc_search_view
    int abc_simple_decor -> abc_simple_decor
    int support_simple_spinner_dropdown_item -> support_simple_spinner_dropdown_item
android.support.v7.appcompat.R$string -> android.support.v7.b.h:
    int abc_action_bar_home_description -> abc_action_bar_home_description
    int abc_action_bar_up_description -> abc_action_bar_up_description
    int abc_action_menu_overflow_description -> abc_action_menu_overflow_description
    int abc_action_mode_done -> abc_action_mode_done
    int abc_activity_chooser_view_see_all -> abc_activity_chooser_view_see_all
    int abc_activitychooserview_choose_application -> abc_activitychooserview_choose_application
    int abc_searchview_description_clear -> abc_searchview_description_clear
    int abc_searchview_description_query -> abc_searchview_description_query
    int abc_searchview_description_search -> abc_searchview_description_search
    int abc_searchview_description_submit -> abc_searchview_description_submit
    int abc_searchview_description_voice -> abc_searchview_description_voice
    int abc_shareactionprovider_share_with -> abc_shareactionprovider_share_with
    int abc_shareactionprovider_share_with_application -> abc_shareactionprovider_share_with_application
android.support.v7.appcompat.R$style -> android.support.v7.b.i:
    int TextAppearance_AppCompat_Base_CompactMenu_Dialog -> TextAppearance_AppCompat_Base_CompactMenu_Dialog
    int TextAppearance_AppCompat_Base_SearchResult -> TextAppearance_AppCompat_Base_SearchResult
    int TextAppearance_AppCompat_Base_SearchResult_Subtitle -> TextAppearance_AppCompat_Base_SearchResult_Subtitle
    int TextAppearance_AppCompat_Base_SearchResult_Title -> TextAppearance_AppCompat_Base_SearchResult_Title
    int TextAppearance_AppCompat_Base_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Base_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Base_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Base_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_Light_Base_SearchResult -> TextAppearance_AppCompat_Light_Base_SearchResult
    int TextAppearance_AppCompat_Light_Base_SearchResult_Subtitle -> TextAppearance_AppCompat_Light_Base_SearchResult_Subtitle
    int TextAppearance_AppCompat_Light_Base_SearchResult_Title -> TextAppearance_AppCompat_Light_Base_SearchResult_Title
    int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_Light_SearchResult_Subtitle -> TextAppearance_AppCompat_Light_SearchResult_Subtitle
    int TextAppearance_AppCompat_Light_SearchResult_Title -> TextAppearance_AppCompat_Light_SearchResult_Title
    int TextAppearance_AppCompat_Light_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Light_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Light_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Light_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_SearchResult_Subtitle -> TextAppearance_AppCompat_SearchResult_Subtitle
    int TextAppearance_AppCompat_SearchResult_Title -> TextAppearance_AppCompat_SearchResult_Title
    int TextAppearance_AppCompat_Widget_ActionBar_Menu -> TextAppearance_AppCompat_Widget_ActionBar_Menu
    int TextAppearance_AppCompat_Widget_ActionBar_Subtitle -> TextAppearance_AppCompat_Widget_ActionBar_Subtitle
    int TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_ActionBar_Title -> TextAppearance_AppCompat_Widget_ActionBar_Title
    int TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse -> TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse
    int TextAppearance_AppCompat_Widget_ActionMode_Subtitle -> TextAppearance_AppCompat_Widget_ActionMode_Subtitle
    int TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_ActionMode_Title -> TextAppearance_AppCompat_Widget_ActionMode_Title
    int TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse -> TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Menu -> TextAppearance_AppCompat_Widget_Base_ActionBar_Menu
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle -> TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Title -> TextAppearance_AppCompat_Widget_Base_ActionBar_Title
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Title_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionBar_Title_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle -> TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Title -> TextAppearance_AppCompat_Widget_Base_ActionMode_Title
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Title_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionMode_Title_Inverse
    int TextAppearance_AppCompat_Widget_Base_DropDownItem -> TextAppearance_AppCompat_Widget_Base_DropDownItem
    int TextAppearance_AppCompat_Widget_DropDownItem -> TextAppearance_AppCompat_Widget_DropDownItem
    int TextAppearance_AppCompat_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Widget_PopupMenu_Small
    int TextAppearance_Widget_AppCompat_Base_ExpandedMenu_Item -> TextAppearance_Widget_AppCompat_Base_ExpandedMenu_Item
    int TextAppearance_Widget_AppCompat_ExpandedMenu_Item -> TextAppearance_Widget_AppCompat_ExpandedMenu_Item
    int Theme_AppCompat -> Theme_AppCompat
    int Theme_AppCompat_Base_CompactMenu -> Theme_AppCompat_Base_CompactMenu
    int Theme_AppCompat_Base_CompactMenu_Dialog -> Theme_AppCompat_Base_CompactMenu_Dialog
    int Theme_AppCompat_CompactMenu -> Theme_AppCompat_CompactMenu
    int Theme_AppCompat_CompactMenu_Dialog -> Theme_AppCompat_CompactMenu_Dialog
    int Theme_AppCompat_DialogWhenLarge -> Theme_AppCompat_DialogWhenLarge
    int Theme_AppCompat_Light -> Theme_AppCompat_Light
    int Theme_AppCompat_Light_DarkActionBar -> Theme_AppCompat_Light_DarkActionBar
    int Theme_AppCompat_Light_DialogWhenLarge -> Theme_AppCompat_Light_DialogWhenLarge
    int Theme_Base -> Theme_Base
    int Theme_Base_AppCompat -> Theme_Base_AppCompat
    int Theme_Base_AppCompat_DialogWhenLarge -> Theme_Base_AppCompat_DialogWhenLarge
    int Theme_Base_AppCompat_DialogWhenLarge_Base -> Theme_Base_AppCompat_DialogWhenLarge_Base
    int Theme_Base_AppCompat_Dialog_FixedSize -> Theme_Base_AppCompat_Dialog_FixedSize
    int Theme_Base_AppCompat_Dialog_Light_FixedSize -> Theme_Base_AppCompat_Dialog_Light_FixedSize
    int Theme_Base_AppCompat_Light -> Theme_Base_AppCompat_Light
    int Theme_Base_AppCompat_Light_DarkActionBar -> Theme_Base_AppCompat_Light_DarkActionBar
    int Theme_Base_AppCompat_Light_DialogWhenLarge -> Theme_Base_AppCompat_Light_DialogWhenLarge
    int Theme_Base_AppCompat_Light_DialogWhenLarge_Base -> Theme_Base_AppCompat_Light_DialogWhenLarge_Base
    int Theme_Base_Light -> Theme_Base_Light
    int Widget_AppCompat_ActionBar -> Widget_AppCompat_ActionBar
    int Widget_AppCompat_ActionBar_Solid -> Widget_AppCompat_ActionBar_Solid
    int Widget_AppCompat_ActionBar_TabBar -> Widget_AppCompat_ActionBar_TabBar
    int Widget_AppCompat_ActionBar_TabText -> Widget_AppCompat_ActionBar_TabText
    int Widget_AppCompat_ActionBar_TabView -> Widget_AppCompat_ActionBar_TabView
    int Widget_AppCompat_ActionButton -> Widget_AppCompat_ActionButton
    int Widget_AppCompat_ActionButton_CloseMode -> Widget_AppCompat_ActionButton_CloseMode
    int Widget_AppCompat_ActionButton_Overflow -> Widget_AppCompat_ActionButton_Overflow
    int Widget_AppCompat_ActionMode -> Widget_AppCompat_ActionMode
    int Widget_AppCompat_ActivityChooserView -> Widget_AppCompat_ActivityChooserView
    int Widget_AppCompat_AutoCompleteTextView -> Widget_AppCompat_AutoCompleteTextView
    int Widget_AppCompat_Base_ActionBar -> Widget_AppCompat_Base_ActionBar
    int Widget_AppCompat_Base_ActionBar_Solid -> Widget_AppCompat_Base_ActionBar_Solid
    int Widget_AppCompat_Base_ActionBar_TabBar -> Widget_AppCompat_Base_ActionBar_TabBar
    int Widget_AppCompat_Base_ActionBar_TabText -> Widget_AppCompat_Base_ActionBar_TabText
    int Widget_AppCompat_Base_ActionBar_TabView -> Widget_AppCompat_Base_ActionBar_TabView
    int Widget_AppCompat_Base_ActionButton -> Widget_AppCompat_Base_ActionButton
    int Widget_AppCompat_Base_ActionButton_CloseMode -> Widget_AppCompat_Base_ActionButton_CloseMode
    int Widget_AppCompat_Base_ActionButton_Overflow -> Widget_AppCompat_Base_ActionButton_Overflow
    int Widget_AppCompat_Base_ActionMode -> Widget_AppCompat_Base_ActionMode
    int Widget_AppCompat_Base_ActivityChooserView -> Widget_AppCompat_Base_ActivityChooserView
    int Widget_AppCompat_Base_AutoCompleteTextView -> Widget_AppCompat_Base_AutoCompleteTextView
    int Widget_AppCompat_Base_DropDownItem_Spinner -> Widget_AppCompat_Base_DropDownItem_Spinner
    int Widget_AppCompat_Base_ListPopupWindow -> Widget_AppCompat_Base_ListPopupWindow
    int Widget_AppCompat_Base_ListView_DropDown -> Widget_AppCompat_Base_ListView_DropDown
    int Widget_AppCompat_Base_ListView_Menu -> Widget_AppCompat_Base_ListView_Menu
    int Widget_AppCompat_Base_PopupMenu -> Widget_AppCompat_Base_PopupMenu
    int Widget_AppCompat_Base_ProgressBar -> Widget_AppCompat_Base_ProgressBar
    int Widget_AppCompat_Base_ProgressBar_Horizontal -> Widget_AppCompat_Base_ProgressBar_Horizontal
    int Widget_AppCompat_Base_Spinner -> Widget_AppCompat_Base_Spinner
    int Widget_AppCompat_DropDownItem_Spinner -> Widget_AppCompat_DropDownItem_Spinner
    int Widget_AppCompat_Light_ActionBar -> Widget_AppCompat_Light_ActionBar
    int Widget_AppCompat_Light_ActionBar_Solid -> Widget_AppCompat_Light_ActionBar_Solid
    int Widget_AppCompat_Light_ActionBar_Solid_Inverse -> Widget_AppCompat_Light_ActionBar_Solid_Inverse
    int Widget_AppCompat_Light_ActionBar_TabBar -> Widget_AppCompat_Light_ActionBar_TabBar
    int Widget_AppCompat_Light_ActionBar_TabBar_Inverse -> Widget_AppCompat_Light_ActionBar_TabBar_Inverse
    int Widget_AppCompat_Light_ActionBar_TabText -> Widget_AppCompat_Light_ActionBar_TabText
    int Widget_AppCompat_Light_ActionBar_TabText_Inverse -> Widget_AppCompat_Light_ActionBar_TabText_Inverse
    int Widget_AppCompat_Light_ActionBar_TabView -> Widget_AppCompat_Light_ActionBar_TabView
    int Widget_AppCompat_Light_ActionBar_TabView_Inverse -> Widget_AppCompat_Light_ActionBar_TabView_Inverse
    int Widget_AppCompat_Light_ActionButton -> Widget_AppCompat_Light_ActionButton
    int Widget_AppCompat_Light_ActionButton_CloseMode -> Widget_AppCompat_Light_ActionButton_CloseMode
    int Widget_AppCompat_Light_ActionButton_Overflow -> Widget_AppCompat_Light_ActionButton_Overflow
    int Widget_AppCompat_Light_ActionMode_Inverse -> Widget_AppCompat_Light_ActionMode_Inverse
    int Widget_AppCompat_Light_ActivityChooserView -> Widget_AppCompat_Light_ActivityChooserView
    int Widget_AppCompat_Light_AutoCompleteTextView -> Widget_AppCompat_Light_AutoCompleteTextView
    int Widget_AppCompat_Light_Base_ActionBar -> Widget_AppCompat_Light_Base_ActionBar
    int Widget_AppCompat_Light_Base_ActionBar_Solid -> Widget_AppCompat_Light_Base_ActionBar_Solid
    int Widget_AppCompat_Light_Base_ActionBar_Solid_Inverse -> Widget_AppCompat_Light_Base_ActionBar_Solid_Inverse
    int Widget_AppCompat_Light_Base_ActionBar_TabBar -> Widget_AppCompat_Light_Base_ActionBar_TabBar
    int Widget_AppCompat_Light_Base_ActionBar_TabBar_Inverse -> Widget_AppCompat_Light_Base_ActionBar_TabBar_Inverse
    int Widget_AppCompat_Light_Base_ActionBar_TabText -> Widget_AppCompat_Light_Base_ActionBar_TabText
    int Widget_AppCompat_Light_Base_ActionBar_TabText_Inverse -> Widget_AppCompat_Light_Base_ActionBar_TabText_Inverse
    int Widget_AppCompat_Light_Base_ActionBar_TabView -> Widget_AppCompat_Light_Base_ActionBar_TabView
    int Widget_AppCompat_Light_Base_ActionBar_TabView_Inverse -> Widget_AppCompat_Light_Base_ActionBar_TabView_Inverse
    int Widget_AppCompat_Light_Base_ActionButton -> Widget_AppCompat_Light_Base_ActionButton
    int Widget_AppCompat_Light_Base_ActionButton_CloseMode -> Widget_AppCompat_Light_Base_ActionButton_CloseMode
    int Widget_AppCompat_Light_Base_ActionButton_Overflow -> Widget_AppCompat_Light_Base_ActionButton_Overflow
    int Widget_AppCompat_Light_Base_ActionMode_Inverse -> Widget_AppCompat_Light_Base_ActionMode_Inverse
    int Widget_AppCompat_Light_Base_ActivityChooserView -> Widget_AppCompat_Light_Base_ActivityChooserView
    int Widget_AppCompat_Light_Base_AutoCompleteTextView -> Widget_AppCompat_Light_Base_AutoCompleteTextView
    int Widget_AppCompat_Light_Base_DropDownItem_Spinner -> Widget_AppCompat_Light_Base_DropDownItem_Spinner
    int Widget_AppCompat_Light_Base_ListPopupWindow -> Widget_AppCompat_Light_Base_ListPopupWindow
    int Widget_AppCompat_Light_Base_ListView_DropDown -> Widget_AppCompat_Light_Base_ListView_DropDown
    int Widget_AppCompat_Light_Base_PopupMenu -> Widget_AppCompat_Light_Base_PopupMenu
    int Widget_AppCompat_Light_Base_Spinner -> Widget_AppCompat_Light_Base_Spinner
    int Widget_AppCompat_Light_DropDownItem_Spinner -> Widget_AppCompat_Light_DropDownItem_Spinner
    int Widget_AppCompat_Light_ListPopupWindow -> Widget_AppCompat_Light_ListPopupWindow
    int Widget_AppCompat_Light_ListView_DropDown -> Widget_AppCompat_Light_ListView_DropDown
    int Widget_AppCompat_Light_PopupMenu -> Widget_AppCompat_Light_PopupMenu
    int Widget_AppCompat_Light_Spinner_DropDown_ActionBar -> Widget_AppCompat_Light_Spinner_DropDown_ActionBar
    int Widget_AppCompat_ListPopupWindow -> Widget_AppCompat_ListPopupWindow
    int Widget_AppCompat_ListView_DropDown -> Widget_AppCompat_ListView_DropDown
    int Widget_AppCompat_ListView_Menu -> Widget_AppCompat_ListView_Menu
    int Widget_AppCompat_PopupMenu -> Widget_AppCompat_PopupMenu
    int Widget_AppCompat_ProgressBar -> Widget_AppCompat_ProgressBar
    int Widget_AppCompat_ProgressBar_Horizontal -> Widget_AppCompat_ProgressBar_Horizontal
    int Widget_AppCompat_Spinner_DropDown_ActionBar -> Widget_AppCompat_Spinner_DropDown_ActionBar
android.support.v7.appcompat.R$styleable -> android.support.v7.b.j:
    int[] ActionBar -> ActionBar
    int[] ActionBarLayout -> ActionBarLayout
    int ActionBarLayout_android_layout_gravity -> ActionBarLayout_android_layout_gravity
    int[] ActionBarWindow -> ActionBarWindow
    int ActionBarWindow_windowActionBar -> ActionBarWindow_windowActionBar
    int ActionBarWindow_windowActionBarOverlay -> ActionBarWindow_windowActionBarOverlay
    int ActionBarWindow_windowFixedHeightMajor -> ActionBarWindow_windowFixedHeightMajor
    int ActionBarWindow_windowFixedHeightMinor -> ActionBarWindow_windowFixedHeightMinor
    int ActionBarWindow_windowFixedWidthMajor -> ActionBarWindow_windowFixedWidthMajor
    int ActionBarWindow_windowFixedWidthMinor -> ActionBarWindow_windowFixedWidthMinor
    int ActionBarWindow_windowSplitActionBar -> ActionBarWindow_windowSplitActionBar
    int ActionBar_background -> ActionBar_background
    int ActionBar_backgroundSplit -> ActionBar_backgroundSplit
    int ActionBar_backgroundStacked -> ActionBar_backgroundStacked
    int ActionBar_customNavigationLayout -> ActionBar_customNavigationLayout
    int ActionBar_displayOptions -> ActionBar_displayOptions
    int ActionBar_divider -> ActionBar_divider
    int ActionBar_height -> ActionBar_height
    int ActionBar_homeLayout -> ActionBar_homeLayout
    int ActionBar_icon -> ActionBar_icon
    int ActionBar_indeterminateProgressStyle -> ActionBar_indeterminateProgressStyle
    int ActionBar_itemPadding -> ActionBar_itemPadding
    int ActionBar_logo -> ActionBar_logo
    int ActionBar_navigationMode -> ActionBar_navigationMode
    int ActionBar_progressBarPadding -> ActionBar_progressBarPadding
    int ActionBar_progressBarStyle -> ActionBar_progressBarStyle
    int ActionBar_subtitle -> ActionBar_subtitle
    int ActionBar_subtitleTextStyle -> ActionBar_subtitleTextStyle
    int ActionBar_title -> ActionBar_title
    int ActionBar_titleTextStyle -> ActionBar_titleTextStyle
    int[] ActionMenuItemView -> ActionMenuItemView
    int ActionMenuItemView_android_minWidth -> ActionMenuItemView_android_minWidth
    int[] ActionMenuView -> ActionMenuView
    int[] ActionMode -> ActionMode
    int ActionMode_background -> ActionMode_background
    int ActionMode_backgroundSplit -> ActionMode_backgroundSplit
    int ActionMode_height -> ActionMode_height
    int ActionMode_subtitleTextStyle -> ActionMode_subtitleTextStyle
    int ActionMode_titleTextStyle -> ActionMode_titleTextStyle
    int[] ActivityChooserView -> ActivityChooserView
    int ActivityChooserView_expandActivityOverflowButtonDrawable -> ActivityChooserView_expandActivityOverflowButtonDrawable
    int ActivityChooserView_initialActivityCount -> ActivityChooserView_initialActivityCount
    int[] CompatTextView -> CompatTextView
    int CompatTextView_textAllCaps -> CompatTextView_textAllCaps
    int[] LinearLayoutICS -> LinearLayoutICS
    int LinearLayoutICS_divider -> LinearLayoutICS_divider
    int LinearLayoutICS_dividerPadding -> LinearLayoutICS_dividerPadding
    int LinearLayoutICS_showDividers -> LinearLayoutICS_showDividers
    int[] MenuGroup -> MenuGroup
    int MenuGroup_android_checkableBehavior -> MenuGroup_android_checkableBehavior
    int MenuGroup_android_enabled -> MenuGroup_android_enabled
    int MenuGroup_android_id -> MenuGroup_android_id
    int MenuGroup_android_menuCategory -> MenuGroup_android_menuCategory
    int MenuGroup_android_orderInCategory -> MenuGroup_android_orderInCategory
    int MenuGroup_android_visible -> MenuGroup_android_visible
    int[] MenuItem -> MenuItem
    int MenuItem_actionLayout -> MenuItem_actionLayout
    int MenuItem_actionProviderClass -> MenuItem_actionProviderClass
    int MenuItem_actionViewClass -> MenuItem_actionViewClass
    int MenuItem_android_alphabeticShortcut -> MenuItem_android_alphabeticShortcut
    int MenuItem_android_checkable -> MenuItem_android_checkable
    int MenuItem_android_checked -> MenuItem_android_checked
    int MenuItem_android_enabled -> MenuItem_android_enabled
    int MenuItem_android_icon -> MenuItem_android_icon
    int MenuItem_android_id -> MenuItem_android_id
    int MenuItem_android_menuCategory -> MenuItem_android_menuCategory
    int MenuItem_android_numericShortcut -> MenuItem_android_numericShortcut
    int MenuItem_android_onClick -> MenuItem_android_onClick
    int MenuItem_android_orderInCategory -> MenuItem_android_orderInCategory
    int MenuItem_android_title -> MenuItem_android_title
    int MenuItem_android_titleCondensed -> MenuItem_android_titleCondensed
    int MenuItem_android_visible -> MenuItem_android_visible
    int MenuItem_showAsAction -> MenuItem_showAsAction
    int[] MenuView -> MenuView
    int MenuView_android_headerBackground -> MenuView_android_headerBackground
    int MenuView_android_horizontalDivider -> MenuView_android_horizontalDivider
    int MenuView_android_itemBackground -> MenuView_android_itemBackground
    int MenuView_android_itemIconDisabledAlpha -> MenuView_android_itemIconDisabledAlpha
    int MenuView_android_itemTextAppearance -> MenuView_android_itemTextAppearance
    int MenuView_android_preserveIconSpacing -> MenuView_android_preserveIconSpacing
    int MenuView_android_verticalDivider -> MenuView_android_verticalDivider
    int MenuView_android_windowAnimationStyle -> MenuView_android_windowAnimationStyle
    int[] SearchView -> SearchView
    int SearchView_android_imeOptions -> SearchView_android_imeOptions
    int SearchView_android_inputType -> SearchView_android_inputType
    int SearchView_android_maxWidth -> SearchView_android_maxWidth
    int SearchView_iconifiedByDefault -> SearchView_iconifiedByDefault
    int SearchView_queryHint -> SearchView_queryHint
    int[] Spinner -> Spinner
    int Spinner_android_dropDownHorizontalOffset -> Spinner_android_dropDownHorizontalOffset
    int Spinner_android_dropDownSelector -> Spinner_android_dropDownSelector
    int Spinner_android_dropDownVerticalOffset -> Spinner_android_dropDownVerticalOffset
    int Spinner_android_dropDownWidth -> Spinner_android_dropDownWidth
    int Spinner_android_gravity -> Spinner_android_gravity
    int Spinner_android_popupBackground -> Spinner_android_popupBackground
    int Spinner_disableChildrenWhenDisabled -> Spinner_disableChildrenWhenDisabled
    int Spinner_popupPromptView -> Spinner_popupPromptView
    int Spinner_prompt -> Spinner_prompt
    int Spinner_spinnerMode -> Spinner_spinnerMode
    int[] Theme -> Theme
    int Theme_actionDropDownStyle -> Theme_actionDropDownStyle
    int Theme_dropdownListPreferredItemHeight -> Theme_dropdownListPreferredItemHeight
    int Theme_listChoiceBackgroundIndicator -> Theme_listChoiceBackgroundIndicator
    int Theme_panelMenuListTheme -> Theme_panelMenuListTheme
    int Theme_panelMenuListWidth -> Theme_panelMenuListWidth
    int Theme_popupMenuStyle -> Theme_popupMenuStyle
    int[] View -> View
    int View_android_focusable -> View_android_focusable
    int View_paddingEnd -> View_paddingEnd
    int View_paddingStart -> View_paddingStart
android.support.v7.internal.view.ActionBarPolicy -> android.support.v7.internal.view.a:
    android.content.Context mContext -> a
    android.support.v7.internal.view.ActionBarPolicy get(android.content.Context) -> a
    int getMaxActionButtons() -> a
    boolean showsOverflowMenuButton() -> b
    int getEmbeddedMenuWidthLimit() -> c
    boolean hasEmbeddedTabs() -> d
    int getTabContainerHeight() -> e
    int getStackedTabMaxWidth() -> f
android.support.v7.internal.view.menu.ActionMenuItem -> android.support.v7.internal.view.menu.a:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    android.content.Intent mIntent -> g
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> i
    android.graphics.drawable.Drawable mIconDrawable -> j
    int mIconResId -> k
    android.content.Context mContext -> l
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> m
    int mFlags -> n
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    int getGroupId() -> getGroupId
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.content.Intent getIntent() -> getIntent
    int getItemId() -> getItemId
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    char getNumericShortcut() -> getNumericShortcut
    int getOrder() -> getOrder
    android.view.SubMenu getSubMenu() -> getSubMenu
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    boolean hasSubMenu() -> hasSubMenu
    boolean isCheckable() -> isCheckable
    boolean isChecked() -> isChecked
    boolean isEnabled() -> isEnabled
    boolean isVisible() -> isVisible
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.view.MenuItem setVisible(boolean) -> setVisible
    void setShowAsAction(int) -> setShowAsAction
    android.support.v4.internal.view.SupportMenuItem setActionView(android.view.View) -> a
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.support.v4.internal.view.SupportMenuItem setActionView(int) -> a
    android.support.v4.internal.view.SupportMenuItem setShowAsActionFlags(int) -> b
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
android.support.v7.internal.view.menu.ActionMenuItemView -> android.support.v7.internal.view.menu.ActionMenuItemView:
    android.support.v7.internal.view.menu.MenuItemImpl mItemData -> a
    java.lang.CharSequence mTitle -> b
    android.graphics.drawable.Drawable mIcon -> c
    android.support.v7.internal.view.menu.MenuBuilder$ItemInvoker mItemInvoker -> d
    boolean mAllowTextWithIcon -> e
    boolean mExpandedFormat -> f
    int mMinWidth -> g
    int mSavedPaddingLeft -> h
    void setPadding(int,int,int,int) -> setPadding
    android.support.v7.internal.view.menu.MenuItemImpl getItemData() -> getItemData
    void initialize(android.support.v7.internal.view.menu.MenuItemImpl,int) -> a
    void onClick(android.view.View) -> onClick
    void setItemInvoker(android.support.v7.internal.view.menu.MenuBuilder$ItemInvoker) -> setItemInvoker
    boolean prefersCondensedTitle() -> a
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setExpandedFormat(boolean) -> setExpandedFormat
    void updateTextButtonVisibility() -> e
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    boolean hasText() -> b
    void setTitle(java.lang.CharSequence) -> setTitle
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
    boolean onLongClick(android.view.View) -> onLongClick
    void onMeasure(int,int) -> onMeasure
android.support.v7.internal.view.menu.ActionMenuItemView$AllCapsTransformationMethod -> android.support.v7.internal.view.menu.b:
    java.util.Locale mLocale -> b
    android.support.v7.internal.view.menu.ActionMenuItemView this$0 -> a
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
    void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect) -> onFocusChanged
android.support.v7.internal.view.menu.ActionMenuPresenter -> android.support.v7.internal.view.menu.ActionMenuPresenter:
    android.view.View mOverflowButton -> i
    boolean mReserveOverflow -> j
    boolean mReserveOverflowSet -> k
    int mWidthLimit -> l
    int mActionItemWidthLimit -> m
    int mMaxItems -> n
    boolean mMaxItemsSet -> o
    boolean mStrictWidthLimit -> p
    boolean mWidthLimitSet -> q
    boolean mExpandedActionViewsExclusive -> r
    int mMinCellSize -> s
    android.util.SparseBooleanArray mActionButtonGroups -> t
    android.view.View mScrapActionButtonView -> u
    android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup mOverflowPopup -> v
    android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu mActionButtonPopup -> w
    android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable mPostedOpenRunnable -> x
    android.support.v7.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback -> a
    int mOpenSubMenuId -> b
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void setWidthLimit(int,boolean) -> a
    void setItemLimit(int) -> a
    void setExpandedActionViewsExclusive(boolean) -> a
    android.support.v7.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    android.view.View getItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.support.v7.internal.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem(int,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void updateMenuView(boolean) -> b
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    android.view.View findViewForItem(android.view.MenuItem) -> a
    boolean showOverflowMenu() -> a
    boolean hideOverflowMenu() -> b
    boolean dismissPopupMenus() -> c
    boolean hideSubMenus() -> d
    boolean isOverflowMenuShowing() -> e
    boolean flagActionItems() -> f
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup access$102(android.support.v7.internal.view.menu.ActionMenuPresenter,android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu access$202(android.support.v7.internal.view.menu.ActionMenuPresenter,android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable access$302(android.support.v7.internal.view.menu.ActionMenuPresenter,android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable) -> a
android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu -> android.support.v7.internal.view.menu.c:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    void onDismiss(android.content.DialogInterface) -> onDismiss
android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable -> android.support.v7.internal.view.menu.d:
    android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup mPopup -> b
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    void run() -> run
android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowMenuButton -> android.support.v7.internal.view.menu.e:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    boolean performClick() -> performClick
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup -> android.support.v7.internal.view.menu.f:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    void onDismiss() -> onDismiss
android.support.v7.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback -> android.support.v7.internal.view.menu.g:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState -> android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState:
    int openSubMenuId -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState$1 -> android.support.v7.internal.view.menu.h:
    android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.view.menu.ActionMenuView -> android.support.v7.internal.view.menu.ActionMenuView:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    boolean mReserveOverflow -> b
    android.support.v7.internal.view.menu.ActionMenuPresenter mPresenter -> c
    boolean mFormatItems -> d
    int mFormatItemsWidth -> e
    int mMinCellSize -> f
    int mGeneratedItemPadding -> g
    int mMeasuredExtraWidth -> h
    int mMaxItemHeight -> i
    void setPresenter(android.support.v7.internal.view.menu.ActionMenuPresenter) -> setPresenter
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onMeasure(int,int) -> onMeasure
    void onMeasureExactFormat(int,int) -> a
    int measureChildForCells(android.view.View,int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOverflowReserved(boolean) -> setOverflowReserved
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams() -> a
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet) -> a
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams() -> b
    boolean invokeItem(android.support.v7.internal.view.menu.MenuItemImpl) -> a
    int getWindowAnimations() -> getWindowAnimations
    void initialize(android.support.v7.internal.view.menu.MenuBuilder) -> a
    boolean hasSupportDividerBeforeChildAt(int) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
android.support.v7.internal.view.menu.ActionMenuView$ActionMenuChildView -> android.support.v7.internal.view.menu.i:
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
android.support.v7.internal.view.menu.ActionMenuView$LayoutParams -> android.support.v7.internal.view.menu.j:
    boolean isOverflowButton -> a
    int cellsUsed -> b
    int extraPixels -> c
    boolean expandable -> d
    boolean preventEdgeOffset -> e
    boolean expanded -> f
android.support.v7.internal.view.menu.BaseMenuPresenter -> android.support.v7.internal.view.menu.k:
    android.content.Context mSystemContext -> c
    android.content.Context mContext -> d
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> e
    android.view.LayoutInflater mSystemInflater -> f
    android.view.LayoutInflater mInflater -> g
    android.support.v7.internal.view.menu.MenuPresenter$Callback mCallback -> a
    int mMenuLayoutRes -> b
    int mItemLayoutRes -> i
    android.support.v7.internal.view.menu.MenuView mMenuView -> h
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    android.support.v7.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    void updateMenuView(boolean) -> b
    void addItemView(android.view.View,int) -> a
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    void setCallback(android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    android.support.v7.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup) -> b
    android.view.View getItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.support.v7.internal.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem(int,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    boolean flagActionItems() -> f
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
android.support.v7.internal.view.menu.ExpandedMenuView -> android.support.v7.internal.view.menu.ExpandedMenuView:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    int mAnimations -> b
    void initialize(android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean invokeItem(android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    int getWindowAnimations() -> getWindowAnimations
android.support.v7.internal.view.menu.ListMenuItemView -> android.support.v7.internal.view.menu.ListMenuItemView:
    android.support.v7.internal.view.menu.MenuItemImpl mItemData -> a
    android.widget.ImageView mIconView -> b
    android.widget.RadioButton mRadioButton -> c
    android.widget.TextView mTitleView -> d
    android.widget.CheckBox mCheckBox -> e
    android.widget.TextView mShortcutView -> f
    android.graphics.drawable.Drawable mBackground -> g
    int mTextAppearance -> h
    android.content.Context mTextAppearanceContext -> i
    boolean mPreserveIconSpacing -> j
    int mMenuType -> k
    android.content.Context mContext -> l
    android.view.LayoutInflater mInflater -> m
    boolean mForceShowIcon -> n
    void onFinishInflate() -> onFinishInflate
    void initialize(android.support.v7.internal.view.menu.MenuItemImpl,int) -> a
    void setForceShowIcon(boolean) -> setForceShowIcon
    void setTitle(java.lang.CharSequence) -> setTitle
    android.support.v7.internal.view.menu.MenuItemImpl getItemData() -> getItemData
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setShortcut(boolean,char) -> a
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void onMeasure(int,int) -> onMeasure
    void insertIconView() -> b
    void insertRadioButton() -> c
    void insertCheckBox() -> d
    boolean prefersCondensedTitle() -> a
    android.view.LayoutInflater getInflater() -> getInflater
android.support.v7.internal.view.menu.ListMenuPresenter -> android.support.v7.internal.view.menu.l:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> c
    int mItemIndexOffset -> g
    int mThemeRes -> d
    int mItemLayoutRes -> e
    android.support.v7.internal.view.menu.MenuPresenter$Callback mCallback -> h
    android.support.v7.internal.view.menu.ListMenuPresenter$MenuAdapter mAdapter -> f
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    android.widget.ListAdapter getAdapter() -> a
    void updateMenuView(boolean) -> b
    void setCallback(android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean flagActionItems() -> f
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
    int access$000(android.support.v7.internal.view.menu.ListMenuPresenter) -> a
android.support.v7.internal.view.menu.ListMenuPresenter$MenuAdapter -> android.support.v7.internal.view.menu.m:
    int mExpandedIndex -> b
    android.support.v7.internal.view.menu.ListMenuPresenter this$0 -> a
    int getCount() -> getCount
    android.support.v7.internal.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.lang.Object getItem(int) -> getItem
android.support.v7.internal.view.menu.MenuBuilder -> android.support.v7.internal.view.menu.n:
    int[] sCategoryToOrder -> d
    android.content.Context mContext -> e
    android.content.res.Resources mResources -> f
    boolean mQwertyMode -> g
    boolean mShortcutsVisible -> h
    android.support.v7.internal.view.menu.MenuBuilder$Callback mCallback -> i
    java.util.ArrayList mItems -> j
    java.util.ArrayList mVisibleItems -> k
    boolean mIsVisibleItemsStale -> l
    java.util.ArrayList mActionItems -> m
    java.util.ArrayList mNonActionItems -> n
    boolean mIsActionItemsStale -> o
    int mDefaultShowAsAction -> p
    android.view.ContextMenu$ContextMenuInfo mCurrentMenuInfo -> q
    java.lang.CharSequence mHeaderTitle -> a
    android.graphics.drawable.Drawable mHeaderIcon -> b
    android.view.View mHeaderView -> c
    boolean mPreventDispatchingItemsChanged -> r
    boolean mItemsChangedWhileDispatchPrevented -> s
    boolean mOptionalIconsVisible -> t
    boolean mIsClosing -> u
    java.util.ArrayList mTempShortcutItemList -> v
    java.util.concurrent.CopyOnWriteArrayList mPresenters -> w
    android.support.v7.internal.view.menu.MenuItemImpl mExpandedItem -> x
    void addMenuPresenter(android.support.v7.internal.view.menu.MenuPresenter) -> a
    void dispatchPresenterUpdate(boolean) -> c
    boolean dispatchSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence) -> a
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    void removeItem(int) -> removeItem
    void removeGroup(int) -> removeGroup
    void removeItemAtInt(int,boolean) -> a
    void clear() -> clear
    void setExclusiveItemChecked(android.view.MenuItem) -> a
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    boolean hasVisibleItems() -> hasVisibleItems
    android.view.MenuItem findItem(int) -> findItem
    int findItemIndex(int) -> a
    int findGroupIndex(int) -> b
    int findGroupIndex(int,int) -> a
    int size() -> size
    android.view.MenuItem getItem(int) -> getItem
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    void setQwertyMode(boolean) -> setQwertyMode
    int getOrdering(int) -> c
    boolean isQwertyMode() -> a
    void setShortcutsVisibleInner(boolean) -> d
    boolean isShortcutsVisible() -> b
    android.content.res.Resources getResources() -> c
    android.content.Context getContext() -> d
    boolean dispatchMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void changeMenuMode() -> e
    int findInsertIndex(java.util.ArrayList,int) -> a
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent) -> a
    android.support.v7.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent) -> a
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performItemAction(android.view.MenuItem,int) -> a
    void close(boolean) -> a
    void close() -> close
    void onItemsChanged(boolean) -> b
    void stopDispatchingItemsChanged() -> f
    void startDispatchingItemsChanged() -> g
    void onItemVisibleChanged(android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void onItemActionRequestChanged(android.support.v7.internal.view.menu.MenuItemImpl) -> b
    java.util.ArrayList getVisibleItems() -> h
    void flagActionItems() -> i
    java.util.ArrayList getActionItems() -> j
    java.util.ArrayList getNonActionItems() -> k
    void clearHeader() -> clearHeader
    void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View) -> a
    android.support.v7.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence) -> a
    android.support.v7.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable) -> a
    android.support.v7.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View) -> a
    java.lang.CharSequence getHeaderTitle() -> l
    android.graphics.drawable.Drawable getHeaderIcon() -> m
    android.view.View getHeaderView() -> n
    android.support.v7.internal.view.menu.MenuBuilder getRootMenu() -> o
    boolean getOptionalIconsVisible() -> p
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> c
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> d
    android.support.v7.internal.view.menu.MenuItemImpl getExpandedItem() -> q
android.support.v7.internal.view.menu.MenuBuilder$Callback -> android.support.v7.internal.view.menu.o:
    boolean onMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.internal.view.menu.MenuBuilder) -> a
android.support.v7.internal.view.menu.MenuBuilder$ItemInvoker -> android.support.v7.internal.view.menu.p:
    boolean invokeItem(android.support.v7.internal.view.menu.MenuItemImpl) -> a
android.support.v7.internal.view.menu.MenuDialogHelper -> android.support.v7.internal.view.menu.q:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    android.app.AlertDialog mDialog -> c
    android.support.v7.internal.view.menu.ListMenuPresenter mPresenter -> b
    android.support.v7.internal.view.menu.MenuPresenter$Callback mPresenterCallback -> d
    void show(android.os.IBinder) -> a
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
    void dismiss() -> a
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onClick(android.content.DialogInterface,int) -> onClick
android.support.v7.internal.view.menu.MenuItemImpl -> android.support.v7.internal.view.menu.r:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    android.content.Intent mIntent -> g
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> i
    android.graphics.drawable.Drawable mIconDrawable -> j
    int mIconResId -> k
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> l
    android.support.v7.internal.view.menu.SubMenuBuilder mSubMenu -> m
    java.lang.Runnable mItemCallback -> n
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> o
    int mFlags -> p
    int mShowAsAction -> q
    android.view.View mActionView -> r
    android.support.v4.view.ActionProvider mActionProvider -> s
    android.support.v4.view.MenuItemCompat$OnActionExpandListener mOnActionExpandListener -> t
    boolean mIsActionViewExpanded -> u
    android.view.ContextMenu$ContextMenuInfo mMenuInfo -> v
    java.lang.String sPrependShortcutLabel -> w
    java.lang.String sEnterShortcutLabel -> x
    java.lang.String sDeleteShortcutLabel -> y
    java.lang.String sSpaceShortcutLabel -> z
    boolean invoke() -> a
    boolean isEnabled() -> isEnabled
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    int getGroupId() -> getGroupId
    int getItemId() -> getItemId
    int getOrder() -> getOrder
    int getOrdering() -> b
    android.content.Intent getIntent() -> getIntent
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    char getNumericShortcut() -> getNumericShortcut
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    char getShortcut() -> c
    java.lang.String getShortcutLabel() -> d
    boolean shouldShowShortcut() -> e
    android.view.SubMenu getSubMenu() -> getSubMenu
    boolean hasSubMenu() -> hasSubMenu
    void setSubMenu(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleForItemView(android.support.v7.internal.view.menu.MenuView$ItemView) -> a
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    boolean isCheckable() -> isCheckable
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    void setExclusiveCheckable(boolean) -> a
    boolean isExclusiveCheckable() -> f
    boolean isChecked() -> isChecked
    android.view.MenuItem setChecked(boolean) -> setChecked
    void setCheckedInt(boolean) -> b
    boolean isVisible() -> isVisible
    boolean setVisibleInt(boolean) -> c
    android.view.MenuItem setVisible(boolean) -> setVisible
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    java.lang.String toString() -> toString
    void setMenuInfo(android.view.ContextMenu$ContextMenuInfo) -> a
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    void actionFormatChanged() -> g
    boolean shouldShowIcon() -> h
    boolean isActionButton() -> i
    boolean requestsActionButton() -> j
    boolean requiresActionButton() -> k
    void setIsActionButton(boolean) -> d
    boolean showsTextAsAction() -> l
    void setShowAsAction(int) -> setShowAsAction
    android.support.v4.internal.view.SupportMenuItem setActionView(android.view.View) -> a
    android.support.v4.internal.view.SupportMenuItem setActionView(int) -> a
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.support.v4.view.ActionProvider getSupportActionProvider() -> m
    android.support.v4.internal.view.SupportMenuItem setShowAsActionFlags(int) -> b
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean hasCollapsibleActionView() -> n
    void setActionViewExpanded(boolean) -> e
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
android.support.v7.internal.view.menu.MenuPopupHelper -> android.support.v7.internal.view.menu.s:
    int ITEM_LAYOUT -> b
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> d
    android.support.v7.internal.widget.ListPopupWindow mPopup -> e
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> f
    int mPopupMaxWidth -> g
    android.view.View mAnchorView -> h
    boolean mOverflowOnly -> i
    android.view.ViewTreeObserver mTreeObserver -> j
    android.support.v7.internal.view.menu.MenuPopupHelper$MenuAdapter mAdapter -> k
    android.support.v7.internal.view.menu.MenuPresenter$Callback mPresenterCallback -> l
    boolean mForceShowIcon -> c
    android.view.ViewGroup mMeasureParent -> m
    void setForceShowIcon(boolean) -> a
    boolean tryShow() -> a
    void dismiss() -> b
    void onDismiss() -> onDismiss
    boolean isShowing() -> c
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    int measureContentWidth(android.widget.ListAdapter) -> a
    void onGlobalLayout() -> onGlobalLayout
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    void setCallback(android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> f
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
    boolean access$100(android.support.v7.internal.view.menu.MenuPopupHelper) -> a
    android.view.LayoutInflater access$200(android.support.v7.internal.view.menu.MenuPopupHelper) -> b
    android.support.v7.internal.view.menu.MenuBuilder access$300(android.support.v7.internal.view.menu.MenuPopupHelper) -> c
android.support.v7.internal.view.menu.MenuPopupHelper$MenuAdapter -> android.support.v7.internal.view.menu.t:
    android.support.v7.internal.view.menu.MenuBuilder mAdapterMenu -> b
    int mExpandedIndex -> c
    android.support.v7.internal.view.menu.MenuPopupHelper this$0 -> a
    int getCount() -> getCount
    android.support.v7.internal.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.lang.Object getItem(int) -> getItem
    android.support.v7.internal.view.menu.MenuBuilder access$000(android.support.v7.internal.view.menu.MenuPopupHelper$MenuAdapter) -> a
android.support.v7.internal.view.menu.MenuPresenter -> android.support.v7.internal.view.menu.u:
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> f
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
android.support.v7.internal.view.menu.MenuPresenter$Callback -> android.support.v7.internal.view.menu.v:
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> a
android.support.v7.internal.view.menu.MenuView -> android.support.v7.internal.view.menu.w:
    void initialize(android.support.v7.internal.view.menu.MenuBuilder) -> a
android.support.v7.internal.view.menu.MenuView$ItemView -> android.support.v7.internal.view.menu.x:
    void initialize(android.support.v7.internal.view.menu.MenuItemImpl,int) -> a
    android.support.v7.internal.view.menu.MenuItemImpl getItemData() -> getItemData
    boolean prefersCondensedTitle() -> a
android.support.v7.internal.view.menu.SubMenuBuilder -> android.support.v7.internal.view.menu.y:
    android.support.v7.internal.view.menu.MenuBuilder mParentMenu -> d
    android.support.v7.internal.view.menu.MenuItemImpl mItem -> e
    void setQwertyMode(boolean) -> setQwertyMode
    boolean isQwertyMode() -> a
    boolean isShortcutsVisible() -> b
    android.view.Menu getParentMenu() -> r
    android.view.MenuItem getItem() -> getItem
    android.support.v7.internal.view.menu.MenuBuilder getRootMenu() -> o
    boolean dispatchMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.SubMenu setIcon(int) -> setIcon
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    void clearHeader() -> clearHeader
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> c
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> d
android.support.v7.internal.widget.AbsActionBarView -> android.support.v7.internal.widget.a:
    android.support.v7.internal.view.menu.ActionMenuView mMenuView -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter mActionMenuPresenter -> b
    android.support.v7.internal.widget.ActionBarContainer mSplitView -> c
    boolean mSplitActionBar -> d
    boolean mSplitWhenNarrow -> e
    int mContentHeight -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
    void setContentHeight(int) -> setContentHeight
    int getContentHeight() -> getContentHeight
    void setSplitView(android.support.v7.internal.widget.ActionBarContainer) -> setSplitView
    int getAnimatedVisibility() -> getAnimatedVisibility
    void setVisibility(int) -> setVisibility
    boolean showOverflowMenu() -> a
    void postShowOverflowMenu() -> b
    boolean isOverflowMenuShowing() -> c
    int measureChildView(android.view.View,int,int,int) -> a
    int positionChild(android.view.View,int,int,int) -> b
    int positionChildInverse(android.view.View,int,int,int) -> c
android.support.v7.internal.widget.AbsActionBarView$1 -> android.support.v7.internal.widget.b:
    android.support.v7.internal.widget.AbsActionBarView this$0 -> a
    void run() -> run
android.support.v7.internal.widget.AbsSpinnerICS -> android.support.v7.internal.widget.AbsSpinnerICS:
    android.widget.SpinnerAdapter mAdapter -> a
    int mHeightMeasureSpec -> b
    int mWidthMeasureSpec -> c
    boolean mBlockLayoutRequests -> d
    int mSelectionLeftPadding -> e
    int mSelectionTopPadding -> f
    int mSelectionRightPadding -> g
    int mSelectionBottomPadding -> h
    android.graphics.Rect mSpinnerPadding -> i
    android.support.v7.internal.widget.AbsSpinnerICS$RecycleBin mRecycler -> j
    android.database.DataSetObserver mDataSetObserver -> E
    void initAbsSpinner() -> o
    void setAdapter(android.widget.SpinnerAdapter) -> a
    void resetList() -> a
    void onMeasure(int,int) -> onMeasure
    int getChildHeight(android.view.View) -> a
    int getChildWidth(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void recycleAllViews() -> b
    void setSelection(int) -> a
    android.view.View getSelectedView() -> c
    void requestLayout() -> requestLayout
    android.widget.SpinnerAdapter getAdapter() -> d
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.widget.Adapter getAdapter() -> e
    void access$100(android.support.v7.internal.widget.AbsSpinnerICS,android.view.View,boolean) -> a
android.support.v7.internal.widget.AbsSpinnerICS$1 -> android.support.v7.internal.widget.c:
android.support.v7.internal.widget.AbsSpinnerICS$RecycleBin -> android.support.v7.internal.widget.d:
    android.util.SparseArray mScrapHeap -> b
    android.support.v7.internal.widget.AbsSpinnerICS this$0 -> a
    void put(int,android.view.View) -> a
    android.view.View get(int) -> a
    void clear() -> a
android.support.v7.internal.widget.AbsSpinnerICS$SavedState -> android.support.v7.internal.widget.AbsSpinnerICS$SavedState:
    long selectedId -> a
    int position -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v7.internal.widget.AbsSpinnerICS$SavedState$1 -> android.support.v7.internal.widget.e:
    android.support.v7.internal.widget.AbsSpinnerICS$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.widget.AbsSpinnerICS$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.widget.ActionBarContainer -> android.support.v7.internal.widget.ActionBarContainer:
    boolean mIsTransitioning -> a
    android.view.View mTabContainer -> b
    android.support.v7.internal.widget.ActionBarView mActionBarView -> c
    android.graphics.drawable.Drawable mBackground -> d
    android.graphics.drawable.Drawable mStackedBackground -> e
    android.graphics.drawable.Drawable mSplitBackground -> f
    boolean mIsSplit -> g
    boolean mIsStacked -> h
    void onFinishInflate() -> onFinishInflate
    void setPrimaryBackground(android.graphics.drawable.Drawable) -> setPrimaryBackground
    void setStackedBackground(android.graphics.drawable.Drawable) -> setStackedBackground
    void setSplitBackground(android.graphics.drawable.Drawable) -> setSplitBackground
    void setVisibility(int) -> setVisibility
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    void setTransitioning(boolean) -> setTransitioning
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    void setTabContainer(android.support.v7.internal.widget.ScrollingTabContainerView) -> setTabContainer
    android.view.View getTabContainer() -> getTabContainer
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void drawBackgroundDrawable(android.graphics.drawable.Drawable,android.graphics.Canvas) -> a
android.support.v7.internal.widget.ActionBarContextView -> android.support.v7.internal.widget.ActionBarContextView:
    java.lang.CharSequence mTitle -> g
    java.lang.CharSequence mSubtitle -> h
    android.view.View mClose -> i
    android.view.View mCustomView -> j
    android.widget.LinearLayout mTitleLayout -> k
    android.widget.TextView mTitleView -> l
    android.widget.TextView mSubtitleView -> m
    int mTitleStyleRes -> n
    int mSubtitleStyleRes -> o
    android.graphics.drawable.Drawable mSplitBackground -> p
    boolean mTitleOptional -> q
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setContentHeight(int) -> setContentHeight
    void setCustomView(android.view.View) -> setCustomView
    void setTitle(java.lang.CharSequence) -> setTitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void initTitle() -> d
    boolean showOverflowMenu() -> a
    boolean isOverflowMenuShowing() -> c
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setTitleOptional(boolean) -> setTitleOptional
    void postShowOverflowMenu() -> b
    void setVisibility(int) -> setVisibility
    int getAnimatedVisibility() -> getAnimatedVisibility
    void setSplitView(android.support.v7.internal.widget.ActionBarContainer) -> setSplitView
    int getContentHeight() -> getContentHeight
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
android.support.v7.internal.widget.ActionBarOverlayLayout -> android.support.v7.internal.widget.ActionBarOverlayLayout:
    int mActionBarHeight -> b
    android.support.v7.app.ActionBar mActionBar -> c
    android.graphics.Rect mZeroRect -> d
    int[] mActionBarSizeAttr -> a
    void init(android.content.Context) -> a
    void setActionBar(android.support.v7.app.ActionBar) -> setActionBar
android.support.v7.internal.widget.ActionBarView -> android.support.v7.internal.widget.ActionBarView:
    int mNavigationMode -> i
    int mDisplayOptions -> j
    java.lang.CharSequence mTitle -> k
    java.lang.CharSequence mSubtitle -> l
    android.graphics.drawable.Drawable mIcon -> m
    android.graphics.drawable.Drawable mLogo -> n
    android.content.Context mContext -> o
    android.support.v7.internal.widget.ActionBarView$HomeView mHomeLayout -> p
    android.support.v7.internal.widget.ActionBarView$HomeView mExpandedHomeLayout -> q
    android.widget.LinearLayout mTitleLayout -> r
    android.widget.TextView mTitleView -> s
    android.widget.TextView mSubtitleView -> t
    android.view.View mTitleUpView -> u
    android.support.v7.internal.widget.SpinnerICS mSpinner -> v
    android.widget.LinearLayout mListNavLayout -> w
    android.support.v7.internal.widget.ScrollingTabContainerView mTabScrollView -> x
    android.view.View mCustomNavView -> y
    android.support.v7.internal.widget.ProgressBarICS mProgressView -> z
    android.support.v7.internal.widget.ProgressBarICS mIndeterminateProgressView -> A
    int mProgressBarPadding -> B
    int mItemPadding -> C
    int mTitleStyleRes -> D
    int mSubtitleStyleRes -> E
    int mProgressStyle -> F
    int mIndeterminateProgressStyle -> G
    boolean mUserTitle -> H
    boolean mIncludeTabs -> I
    boolean mIsCollapsable -> J
    boolean mIsCollapsed -> K
    android.support.v7.internal.view.menu.MenuBuilder mOptionsMenu -> L
    android.support.v7.internal.widget.ActionBarContextView mContextView -> M
    android.support.v7.internal.view.menu.ActionMenuItem mLogoNavItem -> N
    android.widget.SpinnerAdapter mSpinnerAdapter -> O
    android.support.v7.app.ActionBar$OnNavigationListener mCallback -> P
    java.lang.Runnable mTabSelector -> Q
    android.support.v7.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter mExpandedMenuPresenter -> R
    android.view.View mExpandedActionView -> g
    android.view.Window$Callback mWindowCallback -> h
    android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener mNavItemSelectedListener -> S
    android.view.View$OnClickListener mExpandedActionViewUpListener -> T
    android.view.View$OnClickListener mUpClickListener -> U
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setWindowCallback(android.view.Window$Callback) -> setWindowCallback
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void initProgress() -> d
    void initIndeterminateProgress() -> e
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setEmbeddedTabView(android.support.v7.internal.widget.ScrollingTabContainerView) -> setEmbeddedTabView
    void setCallback(android.support.v7.app.ActionBar$OnNavigationListener) -> setCallback
    void setCustomNavigationView(android.view.View) -> setCustomNavigationView
    java.lang.CharSequence getTitle() -> getTitle
    void setTitle(java.lang.CharSequence) -> setTitle
    void setWindowTitle(java.lang.CharSequence) -> setWindowTitle
    void setTitleImpl(java.lang.CharSequence) -> setTitleImpl
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    void setHomeButtonEnabled(boolean) -> setHomeButtonEnabled
    void setDisplayOptions(int) -> setDisplayOptions
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void setIcon(int) -> setIcon
    void setLogo(android.graphics.drawable.Drawable) -> setLogo
    void setLogo(int) -> setLogo
    void setNavigationMode(int) -> setNavigationMode
    void setDropdownAdapter(android.widget.SpinnerAdapter) -> setDropdownAdapter
    android.widget.SpinnerAdapter getDropdownAdapter() -> getDropdownAdapter
    void setDropdownSelectedPosition(int) -> setDropdownSelectedPosition
    int getDropdownSelectedPosition() -> getDropdownSelectedPosition
    android.view.View getCustomNavigationView() -> getCustomNavigationView
    int getNavigationMode() -> getNavigationMode
    int getDisplayOptions() -> getDisplayOptions
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void onFinishInflate() -> onFinishInflate
    void initTitle() -> g
    void setContextView(android.support.v7.internal.widget.ActionBarContextView) -> setContextView
    void setCollapsable(boolean) -> setCollapsable
    boolean isCollapsed() -> f
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void setHomeAsUpIndicator(android.graphics.drawable.Drawable) -> setHomeAsUpIndicator
    void setHomeAsUpIndicator(int) -> setHomeAsUpIndicator
    boolean isOverflowMenuShowing() -> c
    void postShowOverflowMenu() -> b
    boolean showOverflowMenu() -> a
    void setVisibility(int) -> setVisibility
    int getAnimatedVisibility() -> getAnimatedVisibility
    void setSplitView(android.support.v7.internal.widget.ActionBarContainer) -> setSplitView
    int getContentHeight() -> getContentHeight
    void setContentHeight(int) -> setContentHeight
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
    android.support.v7.app.ActionBar$OnNavigationListener access$000(android.support.v7.internal.widget.ActionBarView) -> a
    android.support.v7.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter access$100(android.support.v7.internal.widget.ActionBarView) -> b
    android.support.v7.internal.view.menu.ActionMenuItem access$200(android.support.v7.internal.widget.ActionBarView) -> c
    android.graphics.drawable.Drawable access$500(android.support.v7.internal.widget.ActionBarView) -> d
    android.support.v7.internal.widget.ActionBarView$HomeView access$600(android.support.v7.internal.widget.ActionBarView) -> e
    android.support.v7.internal.widget.ActionBarView$HomeView access$700(android.support.v7.internal.widget.ActionBarView) -> f
    android.widget.LinearLayout access$800(android.support.v7.internal.widget.ActionBarView) -> g
    android.support.v7.internal.widget.ScrollingTabContainerView access$900(android.support.v7.internal.widget.ActionBarView) -> h
    android.support.v7.internal.widget.SpinnerICS access$1000(android.support.v7.internal.widget.ActionBarView) -> i
    android.view.View access$1100(android.support.v7.internal.widget.ActionBarView) -> j
    int access$1200(android.support.v7.internal.widget.ActionBarView) -> k
    void access$1300(android.support.v7.internal.widget.ActionBarView) -> l
    int access$1400(android.support.v7.internal.widget.ActionBarView) -> m
android.support.v7.internal.widget.ActionBarView$1 -> android.support.v7.internal.widget.f:
    android.support.v7.internal.widget.ActionBarView this$0 -> a
    void onItemSelected(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
    void onNothingSelected(android.support.v7.internal.widget.AdapterViewICS) -> a
android.support.v7.internal.widget.ActionBarView$2 -> android.support.v7.internal.widget.g:
    android.support.v7.internal.widget.ActionBarView this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v7.internal.widget.ActionBarView$3 -> android.support.v7.internal.widget.h:
    android.support.v7.internal.widget.ActionBarView this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v7.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter -> android.support.v7.internal.widget.i:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    android.support.v7.internal.view.menu.MenuItemImpl mCurrentExpandedItem -> b
    android.support.v7.internal.widget.ActionBarView this$0 -> c
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> f
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
android.support.v7.internal.widget.ActionBarView$HomeView -> android.support.v7.internal.widget.ActionBarView$HomeView:
    android.widget.ImageView mUpView -> a
    android.widget.ImageView mIconView -> b
    int mUpWidth -> c
    int mUpIndicatorRes -> d
    android.graphics.drawable.Drawable mDefaultUpIndicator -> e
    void setUp(boolean) -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setUpIndicator(android.graphics.drawable.Drawable) -> b
    void setUpIndicator(int) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onFinishInflate() -> onFinishInflate
    int getLeftOffset() -> a
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
android.support.v7.internal.widget.ActionBarView$SavedState -> android.support.v7.internal.widget.ActionBarView$SavedState:
    int expandedMenuItemId -> a
    boolean isOverflowOpen -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v7.internal.widget.ActionBarView$SavedState$1 -> android.support.v7.internal.widget.j:
    android.support.v7.internal.widget.ActionBarView$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.widget.ActionBarView$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.widget.AdapterViewICS -> android.support.v7.internal.widget.k:
    int mFirstPosition -> k
    int mSpecificTop -> l
    int mSyncPosition -> m
    long mSyncRowId -> n
    long mSyncHeight -> o
    boolean mNeedSync -> p
    int mSyncMode -> q
    int mLayoutHeight -> a
    boolean mInLayout -> r
    android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener mOnItemSelectedListener -> s
    android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener mOnItemClickListener -> t
    boolean mDataChanged -> u
    int mNextSelectedPosition -> v
    long mNextSelectedRowId -> w
    int mSelectedPosition -> x
    long mSelectedRowId -> y
    android.view.View mEmptyView -> b
    int mItemCount -> z
    int mOldItemCount -> A
    int mOldSelectedPosition -> B
    long mOldSelectedRowId -> C
    boolean mDesiredFocusableState -> c
    boolean mDesiredFocusableInTouchModeState -> d
    android.support.v7.internal.widget.AdapterViewICS$SelectionNotifier mSelectionNotifier -> e
    boolean mBlockLayoutRequests -> D
    void setOnItemClickListener(android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener) -> a
    boolean performItemClick(android.view.View,int,long) -> a
    void setOnItemSelectedListener(android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener) -> a
    android.widget.Adapter getAdapter() -> e
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeAllViews() -> removeAllViews
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getSelectedItemPosition() -> f
    long getSelectedItemId() -> g
    android.view.View getSelectedView() -> c
    boolean isInFilterMode() -> h
    void setFocusable(boolean) -> setFocusable
    void setFocusableInTouchMode(boolean) -> setFocusableInTouchMode
    void checkFocus() -> i
    void updateEmptyStatus(boolean) -> a
    long getItemIdAtPosition(int) -> b
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void onDetachedFromWindow() -> onDetachedFromWindow
    void selectionChanged() -> j
    void fireOnSelected() -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean canAnimate() -> canAnimate
    void handleDataChanged() -> k
    void checkSelectionChanged() -> l
    int findSyncPosition() -> m
    int lookForSelectablePosition(int,boolean) -> a
    void setSelectedPositionInt(int) -> c
    void setNextSelectedPositionInt(int) -> d
    void rememberSyncState() -> n
    void access$000(android.support.v7.internal.widget.AdapterViewICS,android.os.Parcelable) -> a
    android.os.Parcelable access$100(android.support.v7.internal.widget.AdapterViewICS) -> a
    void access$200(android.support.v7.internal.widget.AdapterViewICS) -> b
android.support.v7.internal.widget.AdapterViewICS$1 -> android.support.v7.internal.widget.l:
android.support.v7.internal.widget.AdapterViewICS$AdapterDataSetObserver -> android.support.v7.internal.widget.m:
    android.os.Parcelable mInstanceState -> b
    android.support.v7.internal.widget.AdapterViewICS this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener -> android.support.v7.internal.widget.n:
    void onItemClick(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
android.support.v7.internal.widget.AdapterViewICS$OnItemClickListenerWrapper -> android.support.v7.internal.widget.o:
    android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener mWrappedListener -> b
    android.support.v7.internal.widget.AdapterViewICS this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener -> android.support.v7.internal.widget.p:
    void onItemSelected(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
    void onNothingSelected(android.support.v7.internal.widget.AdapterViewICS) -> a
android.support.v7.internal.widget.AdapterViewICS$SelectionNotifier -> android.support.v7.internal.widget.q:
    android.support.v7.internal.widget.AdapterViewICS this$0 -> a
    void run() -> run
android.support.v7.internal.widget.CompatTextView -> android.support.v7.internal.widget.r:
android.support.v7.internal.widget.CompatTextView$AllCapsTransformationMethod -> android.support.v7.internal.widget.s:
    java.util.Locale mLocale -> a
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
    void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect) -> onFocusChanged
android.support.v7.internal.widget.LinearLayoutICS -> android.support.v7.internal.widget.LinearLayoutICS:
    android.graphics.drawable.Drawable mDivider -> a
    int mDividerWidth -> b
    int mDividerHeight -> c
    int mShowDividers -> d
    int mDividerPadding -> e
    int getSupportDividerWidth() -> getSupportDividerWidth
    void onDraw(android.graphics.Canvas) -> onDraw
    void measureChildWithMargins(android.view.View,int,int,int,int) -> measureChildWithMargins
    void drawSupportDividersVertical(android.graphics.Canvas) -> a
    void drawSupportDividersHorizontal(android.graphics.Canvas) -> b
    void drawSupportHorizontalDivider(android.graphics.Canvas,int) -> a
    void drawSupportVerticalDivider(android.graphics.Canvas,int) -> b
    boolean hasSupportDividerBeforeChildAt(int) -> a
android.support.v7.internal.widget.ListPopupWindow -> android.support.v7.internal.widget.t:
    android.content.Context mContext -> b
    android.widget.PopupWindow mPopup -> c
    android.widget.ListAdapter mAdapter -> d
    android.support.v7.internal.widget.ListPopupWindow$DropDownListView mDropDownList -> e
    int mDropDownHeight -> f
    int mDropDownWidth -> g
    int mDropDownHorizontalOffset -> h
    int mDropDownVerticalOffset -> i
    boolean mDropDownVerticalOffsetSet -> j
    boolean mDropDownAlwaysVisible -> k
    boolean mForceIgnoreOutsideTouch -> l
    int mListItemExpandMaximum -> a
    android.view.View mPromptView -> m
    int mPromptPosition -> n
    android.database.DataSetObserver mObserver -> o
    android.view.View mDropDownAnchorView -> p
    android.graphics.drawable.Drawable mDropDownListHighlight -> q
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> r
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> s
    android.support.v7.internal.widget.ListPopupWindow$ResizePopupRunnable mResizePopupRunnable -> t
    android.support.v7.internal.widget.ListPopupWindow$PopupTouchInterceptor mTouchInterceptor -> u
    android.support.v7.internal.widget.ListPopupWindow$PopupScrollListener mScrollListener -> v
    android.support.v7.internal.widget.ListPopupWindow$ListSelectorHider mHideSelector -> w
    java.lang.Runnable mShowDropDownRunnable -> x
    android.os.Handler mHandler -> y
    android.graphics.Rect mTempRect -> z
    boolean mModal -> A
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptPosition(int) -> a
    void setModal(boolean) -> a
    android.graphics.drawable.Drawable getBackground() -> a
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> a
    android.view.View getAnchorView() -> b
    void setAnchorView(android.view.View) -> a
    void setHorizontalOffset(int) -> b
    void setVerticalOffset(int) -> c
    void setWidth(int) -> d
    void setContentWidth(int) -> e
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> a
    void show() -> c
    void dismiss() -> d
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void removePromptView() -> i
    void setInputMethodMode(int) -> f
    void setSelection(int) -> g
    void clearListSelection() -> e
    boolean isShowing() -> f
    boolean isInputMethodNotNeeded() -> g
    android.widget.ListView getListView() -> h
    int buildDropDown() -> j
    int getMaxAvailableHeight(android.view.View,int,boolean) -> a
    android.support.v7.internal.widget.ListPopupWindow$DropDownListView access$700(android.support.v7.internal.widget.ListPopupWindow) -> a
    android.widget.PopupWindow access$800(android.support.v7.internal.widget.ListPopupWindow) -> b
    android.support.v7.internal.widget.ListPopupWindow$ResizePopupRunnable access$900(android.support.v7.internal.widget.ListPopupWindow) -> c
    android.os.Handler access$1000(android.support.v7.internal.widget.ListPopupWindow) -> d
android.support.v7.internal.widget.ListPopupWindow$1 -> android.support.v7.internal.widget.u:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void run() -> run
android.support.v7.internal.widget.ListPopupWindow$2 -> android.support.v7.internal.widget.v:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
android.support.v7.internal.widget.ListPopupWindow$DropDownListView -> android.support.v7.internal.widget.w:
    boolean mListSelectionHidden -> a
    boolean mHijackFocus -> b
    boolean isInTouchMode() -> isInTouchMode
    boolean hasWindowFocus() -> hasWindowFocus
    boolean isFocused() -> isFocused
    boolean hasFocus() -> hasFocus
    int measureHeightOfChildrenCompat(int,int,int,int,int) -> a
    boolean access$502(android.support.v7.internal.widget.ListPopupWindow$DropDownListView,boolean) -> a
android.support.v7.internal.widget.ListPopupWindow$ListSelectorHider -> android.support.v7.internal.widget.x:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void run() -> run
android.support.v7.internal.widget.ListPopupWindow$PopupDataSetObserver -> android.support.v7.internal.widget.y:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v7.internal.widget.ListPopupWindow$PopupScrollListener -> android.support.v7.internal.widget.z:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
android.support.v7.internal.widget.ListPopupWindow$PopupTouchInterceptor -> android.support.v7.internal.widget.aa:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
android.support.v7.internal.widget.ListPopupWindow$ResizePopupRunnable -> android.support.v7.internal.widget.ab:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void run() -> run
android.support.v7.internal.widget.NativeActionModeAwareLayout -> android.support.v7.internal.widget.NativeActionModeAwareLayout:
    android.support.v7.internal.widget.NativeActionModeAwareLayout$OnActionModeForChildListener mActionModeForChildListener -> a
    void setActionModeForChildListener(android.support.v7.internal.widget.NativeActionModeAwareLayout$OnActionModeForChildListener) -> setActionModeForChildListener
    android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback) -> startActionModeForChild
android.support.v7.internal.widget.NativeActionModeAwareLayout$OnActionModeForChildListener -> android.support.v7.internal.widget.ac:
    android.view.ActionMode$Callback onActionModeForChild(android.view.ActionMode$Callback) -> a
android.support.v7.internal.widget.ProgressBarICS -> android.support.v7.internal.widget.ProgressBarICS:
    int[] android_R_styleable_ProgressBar -> f
    int mMinWidth -> a
    int mMaxWidth -> b
    int mMinHeight -> c
    int mMaxHeight -> d
    int mProgress -> g
    int mSecondaryProgress -> h
    int mMax -> i
    int mBehavior -> j
    int mDuration -> k
    boolean mIndeterminate -> l
    boolean mOnlyIndeterminate -> m
    android.view.animation.Transformation mTransformation -> n
    android.view.animation.AlphaAnimation mAnimation -> o
    android.graphics.drawable.Drawable mIndeterminateDrawable -> p
    android.graphics.drawable.Drawable mProgressDrawable -> q
    android.graphics.drawable.Drawable mCurrentDrawable -> r
    android.graphics.Bitmap mSampleTile -> e
    boolean mNoInvalidate -> s
    android.view.animation.Interpolator mInterpolator -> t
    android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable mRefreshProgressRunnable -> u
    long mUiThreadId -> v
    boolean mShouldStartAnimationDrawable -> w
    long mLastDrawTime -> x
    boolean mInDrawing -> y
    android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean) -> a
    android.graphics.drawable.shapes.Shape getDrawableShape() -> getDrawableShape
    android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable) -> a
    void initProgressBar() -> c
    void setIndeterminate(boolean) -> setIndeterminate
    android.graphics.drawable.Drawable getIndeterminateDrawable() -> getIndeterminateDrawable
    void setIndeterminateDrawable(android.graphics.drawable.Drawable) -> setIndeterminateDrawable
    android.graphics.drawable.Drawable getProgressDrawable() -> getProgressDrawable
    void setProgressDrawable(android.graphics.drawable.Drawable) -> setProgressDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void postInvalidate() -> postInvalidate
    void doRefreshProgress(int,int,boolean,boolean) -> a
    void refreshProgress(int,int,boolean) -> a
    void setProgress(int) -> setProgress
    void setProgress(int,boolean) -> a
    void setSecondaryProgress(int) -> setSecondaryProgress
    int getProgress() -> getProgress
    int getSecondaryProgress() -> getSecondaryProgress
    int getMax() -> getMax
    void setMax(int) -> setMax
    void startAnimation() -> a
    void stopAnimation() -> b
    void setInterpolator(android.content.Context,int) -> a
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    android.view.animation.Interpolator getInterpolator() -> getInterpolator
    void setVisibility(int) -> setVisibility
    void onVisibilityChanged(android.view.View,int) -> onVisibilityChanged
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void updateDrawableBounds(int,int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void drawableStateChanged() -> drawableStateChanged
    void updateDrawableState() -> d
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void access$000(android.support.v7.internal.widget.ProgressBarICS,int,int,boolean,boolean) -> a
    android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable access$102(android.support.v7.internal.widget.ProgressBarICS,android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable) -> a
android.support.v7.internal.widget.ProgressBarICS$1 -> android.support.v7.internal.widget.ad:
android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable -> android.support.v7.internal.widget.ae:
    int mId -> b
    int mProgress -> c
    boolean mFromUser -> d
    android.support.v7.internal.widget.ProgressBarICS this$0 -> a
    void run() -> run
    void setup(int,int,boolean) -> a
android.support.v7.internal.widget.ProgressBarICS$SavedState -> android.support.v7.internal.widget.ProgressBarICS$SavedState:
    int progress -> a
    int secondaryProgress -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v7.internal.widget.ProgressBarICS$SavedState$1 -> android.support.v7.internal.widget.af:
    android.support.v7.internal.widget.ProgressBarICS$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.widget.ProgressBarICS$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.widget.ScrollingTabContainerView -> android.support.v7.internal.widget.ScrollingTabContainerView:
    java.lang.Runnable mTabSelector -> a
    android.support.v7.internal.widget.ScrollingTabContainerView$TabClickListener mTabClickListener -> d
    android.widget.LinearLayout mTabLayout -> e
    android.support.v7.internal.widget.SpinnerICS mTabSpinner -> f
    boolean mAllowCollapse -> g
    android.view.LayoutInflater mInflater -> h
    int mMaxTabWidth -> b
    int mStackedTabMaxWidth -> c
    int mContentHeight -> i
    int mSelectedTabIndex -> j
    void onMeasure(int,int) -> onMeasure
    boolean isCollapsed() -> a
    void setAllowCollapse(boolean) -> setAllowCollapse
    void performCollapse() -> b
    boolean performExpand() -> c
    void setTabSelected(int) -> setTabSelected
    void setContentHeight(int) -> setContentHeight
    android.support.v7.internal.widget.SpinnerICS createSpinner() -> d
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void animateToTab(int) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.support.v7.internal.widget.ScrollingTabContainerView$TabView createTabView(android.support.v7.app.ActionBar$Tab,boolean) -> a
    void onItemClick(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
    android.widget.LinearLayout access$200(android.support.v7.internal.widget.ScrollingTabContainerView) -> a
    android.support.v7.internal.widget.ScrollingTabContainerView$TabView access$300(android.support.v7.internal.widget.ScrollingTabContainerView,android.support.v7.app.ActionBar$Tab,boolean) -> a
android.support.v7.internal.widget.ScrollingTabContainerView$1 -> android.support.v7.internal.widget.ag:
    android.view.View val$tabView -> a
    android.support.v7.internal.widget.ScrollingTabContainerView this$0 -> b
    void run() -> run
android.support.v7.internal.widget.ScrollingTabContainerView$TabAdapter -> android.support.v7.internal.widget.ah:
    android.support.v7.internal.widget.ScrollingTabContainerView this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
android.support.v7.internal.widget.ScrollingTabContainerView$TabClickListener -> android.support.v7.internal.widget.ai:
    android.support.v7.internal.widget.ScrollingTabContainerView this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v7.internal.widget.ScrollingTabContainerView$TabView -> android.support.v7.internal.widget.ScrollingTabContainerView$TabView:
    android.support.v7.app.ActionBar$Tab mTab -> a
    android.widget.TextView mTextView -> b
    android.widget.ImageView mIconView -> c
    android.view.View mCustomView -> d
    android.support.v7.internal.widget.ScrollingTabContainerView mParent -> e
    void attach(android.support.v7.internal.widget.ScrollingTabContainerView,android.support.v7.app.ActionBar$Tab,boolean) -> a
    void bindTab(android.support.v7.app.ActionBar$Tab) -> a
    void onMeasure(int,int) -> onMeasure
    void update() -> a
    android.support.v7.app.ActionBar$Tab getTab() -> getTab
android.support.v7.internal.widget.SpinnerICS -> android.support.v7.internal.widget.aj:
    android.support.v7.internal.widget.SpinnerICS$SpinnerPopup mPopup -> F
    android.support.v7.internal.widget.SpinnerICS$DropDownAdapter mTempAdapter -> G
    int mDropDownWidth -> E
    int mGravity -> H
    android.graphics.Rect mTempRect -> I
    void setAdapter(android.widget.SpinnerAdapter) -> a
    int getBaseline() -> getBaseline
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOnItemClickListener(android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener) -> a
    void setOnItemClickListenerInt(android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener) -> b
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void layout(int,boolean) -> b
    android.view.View makeAndAddView(int) -> e
    void setUpChild(android.view.View) -> c
    boolean performClick() -> performClick
    void onClick(android.content.DialogInterface,int) -> onClick
    int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
    android.graphics.Rect access$200(android.support.v7.internal.widget.SpinnerICS) -> a
android.support.v7.internal.widget.SpinnerICS$1 -> android.support.v7.internal.widget.ak:
android.support.v7.internal.widget.SpinnerICS$DialogPopup -> android.support.v7.internal.widget.al:
    android.app.AlertDialog mPopup -> b
    android.widget.ListAdapter mListAdapter -> c
    java.lang.CharSequence mPrompt -> d
    android.support.v7.internal.widget.SpinnerICS this$0 -> a
    void dismiss() -> d
    boolean isShowing() -> f
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptText(java.lang.CharSequence) -> a
    void show() -> c
    void onClick(android.content.DialogInterface,int) -> onClick
android.support.v7.internal.widget.SpinnerICS$DropDownAdapter -> android.support.v7.internal.widget.am:
    android.widget.SpinnerAdapter mAdapter -> a
    android.widget.ListAdapter mListAdapter -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    boolean hasStableIds() -> hasStableIds
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    boolean isEmpty() -> isEmpty
android.support.v7.internal.widget.SpinnerICS$DropdownPopup -> android.support.v7.internal.widget.an:
    java.lang.CharSequence mHintText -> c
    android.widget.ListAdapter mAdapter -> d
    android.support.v7.internal.widget.SpinnerICS this$0 -> b
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptText(java.lang.CharSequence) -> a
    void show() -> c
    android.widget.ListAdapter access$100(android.support.v7.internal.widget.SpinnerICS$DropdownPopup) -> a
android.support.v7.internal.widget.SpinnerICS$DropdownPopup$1 -> android.support.v7.internal.widget.ao:
    android.support.v7.internal.widget.SpinnerICS val$this$0 -> a
    android.support.v7.internal.widget.SpinnerICS$DropdownPopup this$1 -> b
    void onItemClick(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
android.support.v7.internal.widget.SpinnerICS$SpinnerPopup -> android.support.v7.internal.widget.ap:
    void setAdapter(android.widget.ListAdapter) -> a
    void show() -> c
    void dismiss() -> d
    boolean isShowing() -> f
    void setPromptText(java.lang.CharSequence) -> a
android.support.v7.view.CollapsibleActionView -> android.support.v7.c.a:
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
android.support.v7.widget.SearchView -> android.support.v7.widget.SearchView:
    android.support.v7.widget.SearchView$OnQueryTextListener mOnQueryChangeListener -> b
    android.support.v7.widget.SearchView$OnCloseListener mOnCloseListener -> c
    android.view.View$OnFocusChangeListener mOnQueryTextFocusChangeListener -> d
    android.support.v7.widget.SearchView$OnSuggestionListener mOnSuggestionListener -> e
    android.view.View$OnClickListener mOnSearchClickListener -> f
    boolean mIconifiedByDefault -> g
    boolean mIconified -> h
    android.support.v4.widget.CursorAdapter mSuggestionsAdapter -> i
    android.view.View mSearchButton -> j
    android.view.View mSubmitButton -> k
    android.view.View mSubmitArea -> l
    android.widget.ImageView mCloseButton -> m
    android.view.View mSearchEditFrame -> n
    android.view.View mVoiceButton -> o
    android.support.v7.widget.SearchView$SearchAutoComplete mQueryTextView -> p
    android.widget.ImageView mSearchHintIcon -> q
    boolean mSubmitButtonEnabled -> r
    java.lang.CharSequence mQueryHint -> s
    boolean mQueryRefinement -> t
    boolean mClearingFocus -> u
    int mMaxWidth -> v
    boolean mVoiceButtonEnabled -> w
    boolean mExpandedInActionView -> x
    int mCollapsedImeOptions -> y
    android.app.SearchableInfo mSearchable -> z
    android.os.Bundle mAppSearchData -> A
    android.support.v7.widget.SearchView$AutoCompleteTextViewReflector HIDDEN_METHOD_INVOKER -> a
    java.lang.Runnable mShowImeRunnable -> B
    java.lang.Runnable mUpdateDrawableStateRunnable -> C
    java.lang.Runnable mReleaseCursorRunnable -> D
    android.content.Intent mVoiceWebSearchIntent -> E
    android.content.Intent mVoiceAppSearchIntent -> F
    java.util.WeakHashMap mOutsideDrawablesCache -> G
    void setSearchableInfo(android.app.SearchableInfo) -> setSearchableInfo
    void setAppSearchData(android.os.Bundle) -> setAppSearchData
    void setImeOptions(int) -> setImeOptions
    int getImeOptions() -> getImeOptions
    void setInputType(int) -> setInputType
    int getInputType() -> getInputType
    boolean requestFocus(int,android.graphics.Rect) -> requestFocus
    void clearFocus() -> clearFocus
    void setOnQueryTextListener(android.support.v7.widget.SearchView$OnQueryTextListener) -> setOnQueryTextListener
    void setOnCloseListener(android.support.v7.widget.SearchView$OnCloseListener) -> setOnCloseListener
    void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener) -> setOnQueryTextFocusChangeListener
    void setOnSuggestionListener(android.support.v7.widget.SearchView$OnSuggestionListener) -> setOnSuggestionListener
    void setOnSearchClickListener(android.view.View$OnClickListener) -> setOnSearchClickListener
    java.lang.CharSequence getQuery() -> getQuery
    void setQueryHint(java.lang.CharSequence) -> setQueryHint
    java.lang.CharSequence getQueryHint() -> getQueryHint
    void setIconifiedByDefault(boolean) -> setIconifiedByDefault
    void setIconified(boolean) -> setIconified
    boolean isIconified() -> c
    void setSubmitButtonEnabled(boolean) -> setSubmitButtonEnabled
    void setQueryRefinementEnabled(boolean) -> setQueryRefinementEnabled
    void setSuggestionsAdapter(android.support.v4.widget.CursorAdapter) -> setSuggestionsAdapter
    android.support.v4.widget.CursorAdapter getSuggestionsAdapter() -> getSuggestionsAdapter
    void setMaxWidth(int) -> setMaxWidth
    int getMaxWidth() -> getMaxWidth
    void onMeasure(int,int) -> onMeasure
    int getPreferredWidth() -> getPreferredWidth
    void updateViewsVisibility(boolean) -> a
    boolean hasVoiceSearch() -> e
    boolean isSubmitAreaEnabled() -> f
    void updateSubmitButton(boolean) -> b
    void updateSubmitArea() -> g
    void updateCloseButton() -> h
    void postUpdateFocusedState() -> i
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setImeVisibility(boolean) -> setImeVisibility
    void onQueryRefine(java.lang.CharSequence) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    int getSearchIconId() -> getSearchIconId
    java.lang.CharSequence getDecoratedHint(java.lang.CharSequence) -> b
    void updateQueryHint() -> j
    void updateSearchAutoComplete() -> k
    void updateVoiceButton(boolean) -> c
    void onCloseClicked() -> l
    void onSearchClicked() -> m
    void onTextFocusChanged() -> d
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onActionViewCollapsed() -> b
    void onActionViewExpanded() -> a
    void setQuery(java.lang.CharSequence) -> setQuery
    void forceSuggestionQuery() -> n
    boolean isLandscapeMode(android.content.Context) -> a
    void access$2100(android.support.v7.widget.SearchView,boolean) -> a
android.support.v7.widget.SearchView$AutoCompleteTextViewReflector -> android.support.v7.widget.a:
    java.lang.reflect.Method doBeforeTextChanged -> a
    java.lang.reflect.Method doAfterTextChanged -> b
    java.lang.reflect.Method ensureImeVisible -> c
    java.lang.reflect.Method showSoftInputUnchecked -> d
    void doBeforeTextChanged(android.widget.AutoCompleteTextView) -> a
    void doAfterTextChanged(android.widget.AutoCompleteTextView) -> b
    void ensureImeVisible(android.widget.AutoCompleteTextView,boolean) -> a
android.support.v7.widget.SearchView$OnCloseListener -> android.support.v7.widget.b:
    boolean onClose() -> a
android.support.v7.widget.SearchView$OnQueryTextListener -> android.support.v7.widget.c:
android.support.v7.widget.SearchView$OnSuggestionListener -> android.support.v7.widget.d:
android.support.v7.widget.SearchView$SearchAutoComplete -> android.support.v7.widget.SearchView$SearchAutoComplete:
    int mThreshold -> a
    android.support.v7.widget.SearchView mSearchView -> b
    void setSearchView(android.support.v7.widget.SearchView) -> setSearchView
    void setThreshold(int) -> setThreshold
    void replaceText(java.lang.CharSequence) -> replaceText
    void performCompletion() -> performCompletion
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    boolean enoughToFilter() -> enoughToFilter
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
android.support.v7.widget.SuggestionsAdapter -> android.support.v7.widget.e:
    android.app.SearchManager mSearchManager -> j
    android.support.v7.widget.SearchView mSearchView -> k
    android.app.SearchableInfo mSearchable -> l
    android.content.Context mProviderContext -> m
    java.util.WeakHashMap mOutsideDrawablesCache -> n
    boolean mClosed -> o
    int mQueryRefinement -> p
    android.content.res.ColorStateList mUrlColor -> q
    int mText1Col -> r
    int mText2Col -> s
    int mText2UrlCol -> t
    int mIconName1Col -> u
    int mIconName2Col -> v
    int mFlagsCol -> w
    void setQueryRefinement(int) -> a
    boolean hasStableIds() -> hasStableIds
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    void notifyDataSetInvalidated() -> notifyDataSetInvalidated
    void updateSpinnerState(android.database.Cursor) -> d
    void changeCursor(android.database.Cursor) -> a
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void onClick(android.view.View) -> onClick
    java.lang.CharSequence formatUrl(java.lang.CharSequence) -> b
    void setViewText(android.widget.TextView,java.lang.CharSequence) -> a
    android.graphics.drawable.Drawable getIcon1(android.database.Cursor) -> e
    android.graphics.drawable.Drawable getIcon2(android.database.Cursor) -> f
    void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String) -> a
    android.graphics.drawable.Drawable getDrawable(android.net.Uri) -> b
    android.graphics.drawable.Drawable checkIconCache(java.lang.String) -> b
    void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor) -> g
    android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName) -> a
    android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName) -> b
    java.lang.String getColumnString(android.database.Cursor,java.lang.String) -> a
    java.lang.String getStringOrNull(android.database.Cursor,int) -> a
    android.graphics.drawable.Drawable getDrawableFromResourceUri(android.net.Uri) -> a
    android.database.Cursor getSearchManagerSuggestions(android.app.SearchableInfo,java.lang.String,int) -> a
android.support.v7.widget.SuggestionsAdapter$ChildViewCache -> android.support.v7.widget.f:
    android.widget.TextView mText1 -> a
    android.widget.TextView mText2 -> b
    android.widget.ImageView mIcon1 -> c
    android.widget.ImageView mIcon2 -> d
    android.widget.ImageView mIconRefine -> e
com.android.volley.AuthFailureError -> com.android.volley.a:
    android.content.Intent mResolutionIntent -> b
    java.lang.String getMessage() -> getMessage
com.android.volley.Cache -> com.android.volley.b:
    com.android.volley.Cache$Entry get(java.lang.String) -> a
    void put(java.lang.String,com.android.volley.Cache$Entry) -> a
    void initialize() -> a
com.android.volley.Cache$Entry -> com.android.volley.c:
    byte[] data -> a
    java.lang.String etag -> b
    long serverDate -> c
    long ttl -> d
    long softTtl -> e
    java.util.Map responseHeaders -> f
    boolean isExpired() -> a
    boolean refreshNeeded() -> b
com.android.volley.CacheDispatcher -> com.android.volley.d:
    boolean DEBUG -> a
    java.util.concurrent.BlockingQueue mCacheQueue -> b
    java.util.concurrent.BlockingQueue mNetworkQueue -> c
    com.android.volley.Cache mCache -> d
    com.android.volley.ResponseDelivery mDelivery -> e
    boolean mQuit -> f
    void quit() -> a
    void run() -> run
    java.util.concurrent.BlockingQueue access$0(com.android.volley.CacheDispatcher) -> a
com.android.volley.CacheDispatcher$1 -> com.android.volley.e:
    com.android.volley.CacheDispatcher this$0 -> a
    com.android.volley.Request val$request -> b
    void run() -> run
com.android.volley.DefaultRetryPolicy -> com.android.volley.f:
    int mCurrentTimeoutMs -> a
    int mCurrentRetryCount -> b
    int mMaxNumRetries -> c
    float mBackoffMultiplier -> d
    int getCurrentTimeout() -> a
    int getCurrentRetryCount() -> b
    void retry(com.android.volley.VolleyError) -> a
    boolean hasAttemptRemaining() -> c
com.android.volley.ExecutorDelivery -> com.android.volley.g:
    java.util.concurrent.Executor mResponsePoster -> a
    void postResponse(com.android.volley.Request,com.android.volley.Response) -> a
    void postResponse(com.android.volley.Request,com.android.volley.Response,java.lang.Runnable) -> a
    void postError(com.android.volley.Request,com.android.volley.VolleyError) -> a
com.android.volley.ExecutorDelivery$1 -> com.android.volley.h:
    com.android.volley.ExecutorDelivery this$0 -> a
    android.os.Handler val$handler -> b
    void execute(java.lang.Runnable) -> execute
com.android.volley.ExecutorDelivery$ResponseDeliveryRunnable -> com.android.volley.i:
    com.android.volley.Request mRequest -> b
    com.android.volley.Response mResponse -> c
    java.lang.Runnable mRunnable -> d
    com.android.volley.ExecutorDelivery this$0 -> a
    void run() -> run
com.android.volley.Network -> com.android.volley.j:
    com.android.volley.NetworkResponse performRequest(com.android.volley.Request) -> a
com.android.volley.NetworkDispatcher -> com.android.volley.k:
    java.util.concurrent.BlockingQueue mQueue -> a
    com.android.volley.Network mNetwork -> b
    com.android.volley.Cache mCache -> c
    com.android.volley.ResponseDelivery mDelivery -> d
    boolean mQuit -> e
    void quit() -> a
    void addTrafficStatsTag(com.android.volley.Request) -> a
    void run() -> run
    void parseAndDeliverNetworkError(com.android.volley.Request,com.android.volley.VolleyError) -> a
com.android.volley.NetworkError -> com.android.volley.l:
com.android.volley.NetworkResponse -> com.android.volley.m:
    int statusCode -> a
    byte[] data -> b
    java.util.Map headers -> c
    boolean notModified -> d
com.android.volley.NoConnectionError -> com.android.volley.n:
com.android.volley.ParseError -> com.android.volley.o:
com.android.volley.Request -> com.android.volley.p:
    com.android.volley.VolleyLog$MarkerLog mEventLog -> a
    int mMethod -> b
    java.lang.String mUrl -> c
    int mDefaultTrafficStatsTag -> d
    com.android.volley.Response$ErrorListener mErrorListener -> e
    java.lang.Integer mSequence -> f
    com.android.volley.RequestQueue mRequestQueue -> g
    boolean mShouldCache -> h
    boolean mCanceled -> i
    boolean mResponseDelivered -> j
    long mRequestBirthTime -> k
    com.android.volley.RetryPolicy mRetryPolicy -> l
    com.android.volley.Cache$Entry mCacheEntry -> m
    int getMethod() -> a
    int getTrafficStatsTag() -> b
    com.android.volley.Request setRetryPolicy(com.android.volley.RetryPolicy) -> a
    void addMarker(java.lang.String) -> a
    void finish(java.lang.String) -> b
    com.android.volley.Request setRequestQueue(com.android.volley.RequestQueue) -> a
    com.android.volley.Request setSequence(int) -> a
    java.lang.String getUrl() -> c
    java.lang.String getCacheKey() -> d
    com.android.volley.Request setCacheEntry(com.android.volley.Cache$Entry) -> a
    com.android.volley.Cache$Entry getCacheEntry() -> e
    void cancel() -> f
    boolean isCanceled() -> g
    java.util.Map getHeaders() -> h
    java.util.Map getPostParams() -> i
    java.lang.String getPostParamsEncoding() -> j
    java.lang.String getPostBodyContentType() -> k
    byte[] getPostBody() -> l
    java.util.Map getParams() -> m
    java.lang.String getParamsEncoding() -> n
    java.lang.String getBodyContentType() -> o
    byte[] getBody() -> p
    byte[] encodeParameters(java.util.Map,java.lang.String) -> a
    boolean shouldCache() -> q
    com.android.volley.Request$Priority getPriority() -> r
    int getTimeoutMs() -> s
    com.android.volley.RetryPolicy getRetryPolicy() -> t
    void markDelivered() -> u
    boolean hasHadResponseDelivered() -> v
    com.android.volley.Response parseNetworkResponse(com.android.volley.NetworkResponse) -> a
    com.android.volley.VolleyError parseNetworkError(com.android.volley.VolleyError) -> a
    void deliverResponse(java.lang.Object) -> a
    void deliverError(com.android.volley.VolleyError) -> b
    int compareTo(com.android.volley.Request) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    com.android.volley.VolleyLog$MarkerLog access$1(com.android.volley.Request) -> b
com.android.volley.Request$1 -> com.android.volley.q:
    com.android.volley.Request this$0 -> a
    java.lang.String val$tag -> b
    long val$threadId -> c
    void run() -> run
com.android.volley.Request$Priority -> com.android.volley.r:
    com.android.volley.Request$Priority LOW -> a
    com.android.volley.Request$Priority NORMAL -> b
    com.android.volley.Request$Priority HIGH -> c
    com.android.volley.Request$Priority IMMEDIATE -> d
    com.android.volley.Request$Priority[] ENUM$VALUES -> e
    com.android.volley.Request$Priority[] values() -> values
    com.android.volley.Request$Priority valueOf(java.lang.String) -> valueOf
com.android.volley.RequestQueue -> com.android.volley.s:
    java.util.concurrent.atomic.AtomicInteger mSequenceGenerator -> a
    java.util.Map mWaitingRequests -> b
    java.util.Set mCurrentRequests -> c
    java.util.concurrent.PriorityBlockingQueue mCacheQueue -> d
    java.util.concurrent.PriorityBlockingQueue mNetworkQueue -> e
    com.android.volley.Cache mCache -> f
    com.android.volley.Network mNetwork -> g
    com.android.volley.ResponseDelivery mDelivery -> h
    com.android.volley.NetworkDispatcher[] mDispatchers -> i
    com.android.volley.CacheDispatcher mCacheDispatcher -> j
    void start() -> a
    void stop() -> b
    int getSequenceNumber() -> c
    com.android.volley.Request add(com.android.volley.Request) -> a
    void finish(com.android.volley.Request) -> b
com.android.volley.Response -> com.android.volley.t:
    java.lang.Object result -> a
    com.android.volley.Cache$Entry cacheEntry -> b
    com.android.volley.VolleyError error -> c
    boolean intermediate -> d
    com.android.volley.Response success(java.lang.Object,com.android.volley.Cache$Entry) -> a
    com.android.volley.Response error(com.android.volley.VolleyError) -> a
    boolean isSuccess() -> a
com.android.volley.Response$ErrorListener -> com.android.volley.u:
    void onErrorResponse(com.android.volley.VolleyError) -> a
com.android.volley.Response$Listener -> com.android.volley.v:
    void onResponse(java.lang.Object) -> a
com.android.volley.ResponseDelivery -> com.android.volley.w:
    void postResponse(com.android.volley.Request,com.android.volley.Response) -> a
    void postResponse(com.android.volley.Request,com.android.volley.Response,java.lang.Runnable) -> a
    void postError(com.android.volley.Request,com.android.volley.VolleyError) -> a
com.android.volley.RetryPolicy -> com.android.volley.x:
    int getCurrentTimeout() -> a
    int getCurrentRetryCount() -> b
    void retry(com.android.volley.VolleyError) -> a
com.android.volley.ServerError -> com.android.volley.y:
com.android.volley.TimeoutError -> com.android.volley.z:
com.android.volley.VolleyError -> com.android.volley.aa:
    com.android.volley.NetworkResponse networkResponse -> a
com.android.volley.VolleyLog -> com.android.volley.ab:
    java.lang.String TAG -> a
    boolean DEBUG -> b
    void v(java.lang.String,java.lang.Object[]) -> a
    void d(java.lang.String,java.lang.Object[]) -> b
    void e(java.lang.String,java.lang.Object[]) -> c
    void e(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    java.lang.String buildMessage(java.lang.String,java.lang.Object[]) -> d
com.android.volley.VolleyLog$MarkerLog -> com.android.volley.ac:
    boolean ENABLED -> a
    java.util.List mMarkers -> b
    boolean mFinished -> c
    void add(java.lang.String,long) -> a
    void finish(java.lang.String) -> a
    void finalize() -> finalize
    long getTotalDuration() -> a
com.android.volley.VolleyLog$MarkerLog$Marker -> com.android.volley.ad:
    java.lang.String name -> a
    long thread -> b
    long time -> c
com.android.volley.toolbox.BasicNetwork -> com.android.volley.toolbox.a:
    boolean DEBUG -> a
    int SLOW_REQUEST_THRESHOLD_MS -> d
    int DEFAULT_POOL_SIZE -> e
    com.android.volley.toolbox.HttpStack mHttpStack -> b
    com.android.volley.toolbox.ByteArrayPool mPool -> c
    com.android.volley.NetworkResponse performRequest(com.android.volley.Request) -> a
    void logSlowRequests(long,com.android.volley.Request,byte[],org.apache.http.StatusLine) -> a
    void attemptRetryOnException(java.lang.String,com.android.volley.Request,com.android.volley.VolleyError) -> a
    void addCacheHeaders(java.util.Map,com.android.volley.Cache$Entry) -> a
    byte[] entityToBytes(org.apache.http.HttpEntity) -> a
    java.util.Map convertHeaders(org.apache.http.Header[]) -> a
com.android.volley.toolbox.ByteArrayPool -> com.android.volley.toolbox.b:
    java.util.List mBuffersByLastUse -> b
    java.util.List mBuffersBySize -> c
    int mCurrentSize -> d
    int mSizeLimit -> e
    java.util.Comparator BUF_COMPARATOR -> a
    byte[] getBuf(int) -> a
    void returnBuf(byte[]) -> a
    void trim() -> a
com.android.volley.toolbox.ByteArrayPool$1 -> com.android.volley.toolbox.c:
    int compare(byte[],byte[]) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.volley.toolbox.DiskBasedCache -> com.android.volley.toolbox.d:
    java.util.Map mEntries -> a
    long mTotalSize -> b
    java.io.File mRootDirectory -> c
    int mMaxCacheSizeInBytes -> d
    com.android.volley.Cache$Entry get(java.lang.String) -> a
    void initialize() -> a
    void put(java.lang.String,com.android.volley.Cache$Entry) -> a
    void remove(java.lang.String) -> b
    java.lang.String getFilenameForKey(java.lang.String) -> d
    java.io.File getFileForKey(java.lang.String) -> c
    void pruneIfNeeded(int) -> a
    void putEntry(java.lang.String,com.android.volley.toolbox.DiskBasedCache$CacheHeader) -> a
    void removeEntry(java.lang.String) -> e
    byte[] streamToBytes(java.io.InputStream,int) -> a
    int read(java.io.InputStream) -> e
    void writeInt(java.io.OutputStream,int) -> a
    int readInt(java.io.InputStream) -> a
    void writeLong(java.io.OutputStream,long) -> a
    long readLong(java.io.InputStream) -> b
    void writeString(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readString(java.io.InputStream) -> c
    void writeStringStringMap(java.util.Map,java.io.OutputStream) -> a
    java.util.Map readStringStringMap(java.io.InputStream) -> d
com.android.volley.toolbox.DiskBasedCache$CacheHeader -> com.android.volley.toolbox.e:
    long size -> a
    java.lang.String key -> b
    java.lang.String etag -> c
    long serverDate -> d
    long ttl -> e
    long softTtl -> f
    java.util.Map responseHeaders -> g
    com.android.volley.toolbox.DiskBasedCache$CacheHeader readHeader(java.io.InputStream) -> a
    com.android.volley.Cache$Entry toCacheEntry(byte[]) -> a
    boolean writeHeader(java.io.OutputStream) -> a
com.android.volley.toolbox.DiskBasedCache$CountingInputStream -> com.android.volley.toolbox.f:
    int bytesRead -> a
    int read() -> read
    int read(byte[],int,int) -> read
    int access$1(com.android.volley.toolbox.DiskBasedCache$CountingInputStream) -> a
com.android.volley.toolbox.HttpClientStack -> com.android.volley.toolbox.g:
    org.apache.http.client.HttpClient mClient -> a
    void addHeaders(org.apache.http.client.methods.HttpUriRequest,java.util.Map) -> a
    org.apache.http.HttpResponse performRequest(com.android.volley.Request,java.util.Map) -> a
    org.apache.http.client.methods.HttpUriRequest createHttpRequest(com.android.volley.Request,java.util.Map) -> b
    void setEntityIfNonEmptyBody(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,com.android.volley.Request) -> a
    void onPrepareRequest(org.apache.http.client.methods.HttpUriRequest) -> a
com.android.volley.toolbox.HttpClientStack$HttpPatch -> com.android.volley.toolbox.h:
    java.lang.String getMethod() -> getMethod
com.android.volley.toolbox.HttpHeaderParser -> com.android.volley.toolbox.i:
    com.android.volley.Cache$Entry parseCacheHeaders(com.android.volley.NetworkResponse) -> a
    long parseDateAsEpoch(java.lang.String) -> a
com.android.volley.toolbox.HttpStack -> com.android.volley.toolbox.j:
    org.apache.http.HttpResponse performRequest(com.android.volley.Request,java.util.Map) -> a
com.android.volley.toolbox.HurlStack -> com.android.volley.toolbox.k:
    com.android.volley.toolbox.HurlStack$UrlRewriter mUrlRewriter -> a
    javax.net.ssl.SSLSocketFactory mSslSocketFactory -> b
    org.apache.http.HttpResponse performRequest(com.android.volley.Request,java.util.Map) -> a
    org.apache.http.HttpEntity entityFromConnection(java.net.HttpURLConnection) -> a
    java.net.HttpURLConnection createConnection(java.net.URL) -> a
    java.net.HttpURLConnection openConnection(java.net.URL,com.android.volley.Request) -> a
    void setConnectionParametersForRequest(java.net.HttpURLConnection,com.android.volley.Request) -> a
    void addBodyIfExists(java.net.HttpURLConnection,com.android.volley.Request) -> b
com.android.volley.toolbox.HurlStack$UrlRewriter -> com.android.volley.toolbox.l:
    java.lang.String rewriteUrl(java.lang.String) -> a
com.android.volley.toolbox.ImageLoader -> com.android.volley.toolbox.m:
    com.android.volley.RequestQueue mRequestQueue -> a
    int mBatchResponseDelayMs -> b
    com.android.volley.toolbox.ImageLoader$ImageCache mCache -> c
    java.util.HashMap mInFlightRequests -> d
    java.util.HashMap mBatchedResponses -> e
    android.os.Handler mHandler -> f
    java.lang.Runnable mRunnable -> g
    com.android.volley.toolbox.ImageLoader$ImageContainer get(java.lang.String,com.android.volley.toolbox.ImageLoader$ImageListener,int,int) -> a
    void onGetImageSuccess(java.lang.String,android.graphics.Bitmap) -> a
    void onGetImageError(java.lang.String,com.android.volley.VolleyError) -> a
    void batchResponse(java.lang.String,com.android.volley.toolbox.ImageLoader$BatchedImageRequest) -> a
    void throwIfNotOnMainThread() -> a
    java.lang.String getCacheKey(java.lang.String,int,int) -> a
    java.util.HashMap access$0(com.android.volley.toolbox.ImageLoader) -> a
    java.util.HashMap access$1(com.android.volley.toolbox.ImageLoader) -> b
    void access$2(com.android.volley.toolbox.ImageLoader,java.lang.String,android.graphics.Bitmap) -> a
    void access$3(com.android.volley.toolbox.ImageLoader,java.lang.String,com.android.volley.VolleyError) -> a
    void access$4(com.android.volley.toolbox.ImageLoader,java.lang.Runnable) -> a
com.android.volley.toolbox.ImageLoader$2 -> com.android.volley.toolbox.n:
    com.android.volley.toolbox.ImageLoader this$0 -> a
    java.lang.String val$cacheKey -> b
    void onResponse(android.graphics.Bitmap) -> a
    void onResponse(java.lang.Object) -> a
com.android.volley.toolbox.ImageLoader$3 -> com.android.volley.toolbox.o:
    com.android.volley.toolbox.ImageLoader this$0 -> a
    java.lang.String val$cacheKey -> b
    void onErrorResponse(com.android.volley.VolleyError) -> a
com.android.volley.toolbox.ImageLoader$4 -> com.android.volley.toolbox.p:
    com.android.volley.toolbox.ImageLoader this$0 -> a
    void run() -> run
com.android.volley.toolbox.ImageLoader$BatchedImageRequest -> com.android.volley.toolbox.q:
    com.android.volley.Request mRequest -> b
    android.graphics.Bitmap mResponseBitmap -> c
    com.android.volley.VolleyError mError -> d
    java.util.LinkedList mContainers -> e
    com.android.volley.toolbox.ImageLoader this$0 -> a
    void setError(com.android.volley.VolleyError) -> a
    com.android.volley.VolleyError getError() -> a
    void addContainer(com.android.volley.toolbox.ImageLoader$ImageContainer) -> a
    boolean removeContainerAndCancelIfNecessary(com.android.volley.toolbox.ImageLoader$ImageContainer) -> b
    java.util.LinkedList access$0(com.android.volley.toolbox.ImageLoader$BatchedImageRequest) -> a
    void access$1(com.android.volley.toolbox.ImageLoader$BatchedImageRequest,android.graphics.Bitmap) -> a
    android.graphics.Bitmap access$2(com.android.volley.toolbox.ImageLoader$BatchedImageRequest) -> b
com.android.volley.toolbox.ImageLoader$ImageCache -> com.android.volley.toolbox.r:
    android.graphics.Bitmap getBitmap(java.lang.String) -> a
    void putBitmap(java.lang.String,android.graphics.Bitmap) -> a
com.android.volley.toolbox.ImageLoader$ImageContainer -> com.android.volley.toolbox.s:
    android.graphics.Bitmap mBitmap -> b
    com.android.volley.toolbox.ImageLoader$ImageListener mListener -> c
    java.lang.String mCacheKey -> d
    java.lang.String mRequestUrl -> e
    com.android.volley.toolbox.ImageLoader this$0 -> a
    void cancelRequest() -> a
    android.graphics.Bitmap getBitmap() -> b
    java.lang.String getRequestUrl() -> c
    com.android.volley.toolbox.ImageLoader$ImageListener access$0(com.android.volley.toolbox.ImageLoader$ImageContainer) -> a
    void access$1(com.android.volley.toolbox.ImageLoader$ImageContainer,android.graphics.Bitmap) -> a
com.android.volley.toolbox.ImageLoader$ImageListener -> com.android.volley.toolbox.t:
    void onResponse(com.android.volley.toolbox.ImageLoader$ImageContainer,boolean) -> a
com.android.volley.toolbox.ImageRequest -> com.android.volley.toolbox.u:
    com.android.volley.Response$Listener mListener -> a
    android.graphics.Bitmap$Config mDecodeConfig -> b
    int mMaxWidth -> c
    int mMaxHeight -> d
    java.lang.Object sDecodeLock -> e
    com.android.volley.Request$Priority getPriority() -> r
    int getResizedDimension(int,int,int,int) -> b
    com.android.volley.Response parseNetworkResponse(com.android.volley.NetworkResponse) -> a
    com.android.volley.Response doParse(com.android.volley.NetworkResponse) -> b
    void deliverResponse(android.graphics.Bitmap) -> a
    int findBestSampleSize(int,int,int,int) -> a
    void deliverResponse(java.lang.Object) -> a
com.android.volley.toolbox.NetworkImageView -> com.android.volley.toolbox.NetworkImageView:
    java.lang.String mUrl -> a
    int mDefaultImageId -> b
    int mErrorImageId -> c
    com.android.volley.toolbox.ImageLoader mImageLoader -> d
    com.android.volley.toolbox.ImageLoader$ImageContainer mImageContainer -> e
    void setImageUrl(java.lang.String,com.android.volley.toolbox.ImageLoader) -> a
    void setDefaultImageResId(int) -> setDefaultImageResId
    void setErrorImageResId(int) -> setErrorImageResId
    void loadImageIfNecessary(boolean) -> a
    void setDefaultImageOrNull() -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
    void drawableStateChanged() -> drawableStateChanged
    int access$0(com.android.volley.toolbox.NetworkImageView) -> a
    int access$1(com.android.volley.toolbox.NetworkImageView) -> b
com.android.volley.toolbox.NetworkImageView$1 -> com.android.volley.toolbox.v:
    com.android.volley.toolbox.NetworkImageView this$0 -> a
    boolean val$isInLayoutPass -> b
    void onErrorResponse(com.android.volley.VolleyError) -> a
    void onResponse(com.android.volley.toolbox.ImageLoader$ImageContainer,boolean) -> a
com.android.volley.toolbox.NetworkImageView$1$1 -> com.android.volley.toolbox.w:
    com.android.volley.toolbox.NetworkImageView$1 this$1 -> a
    com.android.volley.toolbox.ImageLoader$ImageContainer val$response -> b
    void run() -> run
com.android.volley.toolbox.PoolingByteArrayOutputStream -> com.android.volley.toolbox.x:
    com.android.volley.toolbox.ByteArrayPool mPool -> a
    void close() -> close
    void finalize() -> finalize
    void expand(int) -> a
    void write(byte[],int,int) -> write
    void write(int) -> write
com.android.volley.toolbox.Volley -> com.android.volley.toolbox.y:
    com.android.volley.RequestQueue newRequestQueue(android.content.Context,com.android.volley.toolbox.HttpStack) -> a
    com.android.volley.RequestQueue newRequestQueue(android.content.Context) -> a
com.domen.activities.ChatActivity -> com.domen.activities.ChatActivity:
    org.jivesoftware.smackx.muc.MultiUserChat chat -> a
    android.widget.RelativeLayout bottomBar -> b
    int side -> c
    android.widget.ImageView btn_send -> d
    android.widget.EditText edt_message -> e
    android.widget.ListView listView -> f
    android.view.inputmethod.InputMethodManager imm -> g
    java.util.ArrayList userList -> h
    java.util.List msgList -> i
    com.domen.adapter.ChatMsgAdapter chatMsgAdapter -> j
    java.lang.String UserFullId -> k
    java.util.Map userAgreeCache -> l
    java.util.Map userShitCache -> m
    int topicID -> n
    java.lang.String topicName -> o
    java.lang.String roomJID -> p
    java.util.Map vcardList -> q
    android.content.SharedPreferences accountInfo -> r
    java.lang.String nickName -> s
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void updateMesList(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    java.lang.String getTime() -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onBackPressed() -> onBackPressed
    void initUserCache(java.util.ArrayList) -> a
    void addUserAgree(java.lang.String) -> a
    void addUserShit(java.lang.String) -> b
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void clearReferences() -> i
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void showMessageHistory() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    int access$0() -> c
    int access$1() -> d
    java.lang.String access$2() -> e
    java.util.ArrayList access$3() -> f
    java.util.Map access$4() -> g
    java.util.Map access$5() -> h
    java.util.Map access$6(com.domen.activities.ChatActivity) -> a
    com.domen.adapter.ChatMsgAdapter access$7(com.domen.activities.ChatActivity) -> b
    java.lang.String access$8(com.domen.activities.ChatActivity) -> c
com.domen.activities.ChatActivity$1 -> com.domen.activities.a:
    com.domen.activities.ChatActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.domen.activities.ChatActivity$2 -> com.domen.activities.b:
    com.domen.activities.ChatActivity this$0 -> a
    org.jivesoftware.smack.packet.DefaultPacketExtension val$extension -> b
    java.lang.String val$messageJID -> c
    java.lang.String val$messageNickName -> d
    java.lang.String val$body -> e
    void run() -> run
com.domen.activities.ChatActivity$ConfirmQuitDialogFragment -> com.domen.activities.c:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
com.domen.activities.ChatActivity$ConfirmQuitDialogFragment$1 -> com.domen.activities.d:
    com.domen.activities.ChatActivity$ConfirmQuitDialogFragment this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.domen.activities.ChatActivity$ConfirmQuitDialogFragment$2 -> com.domen.activities.e:
    com.domen.activities.ChatActivity$ConfirmQuitDialogFragment this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.domen.activities.ChatActivity$JoinRoomAndAddListener -> com.domen.activities.f:
    com.domen.activities.ChatActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.Integer[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    com.domen.activities.ChatActivity access$2(com.domen.activities.ChatActivity$JoinRoomAndAddListener) -> a
com.domen.activities.ChatActivity$JoinRoomAndAddListener$1 -> com.domen.activities.g:
    com.domen.activities.ChatActivity$JoinRoomAndAddListener this$1 -> a
com.domen.activities.ChatActivity$JoinRoomAndAddListener$2 -> com.domen.activities.h:
    com.domen.activities.ChatActivity$JoinRoomAndAddListener this$1 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    com.domen.activities.ChatActivity$JoinRoomAndAddListener access$0(com.domen.activities.ChatActivity$JoinRoomAndAddListener$2) -> a
com.domen.activities.ChatActivity$JoinRoomAndAddListener$2$1 -> com.domen.activities.i:
    com.domen.activities.ChatActivity$JoinRoomAndAddListener$2 this$2 -> a
    org.jivesoftware.smack.packet.Message val$msg -> b
    java.lang.String val$messageJID -> c
    java.lang.String val$messageNickName -> d
    void run() -> run
com.domen.activities.ChatActivity$JoinRoomAndAddListener$3 -> com.domen.activities.j:
    com.domen.activities.ChatActivity$JoinRoomAndAddListener this$1 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    com.domen.activities.ChatActivity$JoinRoomAndAddListener access$0(com.domen.activities.ChatActivity$JoinRoomAndAddListener$3) -> a
com.domen.activities.ChatActivity$JoinRoomAndAddListener$3$1 -> com.domen.activities.k:
    com.domen.activities.ChatActivity$JoinRoomAndAddListener$3 this$2 -> a
    org.jivesoftware.smack.packet.Message val$msg -> b
    java.lang.String val$messageJID -> c
    java.lang.String val$messageNickName -> d
    void run() -> run
com.domen.activities.ChatActivity$LoadAvatar -> com.domen.activities.l:
    com.domen.activities.ChatActivity this$0 -> a
    java.lang.Void doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.activities.CountActivity -> com.domen.activities.CountActivity:
    android.widget.ImageView ibt_act_count -> a
    android.widget.TextView tv_num_count -> b
    android.widget.TextView tv_start -> c
    int count -> d
    void onCreate(android.os.Bundle) -> onCreate
com.domen.activities.CountActivity$1 -> com.domen.activities.m:
    com.domen.activities.CountActivity this$0 -> a
    void run() -> run
com.domen.activities.CountActivity$2 -> com.domen.activities.n:
    com.domen.activities.CountActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.domen.activities.DecideActivity -> com.domen.activities.DecideActivity:
    android.widget.ImageView btn_discuss_home -> a
    java.lang.String topicName -> b
    java.lang.String topicID -> c
    java.lang.String topicURL -> d
    android.os.Bundle fromBundle -> e
    java.lang.String roomJID -> f
    android.content.Intent intentIT -> g
    android.widget.RelativeLayout svContentView -> h
    android.widget.ProgressBar progressBar -> i
    int mShortAnimationDuration -> j
    com.android.volley.toolbox.NetworkImageView topicPic -> k
    com.android.volley.toolbox.ImageLoader mImageLoader -> l
    android.widget.TextView topicDesc -> m
    android.widget.TextView positiveView -> n
    android.widget.TextView negativeView -> o
    java.lang.String topicDescription -> p
    java.lang.String positive -> q
    java.lang.String negative -> r
    android.app.ProgressDialog registerDialog -> s
    com.domen.openfire.RequestATeam ngRA -> t
    android.content.SharedPreferences accountInfo -> u
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void clearReferences() -> a
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    android.app.ProgressDialog access$0(com.domen.activities.DecideActivity) -> a
    void access$1(com.domen.activities.DecideActivity,java.lang.String) -> a
    android.content.Intent access$2(com.domen.activities.DecideActivity) -> b
    java.lang.String access$3(com.domen.activities.DecideActivity) -> c
    void access$4(com.domen.activities.DecideActivity,java.lang.String) -> b
    void access$5(com.domen.activities.DecideActivity,java.lang.String) -> c
    void access$6(com.domen.activities.DecideActivity,java.lang.String) -> d
    android.widget.TextView access$7(com.domen.activities.DecideActivity) -> d
    java.lang.String access$8(com.domen.activities.DecideActivity) -> e
    android.widget.TextView access$9(com.domen.activities.DecideActivity) -> f
    java.lang.String access$10(com.domen.activities.DecideActivity) -> g
    android.widget.TextView access$11(com.domen.activities.DecideActivity) -> h
    java.lang.String access$12(com.domen.activities.DecideActivity) -> i
    android.widget.ProgressBar access$13(com.domen.activities.DecideActivity) -> j
    android.widget.RelativeLayout access$14(com.domen.activities.DecideActivity) -> k
    int access$15(com.domen.activities.DecideActivity) -> l
    com.domen.openfire.RequestATeam access$16(com.domen.activities.DecideActivity) -> m
com.domen.activities.DecideActivity$1 -> com.domen.activities.o:
    com.domen.activities.DecideActivity this$0 -> a
    android.widget.Button val$cancelButton -> b
    void onClick(android.view.View) -> onClick
com.domen.activities.DecideActivity$2 -> com.domen.activities.p:
    com.domen.activities.DecideActivity this$0 -> a
    android.widget.Button val$cancel_button -> b
    void onClick(android.view.View) -> onClick
com.domen.activities.DecideActivity$ResultIQProvider -> com.domen.activities.DecideActivity$ResultIQProvider:
    com.domen.activities.DecideActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    com.domen.activities.DecideActivity access$0(com.domen.activities.DecideActivity$ResultIQProvider) -> a
com.domen.activities.DecideActivity$ResultIQProvider$1 -> com.domen.activities.q:
    com.domen.activities.DecideActivity$ResultIQProvider this$1 -> a
    void run() -> run
com.domen.activities.DecideActivity$ResultIQProvider$2 -> com.domen.activities.r:
    com.domen.activities.DecideActivity$ResultIQProvider this$1 -> a
    void run() -> run
com.domen.activities.DecideActivity$ResultTopicInfoProvider -> com.domen.activities.DecideActivity$ResultTopicInfoProvider:
    com.domen.activities.DecideActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    void skip(org.xmlpull.v1.XmlPullParser) -> a
    java.lang.String readText(org.xmlpull.v1.XmlPullParser) -> b
    com.domen.activities.DecideActivity access$0(com.domen.activities.DecideActivity$ResultTopicInfoProvider) -> a
com.domen.activities.DecideActivity$ResultTopicInfoProvider$1 -> com.domen.activities.s:
    com.domen.activities.DecideActivity$ResultTopicInfoProvider this$1 -> a
    void run() -> run
    com.domen.activities.DecideActivity$ResultTopicInfoProvider access$0(com.domen.activities.DecideActivity$ResultTopicInfoProvider$1) -> a
com.domen.activities.DecideActivity$ResultTopicInfoProvider$1$1 -> com.domen.activities.t:
    com.domen.activities.DecideActivity$ResultTopicInfoProvider$1 this$2 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.domen.activities.MainActivity -> com.domen.activities.MainActivity:
    android.support.v4.view.ViewPager themeViewPager -> q
    com.domen.adapter.ThemeTabAdapter themeTabAdapter -> r
    java.util.List adapterslist -> s
    android.support.v4.widget.DrawerLayout mDrawerLayout -> t
    android.support.v4.app.ActionBarDrawerToggle mDrawerToggle -> u
    android.content.SharedPreferences sharedPref -> v
    android.widget.ImageView drawerAvatar -> w
    android.widget.TextView drawerUserName -> x
    android.widget.TextView drawerRank -> y
    android.widget.TextView drawerSubTitle -> z
    android.widget.TextView drawerFavour -> A
    android.widget.TextView drawerShit -> B
    java.util.ArrayList topics -> C
    float Height -> n
    float Width -> o
    com.domen.tools.TopicDatabaseOpenHelper dbOpenHelper -> D
    android.content.SharedPreferences accountInfo -> p
    int favour -> E
    int shit -> F
    int rank -> G
    com.domen.tools.BitmapMemAndDiskCache avatarCache -> H
    org.jivesoftware.smackx.vcardtemp.packet.VCard mVCard -> I
    int[] topicOccuNumber -> J
    android.app.ProgressDialog uploadAvatarDialog -> K
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onClick(android.view.View) -> onClick
    void forceShowActionBarOverflowMenu() -> i
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    android.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.content.Loader,android.database.Cursor) -> a
    void onLoaderReset(android.content.Loader) -> onLoaderReset
    void onBackPressed() -> onBackPressed
    void onRestart() -> onRestart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean saveAvatar(android.graphics.Bitmap) -> a
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void clearReferences() -> j
    void onLoadFinished(android.content.Loader,java.lang.Object) -> onLoadFinished
    void access$1(com.domen.activities.MainActivity,java.util.ArrayList) -> a
    com.domen.tools.TopicDatabaseOpenHelper access$2(com.domen.activities.MainActivity) -> a
    java.util.ArrayList access$3(com.domen.activities.MainActivity) -> b
    android.support.v4.view.ViewPager access$4() -> f
    void access$5(com.domen.activities.MainActivity,int) -> a
    void access$6(com.domen.activities.MainActivity,int) -> b
    void access$7(com.domen.activities.MainActivity,int) -> c
    int access$8(com.domen.activities.MainActivity) -> c
    int access$9(com.domen.activities.MainActivity) -> d
    int access$10(com.domen.activities.MainActivity) -> e
    android.widget.TextView access$11(com.domen.activities.MainActivity) -> f
    android.widget.TextView access$12(com.domen.activities.MainActivity) -> g
    android.widget.TextView access$13(com.domen.activities.MainActivity) -> h
    android.content.SharedPreferences access$14() -> g
    java.util.List access$15() -> h
    int[] access$16(com.domen.activities.MainActivity) -> i
com.domen.activities.MainActivity$1 -> com.domen.activities.u:
    com.domen.activities.MainActivity this$0 -> a
    void onPageScrollStateChanged(int) -> b
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
com.domen.activities.MainActivity$2 -> com.domen.activities.v:
    com.domen.activities.MainActivity this$0 -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerOpened(android.view.View) -> a
com.domen.activities.MainActivity$HandleTopicOccuCount -> com.domen.activities.MainActivity$HandleTopicOccuCount:
    int pageNumber -> b
    com.domen.activities.MainActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    int access$0(com.domen.activities.MainActivity$HandleTopicOccuCount) -> a
com.domen.activities.MainActivity$HandleTopicOccuCount$1 -> com.domen.activities.w:
    com.domen.activities.MainActivity$HandleTopicOccuCount this$1 -> a
    void run() -> run
com.domen.activities.MainActivity$SelectAvatarDialog -> com.domen.activities.x:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
com.domen.activities.MainActivity$SelectAvatarDialog$1 -> com.domen.activities.y:
    com.domen.activities.MainActivity$SelectAvatarDialog this$1 -> a
    java.lang.CharSequence[] val$items -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.domen.activities.MainActivity$SwipeRefreshListFragmentFragment -> com.domen.activities.z:
    java.lang.String topicType -> X
    int requestType -> Y
    int position -> Z
    android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener mOnRefreshListener -> aa
    int itemPosition -> ab
    void onCreate(android.os.Bundle) -> d
    android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener getOnFreshListener() -> B
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    java.lang.String access$0(com.domen.activities.MainActivity$SwipeRefreshListFragmentFragment) -> a
    int access$1(com.domen.activities.MainActivity$SwipeRefreshListFragmentFragment) -> b
    int access$2(com.domen.activities.MainActivity$SwipeRefreshListFragmentFragment) -> c
com.domen.activities.MainActivity$SwipeRefreshListFragmentFragment$1 -> com.domen.activities.aa:
    com.domen.activities.MainActivity$SwipeRefreshListFragmentFragment this$1 -> a
    void onRefresh() -> a
com.domen.activities.MainActivity$SyncTopicsIQProvider -> com.domen.activities.MainActivity$SyncTopicsIQProvider:
    com.domen.activities.MainActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
com.domen.activities.MainActivity$SyncTopicsIQProvider$1 -> com.domen.activities.ab:
    com.domen.activities.MainActivity$SyncTopicsIQProvider this$1 -> a
    void run() -> run
com.domen.activities.MainActivity$SyncUserInfoIQProvider -> com.domen.activities.MainActivity$SyncUserInfoIQProvider:
    com.domen.activities.MainActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    com.domen.activities.MainActivity access$0(com.domen.activities.MainActivity$SyncUserInfoIQProvider) -> a
com.domen.activities.MainActivity$SyncUserInfoIQProvider$1 -> com.domen.activities.ac:
    com.domen.activities.MainActivity$SyncUserInfoIQProvider this$1 -> a
    void run() -> run
com.domen.activities.RanksActivity -> com.domen.activities.RanksActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.domen.activities.RecordActivity -> com.domen.activities.RecordActivity:
    java.lang.String record_path -> a
    android.media.MediaRecorder mediaRecorder -> b
    java.io.File myFile -> c
    java.io.File mydirFile -> d
    android.widget.Button recordStart -> e
    java.lang.String name -> f
    android.os.Vibrator vibrator -> g
    void onCreate(android.os.Bundle) -> onCreate
    void finish() -> finish
    android.os.Vibrator access$0(com.domen.activities.RecordActivity) -> a
    void access$1(com.domen.activities.RecordActivity,java.lang.String) -> a
    java.lang.String access$2(com.domen.activities.RecordActivity) -> b
    java.lang.String access$3(com.domen.activities.RecordActivity) -> c
    void access$4(com.domen.activities.RecordActivity,java.io.File) -> a
    java.io.File access$5(com.domen.activities.RecordActivity) -> d
    void access$6(com.domen.activities.RecordActivity,android.media.MediaRecorder) -> a
    android.media.MediaRecorder access$7(com.domen.activities.RecordActivity) -> e
com.domen.activities.RecordActivity$RecordListener -> com.domen.activities.ad:
    com.domen.activities.RecordActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.domen.activities.RegisterActivity -> com.domen.activities.RegisterActivity:
    android.widget.ImageView registerButton -> b
    org.jivesoftware.smack.tcp.XMPPTCPConnection mXmppConnection -> a
    android.widget.EditText account_name -> c
    android.widget.EditText password -> d
    android.content.SharedPreferences account -> e
    android.widget.EditText retypePassword -> f
    android.app.ProgressDialog registerDialog -> g
    android.app.ProgressDialog loginDialog -> h
    com.domen.activities.RegisterActivity$Token mToken -> i
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void configure() -> a
    android.app.ProgressDialog access$0(com.domen.activities.RegisterActivity) -> a
    android.widget.EditText access$1(com.domen.activities.RegisterActivity) -> b
    android.widget.EditText access$2(com.domen.activities.RegisterActivity) -> c
    void access$3(com.domen.activities.RegisterActivity,android.app.ProgressDialog) -> a
    void access$4(com.domen.activities.RegisterActivity) -> d
    com.domen.activities.RegisterActivity$Token access$5(com.domen.activities.RegisterActivity) -> e
    android.content.SharedPreferences access$6(com.domen.activities.RegisterActivity) -> f
    android.app.ProgressDialog access$7(com.domen.activities.RegisterActivity) -> g
    void access$8(com.domen.activities.RegisterActivity,android.app.ProgressDialog) -> b
com.domen.activities.RegisterActivity$DisConnection -> com.domen.activities.ae:
    com.domen.activities.RegisterActivity this$0 -> a
    java.lang.Void doInBackground(org.jivesoftware.smack.tcp.XMPPTCPConnection[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.activities.RegisterActivity$Login -> com.domen.activities.af:
    com.domen.activities.RegisterActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.activities.RegisterActivity$Token -> com.domen.activities.ag:
    boolean flag -> b
    com.domen.activities.RegisterActivity this$0 -> a
    void setFlag(boolean) -> a
    boolean getFlag() -> a
com.domen.activities.RegisterActivity$UserInfoResultIQProvider -> com.domen.activities.RegisterActivity$UserInfoResultIQProvider:
    com.domen.activities.RegisterActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
com.domen.activities.RegisterActivity$register -> com.domen.activities.ah:
    com.domen.activities.RegisterActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.activities.RoomListActivity -> com.domen.activities.RoomListActivity:
    java.lang.String topicOfId -> a
    java.util.ArrayList roomData -> b
    com.domen.adapter.RoomListAdapter adapter -> c
    org.jivesoftware.smack.tcp.XMPPTCPConnection mXmppConnection -> d
    java.lang.String topicName -> e
    android.widget.ImageView close -> f
    android.widget.ProgressBar mProgressBar -> g
    android.widget.TextView emptyText -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void clearReferences() -> a
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    java.util.ArrayList access$0(com.domen.activities.RoomListActivity) -> a
    android.widget.ProgressBar access$1(com.domen.activities.RoomListActivity) -> b
    com.domen.adapter.RoomListAdapter access$2(com.domen.activities.RoomListActivity) -> c
    android.widget.TextView access$3(com.domen.activities.RoomListActivity) -> d
com.domen.activities.RoomListActivity$ResultTopicInfoProvider -> com.domen.activities.RoomListActivity$ResultTopicInfoProvider:
    com.domen.activities.RoomListActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    java.lang.String readText(org.xmlpull.v1.XmlPullParser) -> a
    com.domen.activities.RoomListActivity access$0(com.domen.activities.RoomListActivity$ResultTopicInfoProvider) -> a
com.domen.activities.RoomListActivity$ResultTopicInfoProvider$1 -> com.domen.activities.ai:
    com.domen.activities.RoomListActivity$ResultTopicInfoProvider this$1 -> a
    void run() -> run
com.domen.activities.SettingActivity -> com.domen.activities.SettingActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.domen.activities.ShowOccupantsActivity -> com.domen.activities.ShowOccupantsActivity:
    java.lang.String roomJID -> a
    java.lang.String topicID -> b
    java.util.Map occupantsData -> c
    java.util.List allOccupantsData -> d
    java.util.List allOccupantsNickName -> e
    java.util.List allOccupantsJID -> f
    android.widget.ProgressBar mProgressBar -> g
    com.domen.adapter.OccupantsListAdapter adapter -> h
    com.domen.adapter.OccupantsGridAdapter gridViewAdapter -> i
    android.widget.TextView emptyText -> j
    android.widget.ImageView returnButton -> k
    android.widget.GridView avatarGrid -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void clearReferences() -> a
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    java.util.Map access$0(com.domen.activities.ShowOccupantsActivity) -> a
    java.util.List access$1(com.domen.activities.ShowOccupantsActivity) -> b
    android.widget.ProgressBar access$2(com.domen.activities.ShowOccupantsActivity) -> c
    com.domen.adapter.OccupantsListAdapter access$3(com.domen.activities.ShowOccupantsActivity) -> d
    void access$4(com.domen.activities.ShowOccupantsActivity,com.domen.adapter.OccupantsGridAdapter) -> a
    android.widget.GridView access$5(com.domen.activities.ShowOccupantsActivity) -> e
    com.domen.adapter.OccupantsGridAdapter access$6(com.domen.activities.ShowOccupantsActivity) -> f
    android.widget.TextView access$7(com.domen.activities.ShowOccupantsActivity) -> g
com.domen.activities.ShowOccupantsActivity$OccupantsListResultProvider -> com.domen.activities.ShowOccupantsActivity$OccupantsListResultProvider:
    com.domen.activities.ShowOccupantsActivity this$0 -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    java.lang.String readText(org.xmlpull.v1.XmlPullParser) -> a
    com.domen.activities.ShowOccupantsActivity access$0(com.domen.activities.ShowOccupantsActivity$OccupantsListResultProvider) -> a
com.domen.activities.ShowOccupantsActivity$OccupantsListResultProvider$1 -> com.domen.activities.aj:
    com.domen.activities.ShowOccupantsActivity$OccupantsListResultProvider this$1 -> a
    void run() -> run
com.domen.adapter.ChatMsgAdapter -> com.domen.a.a:
    android.view.LayoutInflater chat_inflater -> a
    java.util.List chat_list -> b
    android.content.Context context -> c
    android.widget.ImageView ibtn_like -> d
    android.widget.ImageView ibtn_shit -> e
    com.domen.customView.CustomPopupWindow popuoWindow -> f
    boolean isSpectator -> g
    com.domen.tools.BitmapMemAndDiskCache avatarCache -> h
    java.util.Map vcardList -> i
    int mSelectedPosition -> j
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.domen.customView.CustomPopupWindow conPopupWindow(android.content.Context) -> a
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    java.util.Map getVcardList() -> a
    void setSelectedPosition(int) -> a
    com.domen.customView.CustomPopupWindow access$0(com.domen.adapter.ChatMsgAdapter) -> a
    android.content.Context access$1(com.domen.adapter.ChatMsgAdapter) -> b
    com.domen.customView.CustomPopupWindow access$2(com.domen.adapter.ChatMsgAdapter,android.content.Context) -> a
    java.util.List access$3(com.domen.adapter.ChatMsgAdapter) -> c
    int access$4(com.domen.adapter.ChatMsgAdapter) -> d
com.domen.adapter.ChatMsgAdapter$1 -> com.domen.a.b:
    com.domen.adapter.ChatMsgAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.domen.adapter.ChatMsgAdapter$2 -> com.domen.a.c:
    com.domen.adapter.ChatMsgAdapter this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.domen.adapter.ChatMsgAdapter$3 -> com.domen.a.d:
    com.domen.adapter.ChatMsgAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.domen.adapter.ChatMsgAdapter$4 -> com.domen.a.e:
    com.domen.adapter.ChatMsgAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.domen.adapter.ChatMsgAdapter$5 -> com.domen.a.f:
    com.domen.adapter.ChatMsgAdapter this$0 -> a
    void onDismiss() -> onDismiss
com.domen.adapter.ChatMsgAdapter$ViewHolder -> com.domen.a.g:
    android.widget.RelativeLayout contentLayout -> a
    android.widget.ImageView ivHead -> b
    android.widget.TextView tvContent -> c
    android.widget.ImageView ivPicture -> d
com.domen.adapter.OccupantsGridAdapter -> com.domen.a.h:
    android.content.Context mContext -> a
    android.view.LayoutInflater chat_inflater -> b
    java.util.List allOccupants -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.domen.adapter.OccupantsListAdapter -> com.domen.a.i:
    android.content.Context mContext -> a
    android.view.LayoutInflater chat_inflater -> b
    java.util.List mData -> c
    java.util.List allOccupants -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void addOccupantsData(java.util.Map) -> a
com.domen.adapter.OccupantsListAdapter$ViewHolder -> com.domen.a.j:
    android.widget.ImageView positive1rank -> a
    android.widget.ImageView negative1rank -> b
    android.widget.TextView occupant0 -> c
    android.widget.TextView occupant1 -> d
com.domen.adapter.RoomListAdapter -> com.domen.a.k:
    android.content.Context mContext -> a
    android.view.LayoutInflater chat_inflater -> b
    java.util.ArrayList mData -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.domen.adapter.RoomListAdapter$ViewHolder -> com.domen.a.l:
    android.widget.ImageView positive1rank -> a
    android.widget.ImageView negative1rank -> b
    android.widget.TextView occupant0 -> c
    android.widget.TextView occupant1 -> d
com.domen.adapter.ThemeListAdapter -> com.domen.a.m:
    android.view.LayoutInflater theme_inflater -> a
    com.android.volley.toolbox.ImageLoader mImageLoader -> b
    android.content.Context context -> c
    int[] occuNumber -> d
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
com.domen.adapter.ThemeListAdapter$ViewHolder -> com.domen.a.n:
    android.widget.TextView tvName -> a
    android.widget.TextView firstChar -> b
    com.android.volley.toolbox.NetworkImageView mNetworkImageView -> c
    android.widget.TextView number -> d
    android.widget.TextView access$0(com.domen.adapter.ThemeListAdapter$ViewHolder) -> a
    android.widget.TextView access$1(com.domen.adapter.ThemeListAdapter$ViewHolder) -> b
    com.android.volley.toolbox.NetworkImageView access$2(com.domen.adapter.ThemeListAdapter$ViewHolder) -> c
    void access$3(com.domen.adapter.ThemeListAdapter$ViewHolder,com.android.volley.toolbox.NetworkImageView) -> a
    void access$4(com.domen.adapter.ThemeListAdapter$ViewHolder,android.widget.TextView) -> a
    void access$5(com.domen.adapter.ThemeListAdapter$ViewHolder,android.widget.TextView) -> b
com.domen.adapter.ThemeTabAdapter -> com.domen.a.o:
    java.util.List adapterslist -> a
    int number -> b
    java.lang.String[] titles -> c
    android.content.Context context -> d
    android.support.v4.app.Fragment getItem(int) -> a
    int getCount() -> b
    java.lang.CharSequence getPageTitle(int) -> b
    int getItemPosition(java.lang.Object) -> a
    android.content.Context access$0() -> c
com.domen.adapter.ThemeTabAdapter$ThemeFragment -> com.domen.a.p:
    android.support.v4.widget.SwipeRefreshLayout mSwipeRefreshLayout -> X
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener) -> a
    void setRefreshing(boolean) -> d
    void setColorScheme(int,int,int,int) -> a
    boolean canListViewScrollUp(android.widget.ListView) -> b
    boolean access$0(android.widget.ListView) -> a
com.domen.adapter.ThemeTabAdapter$ThemeFragment$ListFragmentSwipeRefreshLayout -> com.domen.a.q:
    com.domen.adapter.ThemeTabAdapter$ThemeFragment this$1 -> a
    boolean canChildScrollUp() -> a
com.domen.cache.LruBitmapCache -> com.domen.b.a:
    int sizeOf(java.lang.String,android.graphics.Bitmap) -> b
    android.graphics.Bitmap getBitmap(java.lang.String) -> a
    void putBitmap(java.lang.String,android.graphics.Bitmap) -> a
    int getCacheSize(android.content.Context) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> b
com.domen.customView.CustomPopupWindow -> com.domen.c.a:
    void showAsPullUp(android.view.View,int,int) -> a
com.domen.customView.ProgressDialogWithKeyBack -> com.domen.c.b:
    android.os.AsyncTask task -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
com.domen.entity.MsgEntity -> com.domen.d.a:
    java.lang.String content -> a
    java.lang.String userJID -> b
    java.lang.String date -> c
    java.lang.Boolean isLeft -> d
    java.lang.Boolean isText -> e
    java.lang.String name -> f
    java.lang.String getContent() -> a
    void setContent(java.lang.String) -> a
    void setDate(java.lang.String) -> b
    java.lang.Boolean getIsLeft() -> b
    void setIsLeft(java.lang.Boolean) -> a
    java.lang.String getName() -> c
    void setName(java.lang.String) -> c
    void setUserJID(java.lang.String) -> d
    java.lang.String getUserJID() -> d
com.domen.openfire.MultipleLoginPresenceListener -> com.domen.openfire.a:
    android.app.Activity mContext -> a
    java.lang.String mulResource -> b
    void entriesAdded(java.util.Collection) -> entriesAdded
    void entriesDeleted(java.util.Collection) -> entriesDeleted
    void entriesUpdated(java.util.Collection) -> entriesUpdated
    void presenceChanged(org.jivesoftware.smack.packet.Presence) -> presenceChanged
com.domen.openfire.MultipleLoginPresenceListener$MultiLoginDialog -> com.domen.openfire.b:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
com.domen.openfire.MultipleLoginPresenceListener$MultiLoginDialog$1 -> com.domen.openfire.c:
    com.domen.openfire.MultipleLoginPresenceListener$MultiLoginDialog this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.domen.openfire.RequestATeam -> com.domen.openfire.RequestATeam:
    java.lang.String username -> a
    java.lang.String topicID -> b
    java.lang.String isPositive -> c
    java.lang.String isJoin -> d
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    void setIsJoin(java.lang.String) -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestExistingRoom -> com.domen.openfire.RequestExistingRoom:
    java.lang.String id -> a
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestOccupantsList -> com.domen.openfire.RequestOccupantsList:
    java.lang.String id -> a
    java.lang.String roomJID -> b
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestSaveUserInfo -> com.domen.openfire.RequestSaveUserInfo:
    java.lang.String account -> a
    java.lang.String userJID -> b
    int rank -> c
    java.lang.String subtitle -> d
    int favour -> e
    int shit -> f
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestSync -> com.domen.openfire.RequestSync:
    java.lang.String topicType -> a
    int requestType -> b
    int position -> c
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestSyncTopicOccuCount -> com.domen.openfire.RequestSyncTopicOccuCount:
    int position -> a
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestSyncUserInfo -> com.domen.openfire.RequestSyncUserInfo:
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.RequestTopicInfo -> com.domen.openfire.RequestTopicInfo:
    java.lang.String id -> a
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.openfire.SyncAgreeAndShit -> com.domen.openfire.SyncAgreeAndShit:
    java.util.ArrayList userList -> a
    int topicID -> b
    java.lang.String roomJID -> c
    java.util.Map userAgreeCache -> d
    java.util.Map userShitCache -> e
    java.lang.String getChildElementXML() -> a
    java.lang.String getElementName() -> b
    java.lang.String getNamespace() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
com.domen.start.LoginActivity -> com.domen.start.LoginActivity:
    android.widget.EditText edt_username -> b
    android.widget.EditText edt_password -> c
    android.widget.ImageView btn_login -> d
    org.jivesoftware.smack.tcp.XMPPTCPConnection mXmppConnection -> a
    android.app.ProgressDialog loginDialog -> e
    android.content.SharedPreferences account -> f
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.content.SharedPreferences access$0(com.domen.start.LoginActivity) -> a
    android.app.ProgressDialog access$1(com.domen.start.LoginActivity) -> b
    void access$2(com.domen.start.LoginActivity,android.app.ProgressDialog) -> a
com.domen.start.LoginActivity$DisConnection -> com.domen.start.a:
    java.lang.Void doInBackground(org.jivesoftware.smack.tcp.XMPPTCPConnection[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.start.LoginActivity$Login -> com.domen.start.b:
    com.domen.start.LoginActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.start.PreLoginActivity -> com.domen.start.PreLoginActivity:
    android.widget.TextView tvLogin -> a
    android.widget.TextView tvRegister -> b
    int waitForResult -> c
    int waitForRegister -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.domen.start.StartupActivity -> com.domen.start.StartupActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean needStartApp() -> a
com.domen.tools.BitmapMemAndDiskCache -> com.domen.e.a:
    com.domen.tools.BitmapMemAndDiskCache mInstance -> a
    android.content.Context mContext -> b
    android.util.LruCache mMemoryCache -> c
    com.domen.tools.DiskLruCache mDiskLruCache -> d
    java.lang.Object mDiskCacheLock -> e
    boolean mDiskCacheStarting -> f
    android.graphics.Bitmap$CompressFormat mCompressFormat -> g
    int mCompressQuality -> h
    android.app.ProgressDialog mDialog -> i
    com.domen.tools.BitmapMemAndDiskCache getInstance(android.content.Context) -> a
    void addBitmapToCache(java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBitmapFromMemCache(java.lang.String) -> a
    void loadAvatarBitmap(java.lang.String,org.jivesoftware.smackx.vcardtemp.packet.VCard,android.widget.ImageView,boolean,android.app.ProgressDialog) -> a
    void loadAvatarBitmap(android.widget.BaseAdapter,android.widget.ImageView,java.lang.String,java.lang.String,boolean) -> a
    java.io.File getDiskCacheDir(android.content.Context,java.lang.String) -> a
    void removeBitmapFromDiskCache(java.lang.String) -> b
    void removeBitmapFromCache(java.lang.String) -> c
    java.lang.Object access$0(com.domen.tools.BitmapMemAndDiskCache) -> a
    void access$1(com.domen.tools.BitmapMemAndDiskCache,com.domen.tools.DiskLruCache) -> a
    void access$2(com.domen.tools.BitmapMemAndDiskCache,boolean) -> a
    android.app.ProgressDialog access$3(com.domen.tools.BitmapMemAndDiskCache) -> b
    void access$4(com.domen.tools.BitmapMemAndDiskCache,android.app.ProgressDialog) -> a
com.domen.tools.BitmapMemAndDiskCache$1 -> com.domen.e.b:
    com.domen.tools.BitmapMemAndDiskCache this$0 -> a
    int sizeOf(java.lang.String,android.graphics.Bitmap) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> sizeOf
com.domen.tools.BitmapMemAndDiskCache$BitmapWorkerTask -> com.domen.e.c:
    java.lang.ref.WeakReference imageViewReference -> b
    org.jivesoftware.smackx.vcardtemp.packet.VCard data -> c
    com.domen.tools.BitmapMemAndDiskCache this$0 -> a
    android.graphics.Bitmap doInBackground(org.jivesoftware.smackx.vcardtemp.packet.VCard[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.tools.BitmapMemAndDiskCache$InitDiskCacheTask -> com.domen.e.d:
    com.domen.tools.BitmapMemAndDiskCache this$0 -> a
    java.lang.Void doInBackground(java.io.File[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.tools.BitmapSingleton -> com.domen.e.e:
    com.domen.tools.BitmapSingleton mInstance -> a
    com.android.volley.RequestQueue mRequestQueue -> b
    com.android.volley.toolbox.ImageLoader mImageLoader -> c
    android.content.Context mCtx -> d
    com.domen.tools.BitmapSingleton getInstance(android.content.Context) -> a
    com.android.volley.RequestQueue getRequestQueue() -> a
    com.android.volley.toolbox.ImageLoader getImageLoader() -> b
com.domen.tools.BitmapTool -> com.domen.e.f:
    android.graphics.Bitmap decodeSampledBitmapFromFile(java.io.File,int,int) -> a
    int calculateInSampleSize(android.graphics.BitmapFactory$Options,int,int) -> a
com.domen.tools.CurrentActivity -> com.domen.e.g:
    android.app.Activity currentActivity -> a
    android.app.Activity getCurrentActivity() -> a
    void setCurrentActivity(android.app.Activity) -> a
com.domen.tools.DiskLruCache -> com.domen.e.h:
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> a
    java.io.File directory -> c
    java.io.File journalFile -> d
    java.io.File journalFileTmp -> e
    java.io.File journalFileBackup -> f
    int appVersion -> g
    long maxSize -> h
    int valueCount -> i
    long size -> j
    java.io.Writer journalWriter -> k
    java.util.LinkedHashMap lruEntries -> l
    int redundantOpCount -> m
    long nextSequenceNumber -> n
    java.util.concurrent.ThreadPoolExecutor executorService -> b
    java.util.concurrent.Callable cleanupCallable -> o
    java.io.OutputStream NULL_OUTPUT_STREAM -> p
    com.domen.tools.DiskLruCache open(java.io.File,int,int,long) -> a
    void readJournal() -> b
    void readJournalLine(java.lang.String) -> b
    void processJournal() -> c
    void rebuildJournal() -> d
    void deleteIfExists(java.io.File) -> a
    void renameTo(java.io.File,java.io.File,boolean) -> a
    void completeEdit(com.domen.tools.DiskLruCache$Editor,boolean) -> a
    boolean journalRebuildRequired() -> e
    boolean remove(java.lang.String) -> a
    void checkNotClosed() -> f
    void close() -> close
    void trimToSize() -> g
    void delete() -> a
    void validateKey(java.lang.String) -> c
    java.io.Writer access$0(com.domen.tools.DiskLruCache) -> a
    void access$1(com.domen.tools.DiskLruCache) -> b
    boolean access$2(com.domen.tools.DiskLruCache) -> c
    void access$3(com.domen.tools.DiskLruCache) -> d
    void access$4(com.domen.tools.DiskLruCache,int) -> a
    int access$7(com.domen.tools.DiskLruCache) -> e
    java.io.File access$8(com.domen.tools.DiskLruCache) -> f
    void access$10(com.domen.tools.DiskLruCache,com.domen.tools.DiskLruCache$Editor,boolean) -> a
com.domen.tools.DiskLruCache$1 -> com.domen.e.i:
    com.domen.tools.DiskLruCache this$0 -> a
    java.lang.Void call() -> a
    java.lang.Object call() -> call
com.domen.tools.DiskLruCache$2 -> com.domen.e.j:
    void write(int) -> write
com.domen.tools.DiskLruCache$Editor -> com.domen.e.k:
    com.domen.tools.DiskLruCache$Entry entry -> b
    boolean[] written -> c
    com.domen.tools.DiskLruCache this$0 -> a
    void abort() -> a
    com.domen.tools.DiskLruCache$Entry access$2(com.domen.tools.DiskLruCache$Editor) -> a
    boolean[] access$3(com.domen.tools.DiskLruCache$Editor) -> b
com.domen.tools.DiskLruCache$Entry -> com.domen.e.l:
    java.lang.String key -> b
    long[] lengths -> c
    boolean readable -> d
    com.domen.tools.DiskLruCache$Editor currentEditor -> e
    long sequenceNumber -> f
    com.domen.tools.DiskLruCache this$0 -> a
    java.lang.String getLengths() -> a
    void setLengths(java.lang.String[]) -> a
    java.io.IOException invalidLengths(java.lang.String[]) -> b
    java.io.File getCleanFile(int) -> a
    java.io.File getDirtyFile(int) -> b
    boolean access$0(com.domen.tools.DiskLruCache$Entry) -> a
    com.domen.tools.DiskLruCache$Editor access$1(com.domen.tools.DiskLruCache$Entry) -> b
    java.lang.String access$2(com.domen.tools.DiskLruCache$Entry) -> c
    void access$4(com.domen.tools.DiskLruCache$Entry,boolean) -> a
    void access$5(com.domen.tools.DiskLruCache$Entry,com.domen.tools.DiskLruCache$Editor) -> a
    void access$6(com.domen.tools.DiskLruCache$Entry,java.lang.String[]) -> a
    long[] access$7(com.domen.tools.DiskLruCache$Entry) -> d
    void access$9(com.domen.tools.DiskLruCache$Entry,long) -> a
com.domen.tools.DiskLruCacheUtil -> com.domen.e.m:
    java.nio.charset.Charset US_ASCII -> a
    java.nio.charset.Charset UTF_8 -> b
    void deleteContents(java.io.File) -> a
    void closeQuietly(java.io.Closeable) -> a
com.domen.tools.JsonUtil -> com.domen.e.n:
    java.util.ArrayList AnalysisTopics(java.lang.String,java.lang.String) -> a
    void AnalysisRoomList(java.lang.String,java.util.ArrayList) -> a
    void AnalysisOccupantsList(java.lang.String,java.util.Map) -> a
    void AnalysisTopicOccuCount(java.lang.String,int[],int) -> a
com.domen.tools.LoadAvatarManager -> com.domen.e.o:
    com.domen.tools.LoadAvatarManager sInstance -> a
    java.util.concurrent.ThreadPoolExecutor mDownloadThreadPool -> b
    android.os.Handler mHandler -> c
    int NUMBER_OF_CORES -> d
    java.util.concurrent.TimeUnit KEEP_ALIVE_TIME_UNIT -> e
    java.util.concurrent.BlockingQueue mDownloadWorkQueue -> f
    android.widget.BaseAdapter mAdapter -> g
    java.util.ArrayList mData -> h
    java.util.Map occupantsData -> i
    com.domen.tools.LoadAvatarManager getInstance() -> a
    void startDownload(com.domen.adapter.RoomListAdapter,java.util.ArrayList,java.lang.String,int,java.lang.String,int) -> a
    void startDownload(android.widget.BaseAdapter,java.util.Map,java.lang.String,int,java.lang.String,int) -> a
    void startParserAvatar(org.jivesoftware.smackx.vcardtemp.packet.VCard,android.widget.BaseAdapter) -> a
    void startDownloadAvatar(android.widget.BaseAdapter,android.widget.ImageView,java.lang.String,java.lang.String,int) -> a
    void handleState(java.lang.Runnable,int) -> a
    void setAdapter(android.widget.BaseAdapter) -> a
    void setRoomListData(java.util.ArrayList) -> a
    void setOccupantsListData(java.util.Map) -> a
    java.util.ArrayList access$0(com.domen.tools.LoadAvatarManager) -> a
    android.widget.BaseAdapter access$1(com.domen.tools.LoadAvatarManager) -> b
    java.util.Map access$2(com.domen.tools.LoadAvatarManager) -> c
com.domen.tools.LoadAvatarManager$1 -> com.domen.e.p:
    com.domen.tools.LoadAvatarManager this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.domen.tools.LoadAvatarManager$AvatarTask -> com.domen.e.q:
    java.lang.String userBareJID -> a
    org.jivesoftware.smackx.vcardtemp.packet.VCard mVCard -> b
    int requestType -> c
    android.widget.BaseAdapter mAdapter -> d
    java.lang.String nickName -> e
    com.domen.tools.LoadAvatarManager this$0 -> f
    void run() -> run
    org.jivesoftware.smackx.vcardtemp.packet.VCard getVCard() -> a
    android.widget.BaseAdapter getAdapter() -> b
    java.lang.String getNickName() -> c
com.domen.tools.LoadAvatarManager$ParserAvatarTask -> com.domen.e.r:
    com.domen.tools.BitmapMemAndDiskCache cacheTools -> a
    android.content.Context mContext -> b
    org.jivesoftware.smackx.vcardtemp.packet.VCard mVCard -> c
    android.graphics.Bitmap mBitmap -> d
    android.widget.BaseAdapter mAdapter -> e
    com.domen.tools.LoadAvatarManager this$0 -> f
    void run() -> run
    android.widget.BaseAdapter getAdapter() -> a
com.domen.tools.LoadAvatarManager$VCardTask -> com.domen.e.s:
    java.lang.String userBareJID -> a
    org.jivesoftware.smackx.vcardtemp.packet.VCard mVCard -> b
    int roomListPos -> c
    java.lang.String mRole -> d
    int requestType -> e
    com.domen.tools.LoadAvatarManager this$0 -> f
    void run() -> run
    org.jivesoftware.smackx.vcardtemp.packet.VCard getVCard() -> a
    int getRoomListPos() -> b
com.domen.tools.MUserChatManager -> com.domen.e.t:
    org.jivesoftware.smackx.muc.MultiUserChat mChat -> a
    org.jivesoftware.smackx.muc.MultiUserChat getChat() -> a
    void setChat(org.jivesoftware.smackx.muc.MultiUserChat) -> a
com.domen.tools.MXMPPConnection -> com.domen.e.u:
    org.jivesoftware.smack.tcp.XMPPTCPConnection mXmppConnection -> c
    org.jivesoftware.smackx.ping.PingManager mPingManager -> d
    org.jivesoftware.smack.packet.Packet packetReady -> e
    android.content.Context context -> f
    android.content.SharedPreferences account -> g
    java.lang.Object loginLock -> a
    boolean isLogin -> b
    org.jivesoftware.smack.tcp.XMPPTCPConnection getInstance() -> a
    void sendPacket(android.content.Context,org.jivesoftware.smack.packet.Packet) -> a
    boolean Connection() -> b
    void destroyConnection() -> c
    org.jivesoftware.smack.tcp.XMPPTCPConnection access$0() -> d
    void access$1(org.jivesoftware.smackx.ping.PingManager) -> a
    android.content.Context access$2() -> e
    void access$3(android.content.SharedPreferences) -> a
    android.content.SharedPreferences access$4() -> f
    org.jivesoftware.smack.packet.Packet access$5() -> g
com.domen.tools.MXMPPConnection$Login -> com.domen.e.v:
    java.lang.String[] param -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.domen.tools.StrictLineReader -> com.domen.e.w:
    java.io.InputStream in -> a
    java.nio.charset.Charset charset -> b
    byte[] buf -> c
    int pos -> d
    int end -> e
    void close() -> close
    java.lang.String readLine() -> a
    boolean hasUnterminatedLine() -> b
    void fillBuf() -> c
    java.nio.charset.Charset access$0(com.domen.tools.StrictLineReader) -> a
com.domen.tools.StrictLineReader$1 -> com.domen.e.x:
    com.domen.tools.StrictLineReader this$0 -> a
    java.lang.String toString() -> toString
com.domen.tools.TopicDatabaseOpenHelper -> com.domen.e.y:
    com.domen.tools.TopicDatabaseOpenHelper mInstance -> a
    android.database.sqlite.SQLiteDatabase mDb -> b
    java.util.concurrent.Semaphore semp -> c
    com.domen.tools.TopicDatabaseOpenHelper getInstance(android.content.Context) -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void updateTopics(java.util.ArrayList,java.lang.String) -> a
    android.database.sqlite.SQLiteDatabase access$0() -> a
    java.util.concurrent.Semaphore access$1() -> b
    com.domen.tools.TopicDatabaseOpenHelper access$2() -> c
    void access$3(android.database.sqlite.SQLiteDatabase) -> a
com.domen.tools.TopicDatabaseOpenHelper$1 -> com.domen.e.z:
    void run() -> run
com.domen.tools.TopicDatabaseOpenHelper$TopicsLoader -> com.domen.e.aa:
    int id -> a
    android.database.Cursor loadInBackground() -> a
    java.lang.Object loadInBackground() -> loadInBackground
com.novell.sasl.client.DigestChallenge -> com.a.a.a.a:
    java.util.ArrayList m_realms -> a
    java.lang.String m_nonce -> b
    int m_qop -> c
    boolean m_staleFlag -> d
    int m_maxBuf -> e
    java.lang.String m_characterSet -> f
    java.lang.String m_algorithm -> g
    int m_cipherOptions -> h
    void checkSemantics(com.novell.sasl.client.DirectiveList) -> a
    void handleNonce(com.novell.sasl.client.ParsedDirective) -> a
    void handleRealm(com.novell.sasl.client.ParsedDirective) -> b
    void handleQop(com.novell.sasl.client.ParsedDirective) -> c
    void handleMaxbuf(com.novell.sasl.client.ParsedDirective) -> d
    void handleCharset(com.novell.sasl.client.ParsedDirective) -> e
    void handleAlgorithm(com.novell.sasl.client.ParsedDirective) -> f
    void handleCipher(com.novell.sasl.client.ParsedDirective) -> g
    void handleStale(com.novell.sasl.client.ParsedDirective) -> h
    java.util.ArrayList getRealms() -> a
    java.lang.String getNonce() -> b
    int getQop() -> c
    java.lang.String getAlgorithm() -> d
com.novell.sasl.client.DigestMD5SaslClient -> com.a.a.a.b:
    java.lang.String m_authorizationId -> a
    java.lang.String m_protocol -> b
    java.lang.String m_serverName -> c
    java.util.Map m_props -> d
    org.apache.harmony.javax.security.auth.callback.CallbackHandler m_cbh -> e
    int m_state -> f
    java.lang.String m_qopValue -> g
    char[] m_HA1 -> h
    java.lang.String m_digestURI -> i
    com.novell.sasl.client.DigestChallenge m_dc -> j
    java.lang.String m_clientNonce -> k
    java.lang.String m_realm -> l
    java.lang.String m_name -> m
    org.apache.harmony.javax.security.sasl.SaslClient getClient(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
    boolean hasInitialResponse() -> a
    byte[] evaluateChallenge(byte[]) -> a
    char[] convertToHex(byte[]) -> b
    char[] DigestCalcHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    char[] DigestCalcResponse(char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    java.lang.String createDigestResponse(byte[]) -> d
    boolean checkServerResponseAuth(byte[]) -> c
    char getHexChar(byte) -> a
    java.lang.String getClientNonce() -> b
com.novell.sasl.client.DirectiveList -> com.a.a.a.c:
    int m_curPos -> a
    int m_errorPos -> b
    java.lang.String m_directives -> c
    int m_state -> d
    java.util.ArrayList m_directiveList -> e
    int m_scanStart -> f
    void parseDirectives() -> a
    boolean isValidTokenChar(char) -> a
    boolean isWhiteSpace(char) -> b
    void addDirective(java.lang.String,boolean) -> a
    java.util.Iterator getIterator() -> b
com.novell.sasl.client.ExternalSaslClient -> com.a.a.a.d:
    java.lang.String m_authorizationId -> a
    java.lang.String m_protocol -> b
    java.lang.String m_serverName -> c
    java.util.Map m_props -> d
    org.apache.harmony.javax.security.auth.callback.CallbackHandler m_cbh -> e
    int m_state -> f
    org.apache.harmony.javax.security.sasl.SaslClient getClient(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
    boolean hasInitialResponse() -> a
    byte[] evaluateChallenge(byte[]) -> a
com.novell.sasl.client.ParsedDirective -> com.a.a.a.e:
    int m_valueType -> a
    java.lang.String m_name -> b
    java.lang.String m_value -> c
    java.lang.String getValue() -> a
    java.lang.String getName() -> b
com.novell.sasl.client.ResponseAuth -> com.a.a.a.f:
    java.lang.String m_responseValue -> a
    void checkSemantics(com.novell.sasl.client.DirectiveList) -> a
    java.lang.String getResponseValue() -> a
com.novell.sasl.client.TokenParser -> com.a.a.a.g:
    int m_curPos -> a
    int m_scanStart -> b
    int m_state -> c
    java.lang.String m_tokens -> d
    java.lang.String parseToken() -> a
    boolean isValidTokenChar(char) -> a
    boolean isWhiteSpace(char) -> b
com.pkmmte.circularimageview.CircularImageView -> com.pkmmte.circularimageview.CircularImageView:
    boolean hasBorder -> a
    boolean hasSelector -> b
    boolean isSelected -> c
    int borderWidth -> d
    int canvasSize -> e
    int selectorStrokeWidth -> f
    android.graphics.BitmapShader shader -> g
    android.graphics.Bitmap image -> h
    android.graphics.Paint paint -> i
    android.graphics.Paint paintBorder -> j
    android.graphics.Paint paintSelectorBorder -> k
    android.graphics.ColorFilter selectorFilter -> l
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setBorderWidth(int) -> setBorderWidth
    void setBorderColor(int) -> setBorderColor
    void setSelectorColor(int) -> setSelectorColor
    void setSelectorStrokeWidth(int) -> setSelectorStrokeWidth
    void setSelectorStrokeColor(int) -> setSelectorStrokeColor
    void addShadow() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void invalidate(android.graphics.Rect) -> invalidate
    void invalidate(int,int,int,int) -> invalidate
    void invalidate() -> invalidate
    void onMeasure(int,int) -> onMeasure
    int measureWidth(int) -> a
    int measureHeight(int) -> b
    android.graphics.Bitmap drawableToBitmap(android.graphics.drawable.Drawable) -> a
    void refreshBitmapShader() -> b
    boolean isSelected() -> isSelected
com.pkmmte.circularimageview.R -> com.pkmmte.circularimageview.a:
com.pkmmte.circularimageview.R$attr -> com.pkmmte.circularimageview.b:
    int border -> border
    int border_color -> border_color
    int border_width -> border_width
    int circularImageViewStyle -> circularImageViewStyle
    int selector -> selector
    int selector_color -> selector_color
    int selector_stroke_color -> selector_stroke_color
    int selector_stroke_width -> selector_stroke_width
    int shadow -> shadow
com.pkmmte.circularimageview.R$styleable -> com.pkmmte.circularimageview.c:
    int[] CircularImageView -> CircularImageView
    int CircularImageView_border -> CircularImageView_border
    int CircularImageView_border_color -> CircularImageView_border_color
    int CircularImageView_border_width -> CircularImageView_border_width
    int CircularImageView_selector -> CircularImageView_selector
    int CircularImageView_selector_color -> CircularImageView_selector_color
    int CircularImageView_selector_stroke_color -> CircularImageView_selector_stroke_color
    int CircularImageView_selector_stroke_width -> CircularImageView_selector_stroke_width
    int CircularImageView_shadow -> CircularImageView_shadow
    int[] CustomCircularImageViewTheme -> CustomCircularImageViewTheme
    int CustomCircularImageViewTheme_circularImageViewStyle -> CustomCircularImageViewTheme_circularImageViewStyle
de.measite.smack.AndroidDebugger -> de.measite.smack.AndroidDebugger:
    boolean printInterpreted -> printInterpreted
    org.jivesoftware.smack.XMPPConnection connection -> connection
    org.jivesoftware.smack.PacketListener listener -> listener
    org.jivesoftware.smack.ConnectionListener connListener -> connListener
    java.io.Writer writer -> writer
    java.io.Reader reader -> reader
    org.jivesoftware.smack.util.ReaderListener readerListener -> readerListener
    org.jivesoftware.smack.util.WriterListener writerListener -> writerListener
    void createDebug() -> createDebug
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
    org.jivesoftware.smack.XMPPConnection access$000(de.measite.smack.AndroidDebugger) -> access$000
de.measite.smack.AndroidDebugger$1 -> de.measite.smack.a:
    de.measite.smack.AndroidDebugger this$0 -> a
    void read(java.lang.String) -> read
de.measite.smack.AndroidDebugger$2 -> de.measite.smack.b:
    de.measite.smack.AndroidDebugger this$0 -> a
    void write(java.lang.String) -> write
de.measite.smack.AndroidDebugger$3 -> de.measite.smack.c:
    de.measite.smack.AndroidDebugger this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
de.measite.smack.AndroidDebugger$4 -> de.measite.smack.d:
    de.measite.smack.AndroidDebugger this$0 -> a
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
de.measite.smack.Sasl -> de.measite.smack.e:
    java.util.Enumeration getSaslClientFactories() -> a
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
de.measite.smack.SaslClientFactory -> de.measite.smack.f:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
    java.lang.String[] getMechanismNames(java.util.Map) -> a
org.apache.harmony.javax.security.auth.callback.Callback -> org.a.a.a.a.a.a.a:
org.apache.harmony.javax.security.auth.callback.CallbackHandler -> org.a.a.a.a.a.a.b:
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
org.apache.harmony.javax.security.auth.callback.ChoiceCallback -> org.a.a.a.a.a.a.c:
    int defaultChoice -> a
    java.lang.String prompt -> b
    boolean multipleSelectionsAllowed -> c
    java.lang.String[] choices -> d
    int[] selections -> e
    void setChoices(java.lang.String[]) -> a
    void setPrompt(java.lang.String) -> a
    void setDefaultChoice(int) -> a
    java.lang.String[] getChoices() -> a
    int[] getSelectedIndexes() -> b
org.apache.harmony.javax.security.auth.callback.NameCallback -> org.a.a.a.a.a.a.d:
    java.lang.String prompt -> a
    java.lang.String defaultName -> b
    java.lang.String inputName -> c
    void setPrompt(java.lang.String) -> b
    void setDefaultName(java.lang.String) -> c
    java.lang.String getDefaultName() -> a
    void setName(java.lang.String) -> a
    java.lang.String getName() -> b
org.apache.harmony.javax.security.auth.callback.PasswordCallback -> org.a.a.a.a.a.a.e:
    java.lang.String prompt -> b
    boolean echoOn -> a
    char[] inputPassword -> c
    void setPrompt(java.lang.String) -> a
    void setPassword(char[]) -> a
    char[] getPassword() -> a
    void clearPassword() -> b
org.apache.harmony.javax.security.auth.callback.TextInputCallback -> org.a.a.a.a.a.a.f:
    java.lang.String defaultText -> a
    java.lang.String prompt -> b
    java.lang.String inputText -> c
    void setPrompt(java.lang.String) -> b
    void setDefaultText(java.lang.String) -> c
    java.lang.String getDefaultText() -> a
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
org.apache.harmony.javax.security.auth.callback.UnsupportedCallbackException -> org.a.a.a.a.a.a.g:
    org.apache.harmony.javax.security.auth.callback.Callback callback -> a
org.apache.harmony.javax.security.sasl.RealmCallback -> org.a.a.a.a.b.a:
org.apache.harmony.javax.security.sasl.RealmChoiceCallback -> org.a.a.a.a.b.b:
org.apache.harmony.javax.security.sasl.SaslClient -> org.a.a.a.a.b.c:
    byte[] evaluateChallenge(byte[]) -> a
    boolean hasInitialResponse() -> a
org.apache.harmony.javax.security.sasl.SaslException -> org.a.a.a.a.b.d:
    java.lang.Throwable _exception -> a
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.String toString() -> toString
org.apache.qpid.management.common.sasl.PlainSaslClient -> org.a.b.a.a.a.a:
    boolean completed -> a
    org.apache.harmony.javax.security.auth.callback.CallbackHandler cbh -> b
    java.lang.String authorizationID -> c
    java.lang.String authenticationID -> d
    byte[] password -> e
    byte SEPARATOR -> f
    byte[] evaluateChallenge(byte[]) -> a
    boolean hasInitialResponse() -> a
    void clearPassword() -> b
    void finalize() -> finalize
    java.lang.Object[] getUserInfo() -> c
org.jivesoftware.smack.AbstractConnectionListener -> org.jivesoftware.smack.AbstractConnectionListener:
    void connected(org.jivesoftware.smack.XMPPConnection) -> connected
    void authenticated(org.jivesoftware.smack.XMPPConnection) -> authenticated
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smack.AccountManager -> org.jivesoftware.smack.AccountManager:
    java.util.Map INSTANCES -> INSTANCES
    org.jivesoftware.smack.packet.Registration info -> info
    boolean accountCreationSupported -> accountCreationSupported
    org.jivesoftware.smack.AccountManager getInstance(org.jivesoftware.smack.XMPPConnection) -> getInstance
    void setSupportsAccountCreation(boolean) -> setSupportsAccountCreation
    boolean supportsAccountCreation() -> supportsAccountCreation
    java.util.Collection getAccountAttributes() -> getAccountAttributes
    java.lang.String getAccountAttribute(java.lang.String) -> getAccountAttribute
    java.lang.String getAccountInstructions() -> getAccountInstructions
    void createAccount(java.lang.String,java.lang.String) -> createAccount
    void createAccount(java.lang.String,java.lang.String,java.util.Map) -> createAccount
    void changePassword(java.lang.String) -> changePassword
    void deleteAccount() -> deleteAccount
    void getRegistrationInfo() -> getRegistrationInfo
org.jivesoftware.smack.Chat -> org.jivesoftware.smack.Chat:
    org.jivesoftware.smack.ChatManager chatManager -> chatManager
    java.lang.String threadID -> threadID
    java.lang.String participant -> participant
    java.util.Set listeners -> listeners
    java.lang.String getThreadID() -> getThreadID
    java.lang.String getParticipant() -> getParticipant
    void sendMessage(java.lang.String) -> sendMessage
    void sendMessage(org.jivesoftware.smack.packet.Message) -> sendMessage
    void addMessageListener(org.jivesoftware.smack.MessageListener) -> addMessageListener
    void removeMessageListener(org.jivesoftware.smack.MessageListener) -> removeMessageListener
    void close() -> close
    java.util.Collection getListeners() -> getListeners
    org.jivesoftware.smack.PacketCollector createCollector() -> createCollector
    void deliver(org.jivesoftware.smack.packet.Message) -> deliver
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.jivesoftware.smack.ChatManager -> org.jivesoftware.smack.ChatManager:
    java.util.Map INSTANCES -> INSTANCES
    boolean defaultIsNormalInclude -> defaultIsNormalInclude
    org.jivesoftware.smack.ChatManager$MatchMode defaultMatchMode -> defaultMatchMode
    boolean normalIncluded -> normalIncluded
    org.jivesoftware.smack.ChatManager$MatchMode matchMode -> matchMode
    java.util.Map threadChats -> threadChats
    java.util.Map jidChats -> jidChats
    java.util.Map baseJidChats -> baseJidChats
    java.util.Set chatManagerListeners -> chatManagerListeners
    java.util.Map interceptors -> interceptors
    org.jivesoftware.smack.ChatManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> getInstanceFor
    boolean isNormalIncluded() -> isNormalIncluded
    void setNormalIncluded(boolean) -> setNormalIncluded
    org.jivesoftware.smack.ChatManager$MatchMode getMatchMode() -> getMatchMode
    void setMatchMode(org.jivesoftware.smack.ChatManager$MatchMode) -> setMatchMode
    org.jivesoftware.smack.Chat createChat(java.lang.String,org.jivesoftware.smack.MessageListener) -> createChat
    org.jivesoftware.smack.Chat createChat(java.lang.String,java.lang.String,org.jivesoftware.smack.MessageListener) -> createChat
    org.jivesoftware.smack.Chat createChat(java.lang.String,java.lang.String,boolean) -> createChat
    void closeChat(org.jivesoftware.smack.Chat) -> closeChat
    org.jivesoftware.smack.Chat createChat(org.jivesoftware.smack.packet.Message) -> createChat
    org.jivesoftware.smack.Chat getUserChat(java.lang.String) -> getUserChat
    org.jivesoftware.smack.Chat getThreadChat(java.lang.String) -> getThreadChat
    void addChatListener(org.jivesoftware.smack.ChatManagerListener) -> addChatListener
    void removeChatListener(org.jivesoftware.smack.ChatManagerListener) -> removeChatListener
    java.util.Collection getChatListeners() -> getChatListeners
    void deliverMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> deliverMessage
    void sendMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> sendMessage
    org.jivesoftware.smack.PacketCollector createPacketCollector(org.jivesoftware.smack.Chat) -> createPacketCollector
    void addOutgoingMessageInterceptor(org.jivesoftware.smack.PacketInterceptor) -> addOutgoingMessageInterceptor
    void addOutgoingMessageInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addOutgoingMessageInterceptor
    java.lang.String nextID() -> nextID
    void setDefaultMatchMode(org.jivesoftware.smack.ChatManager$MatchMode) -> setDefaultMatchMode
    void setDefaultIsNormalIncluded(boolean) -> setDefaultIsNormalIncluded
    boolean access$000(org.jivesoftware.smack.ChatManager) -> access$000
    org.jivesoftware.smack.Chat access$100(org.jivesoftware.smack.ChatManager,java.lang.String) -> access$100
    org.jivesoftware.smack.Chat access$200(org.jivesoftware.smack.ChatManager,org.jivesoftware.smack.packet.Message) -> access$200
    void access$300(org.jivesoftware.smack.ChatManager,org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> access$300
org.jivesoftware.smack.ChatManager$1 -> org.jivesoftware.smack.ChatManager$1:
    org.jivesoftware.smack.ChatManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.ChatManager$2 -> org.jivesoftware.smack.ChatManager$2:
    org.jivesoftware.smack.ChatManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.ChatManager$MatchMode -> org.jivesoftware.smack.ChatManager$MatchMode:
    org.jivesoftware.smack.ChatManager$MatchMode NONE -> NONE
    org.jivesoftware.smack.ChatManager$MatchMode SUPPLIED_JID -> SUPPLIED_JID
    org.jivesoftware.smack.ChatManager$MatchMode BARE_JID -> BARE_JID
    org.jivesoftware.smack.ChatManager$MatchMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.ChatManager$MatchMode[] values() -> values
    org.jivesoftware.smack.ChatManager$MatchMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.ChatManagerListener -> org.jivesoftware.smack.ChatManagerListener:
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
org.jivesoftware.smack.ConnectionConfiguration -> org.jivesoftware.smack.ConnectionConfiguration:
    java.lang.String serviceName -> serviceName
    java.util.List hostAddresses -> hostAddresses
    java.lang.String keystorePath -> keystorePath
    java.lang.String keystoreType -> keystoreType
    java.lang.String pkcs11Library -> pkcs11Library
    javax.net.ssl.SSLContext customSSLContext -> customSSLContext
    boolean compressionEnabled -> compressionEnabled
    org.apache.harmony.javax.security.auth.callback.CallbackHandler callbackHandler -> callbackHandler
    boolean debuggerEnabled -> debuggerEnabled
    boolean reconnectionAllowed -> reconnectionAllowed
    javax.net.SocketFactory socketFactory -> socketFactory
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String resource -> resource
    boolean sendPresence -> sendPresence
    boolean rosterLoadedAtLogin -> rosterLoadedAtLogin
    boolean legacySessionDisabled -> legacySessionDisabled
    boolean useDnsSrvRr -> useDnsSrvRr
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode securityMode -> securityMode
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    org.jivesoftware.smack.RosterStore rosterStore -> rosterStore
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    void init(java.lang.String,org.jivesoftware.smack.proxy.ProxyInfo) -> init
    void setServiceName(java.lang.String) -> setServiceName
    java.lang.String getServiceName() -> getServiceName
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode() -> getSecurityMode
    void setSecurityMode(org.jivesoftware.smack.ConnectionConfiguration$SecurityMode) -> setSecurityMode
    java.lang.String getKeystorePath() -> getKeystorePath
    void setKeystorePath(java.lang.String) -> setKeystorePath
    java.lang.String getKeystoreType() -> getKeystoreType
    void setKeystoreType(java.lang.String) -> setKeystoreType
    java.lang.String getPKCS11Library() -> getPKCS11Library
    void setPKCS11Library(java.lang.String) -> setPKCS11Library
    javax.net.ssl.SSLContext getCustomSSLContext() -> getCustomSSLContext
    void setCustomSSLContext(javax.net.ssl.SSLContext) -> setCustomSSLContext
    void setHostnameVerifier(javax.net.ssl.HostnameVerifier) -> setHostnameVerifier
    javax.net.ssl.HostnameVerifier getHostnameVerifier() -> getHostnameVerifier
    boolean isCompressionEnabled() -> isCompressionEnabled
    void setCompressionEnabled(boolean) -> setCompressionEnabled
    boolean isDebuggerEnabled() -> isDebuggerEnabled
    void setDebuggerEnabled(boolean) -> setDebuggerEnabled
    void setReconnectionAllowed(boolean) -> setReconnectionAllowed
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    void setSocketFactory(javax.net.SocketFactory) -> setSocketFactory
    void setSendPresence(boolean) -> setSendPresence
    boolean isRosterLoadedAtLogin() -> isRosterLoadedAtLogin
    void setRosterLoadedAtLogin(boolean) -> setRosterLoadedAtLogin
    boolean isLegacySessionDisabled() -> isLegacySessionDisabled
    void setLegacySessionDisabled(boolean) -> setLegacySessionDisabled
    org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler() -> getCallbackHandler
    void setCallbackHandler(org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> setCallbackHandler
    javax.net.SocketFactory getSocketFactory() -> getSocketFactory
    java.util.List getHostAddresses() -> getHostAddresses
    void setRosterStore(org.jivesoftware.smack.RosterStore) -> setRosterStore
    org.jivesoftware.smack.RosterStore getRosterStore() -> getRosterStore
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    java.lang.String getResource() -> getResource
    boolean isSendPresence() -> isSendPresence
    void setLoginInfo(java.lang.String,java.lang.String,java.lang.String) -> setLoginInfo
    void maybeResolveDns() -> maybeResolveDns
    void initHostAddresses(java.lang.String,int) -> initHostAddresses
org.jivesoftware.smack.ConnectionConfiguration$SecurityMode -> org.jivesoftware.smack.ConnectionConfiguration$SecurityMode:
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode required -> required
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode enabled -> enabled
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled -> disabled
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode[] values() -> values
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.ConnectionCreationListener -> org.jivesoftware.smack.ConnectionCreationListener:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smack.ConnectionListener -> org.jivesoftware.smack.ConnectionListener:
    void connected(org.jivesoftware.smack.XMPPConnection) -> connected
    void authenticated(org.jivesoftware.smack.XMPPConnection) -> authenticated
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
org.jivesoftware.smack.DirectoryRosterStore -> org.jivesoftware.smack.DirectoryRosterStore:
    java.io.File fileDir -> fileDir
    java.lang.String ENTRY_PREFIX -> ENTRY_PREFIX
    java.lang.String VERSION_FILE_NAME -> VERSION_FILE_NAME
    java.lang.String STORE_ID -> STORE_ID
    java.util.logging.Logger LOGGER -> LOGGER
    java.io.FileFilter rosterDirFilter -> rosterDirFilter
    org.jivesoftware.smack.DirectoryRosterStore init(java.io.File) -> init
    org.jivesoftware.smack.DirectoryRosterStore open(java.io.File) -> open
    java.io.File getVersionFile() -> getVersionFile
    java.util.List getEntries() -> getEntries
    org.jivesoftware.smack.packet.RosterPacket$Item getEntry(java.lang.String) -> getEntry
    java.lang.String getRosterVersion() -> getRosterVersion
    boolean setRosterVersion(java.lang.String) -> setRosterVersion
    boolean addEntry(org.jivesoftware.smack.packet.RosterPacket$Item,java.lang.String) -> addEntry
    boolean removeEntry(java.lang.String,java.lang.String) -> removeEntry
    boolean resetEntries(java.util.Collection,java.lang.String) -> resetEntries
    org.jivesoftware.smack.packet.RosterPacket$Item readEntry(java.io.File) -> readEntry
    boolean addEntryRaw(org.jivesoftware.smack.packet.RosterPacket$Item) -> addEntryRaw
    java.io.File getBareJidFile(java.lang.String) -> getBareJidFile
    void log(java.lang.String) -> log
    java.util.Collection getEntries() -> getEntries
org.jivesoftware.smack.DirectoryRosterStore$1 -> org.jivesoftware.smack.DirectoryRosterStore$1:
    boolean accept(java.io.File) -> accept
org.jivesoftware.smack.Manager -> org.jivesoftware.smack.Manager:
    java.lang.ref.WeakReference weakConnection -> weakConnection
    org.jivesoftware.smack.XMPPConnection connection() -> connection
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
org.jivesoftware.smack.MessageListener -> org.jivesoftware.smack.MessageListener:
    void processMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> processMessage
org.jivesoftware.smack.PacketCollector -> org.jivesoftware.smack.PacketCollector:
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    java.util.concurrent.ArrayBlockingQueue resultQueue -> resultQueue
    org.jivesoftware.smack.XMPPConnection connection -> connection
    boolean cancelled -> cancelled
    void cancel() -> cancel
    org.jivesoftware.smack.filter.PacketFilter getPacketFilter() -> getPacketFilter
    org.jivesoftware.smack.packet.Packet pollResult() -> pollResult
    org.jivesoftware.smack.packet.Packet nextResultBlockForever() -> nextResultBlockForever
    org.jivesoftware.smack.packet.Packet nextResult() -> nextResult
    org.jivesoftware.smack.packet.Packet nextResult(long) -> nextResult
    org.jivesoftware.smack.packet.Packet nextResultOrThrow() -> nextResultOrThrow
    org.jivesoftware.smack.packet.Packet nextResultOrThrow(long) -> nextResultOrThrow
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PacketInterceptor -> org.jivesoftware.smack.PacketInterceptor:
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smack.PacketListener -> org.jivesoftware.smack.PacketListener:
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.ReconnectionManager -> org.jivesoftware.smack.ReconnectionManager:
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.XMPPConnection connection -> connection
    java.lang.Thread reconnectionThread -> reconnectionThread
    int randomBase -> randomBase
    boolean done -> done
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    void reconnect() -> reconnect
    void notifyReconnectionFailed(java.lang.Exception) -> notifyReconnectionFailed
    void notifyAttemptToReconnectIn(int) -> notifyAttemptToReconnectIn
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    int access$100(org.jivesoftware.smack.ReconnectionManager) -> access$100
    boolean access$200(org.jivesoftware.smack.ReconnectionManager) -> access$200
    java.util.logging.Logger access$300() -> access$300
    org.jivesoftware.smack.XMPPConnection access$400(org.jivesoftware.smack.ReconnectionManager) -> access$400
org.jivesoftware.smack.ReconnectionManager$1 -> org.jivesoftware.smack.ReconnectionManager$1:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smack.ReconnectionManager$2 -> org.jivesoftware.smack.ReconnectionManager$2:
    int attempts -> attempts
    org.jivesoftware.smack.ReconnectionManager this$0 -> this$0
    int timeDelay() -> timeDelay
    void run() -> run
org.jivesoftware.smack.Roster -> org.jivesoftware.smack.Roster:
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.filter.PacketFilter ROSTER_PUSH_FILTER -> ROSTER_PUSH_FILTER
    org.jivesoftware.smack.filter.PacketFilter PRESENCE_PACKET_FILTER -> PRESENCE_PACKET_FILTER
    org.jivesoftware.smack.Roster$SubscriptionMode defaultSubscriptionMode -> defaultSubscriptionMode
    org.jivesoftware.smack.XMPPConnection connection -> connection
    org.jivesoftware.smack.RosterStore rosterStore -> rosterStore
    java.util.Map groups -> groups
    java.util.Map entries -> entries
    java.util.List unfiledEntries -> unfiledEntries
    java.util.List rosterListeners -> rosterListeners
    java.util.Map presenceMap -> presenceMap
    boolean rosterInitialized -> rosterInitialized
    org.jivesoftware.smack.Roster$PresencePacketListener presencePacketListener -> presencePacketListener
    org.jivesoftware.smack.Roster$SubscriptionMode subscriptionMode -> subscriptionMode
    org.jivesoftware.smack.Roster$SubscriptionMode getDefaultSubscriptionMode() -> getDefaultSubscriptionMode
    void setDefaultSubscriptionMode(org.jivesoftware.smack.Roster$SubscriptionMode) -> setDefaultSubscriptionMode
    org.jivesoftware.smack.Roster$SubscriptionMode getSubscriptionMode() -> getSubscriptionMode
    void setSubscriptionMode(org.jivesoftware.smack.Roster$SubscriptionMode) -> setSubscriptionMode
    void reload() -> reload
    void addRosterListener(org.jivesoftware.smack.RosterListener) -> addRosterListener
    void removeRosterListener(org.jivesoftware.smack.RosterListener) -> removeRosterListener
    org.jivesoftware.smack.RosterGroup createGroup(java.lang.String) -> createGroup
    void createEntry(java.lang.String,java.lang.String,java.lang.String[]) -> createEntry
    void removeEntry(org.jivesoftware.smack.RosterEntry) -> removeEntry
    int getEntryCount() -> getEntryCount
    java.util.Collection getEntries() -> getEntries
    int getUnfiledEntryCount() -> getUnfiledEntryCount
    java.util.Collection getUnfiledEntries() -> getUnfiledEntries
    org.jivesoftware.smack.RosterEntry getEntry(java.lang.String) -> getEntry
    boolean contains(java.lang.String) -> contains
    org.jivesoftware.smack.RosterGroup getGroup(java.lang.String) -> getGroup
    int getGroupCount() -> getGroupCount
    java.util.Collection getGroups() -> getGroups
    org.jivesoftware.smack.packet.Presence getPresence(java.lang.String) -> getPresence
    org.jivesoftware.smack.packet.Presence getPresenceResource(java.lang.String) -> getPresenceResource
    java.util.List getPresences(java.lang.String) -> getPresences
    java.lang.String getPresenceMapKey(java.lang.String) -> getPresenceMapKey
    void setOfflinePresences() -> setOfflinePresences
    void fireRosterChangedEvent(java.util.Collection,java.util.Collection,java.util.Collection) -> fireRosterChangedEvent
    void fireRosterPresenceEvent(org.jivesoftware.smack.packet.Presence) -> fireRosterPresenceEvent
    void addUpdateEntry(java.util.Collection,java.util.Collection,java.util.Collection,org.jivesoftware.smack.packet.RosterPacket$Item,org.jivesoftware.smack.RosterEntry) -> addUpdateEntry
    void deleteEntry(java.util.Collection,org.jivesoftware.smack.RosterEntry) -> deleteEntry
    void removeEmptyGroups() -> removeEmptyGroups
    boolean hasValidSubscriptionType(org.jivesoftware.smack.packet.RosterPacket$Item) -> hasValidSubscriptionType
    void access$200(org.jivesoftware.smack.Roster) -> access$200
    java.util.logging.Logger access$300() -> access$300
    java.lang.String access$500(org.jivesoftware.smack.Roster,java.lang.String) -> access$500
    java.util.Map access$600(org.jivesoftware.smack.Roster) -> access$600
    java.util.Map access$700(org.jivesoftware.smack.Roster) -> access$700
    void access$800(org.jivesoftware.smack.Roster,org.jivesoftware.smack.packet.Presence) -> access$800
    org.jivesoftware.smack.Roster$SubscriptionMode access$900(org.jivesoftware.smack.Roster) -> access$900
    org.jivesoftware.smack.XMPPConnection access$1000(org.jivesoftware.smack.Roster) -> access$1000
    boolean access$1100(org.jivesoftware.smack.packet.RosterPacket$Item) -> access$1100
    void access$1200(org.jivesoftware.smack.Roster,java.util.Collection,java.util.Collection,java.util.Collection,org.jivesoftware.smack.packet.RosterPacket$Item,org.jivesoftware.smack.RosterEntry) -> access$1200
    void access$1300(org.jivesoftware.smack.Roster,java.util.Collection,org.jivesoftware.smack.RosterEntry) -> access$1300
    org.jivesoftware.smack.RosterStore access$1400(org.jivesoftware.smack.Roster) -> access$1400
    void access$1500(org.jivesoftware.smack.Roster) -> access$1500
    void access$1600(org.jivesoftware.smack.Roster,java.util.Collection,java.util.Collection,java.util.Collection) -> access$1600
org.jivesoftware.smack.Roster$1 -> org.jivesoftware.smack.Roster$1:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
org.jivesoftware.smack.Roster$2 -> org.jivesoftware.smack.Roster$2:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void authenticated(org.jivesoftware.smack.XMPPConnection) -> authenticated
org.jivesoftware.smack.Roster$3 -> org.jivesoftware.smack.Roster$3:
    int[] $SwitchMap$org$jivesoftware$smack$Roster$SubscriptionMode -> $SwitchMap$org$jivesoftware$smack$Roster$SubscriptionMode
org.jivesoftware.smack.Roster$PresencePacketListener -> org.jivesoftware.smack.Roster$PresencePacketListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$RosterPushListener -> org.jivesoftware.smack.Roster$RosterPushListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$RosterResultListener -> org.jivesoftware.smack.Roster$RosterResultListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$SubscriptionMode -> org.jivesoftware.smack.Roster$SubscriptionMode:
    org.jivesoftware.smack.Roster$SubscriptionMode accept_all -> accept_all
    org.jivesoftware.smack.Roster$SubscriptionMode reject_all -> reject_all
    org.jivesoftware.smack.Roster$SubscriptionMode manual -> manual
    org.jivesoftware.smack.Roster$SubscriptionMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.Roster$SubscriptionMode[] values() -> values
    org.jivesoftware.smack.Roster$SubscriptionMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.RosterEntry -> org.jivesoftware.smack.RosterEntry:
    java.lang.String user -> user
    java.lang.String name -> name
    org.jivesoftware.smack.packet.RosterPacket$ItemType type -> type
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus status -> status
    org.jivesoftware.smack.Roster roster -> roster
    org.jivesoftware.smack.XMPPConnection connection -> connection
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void updateState(java.lang.String,org.jivesoftware.smack.packet.RosterPacket$ItemType,org.jivesoftware.smack.packet.RosterPacket$ItemStatus) -> updateState
    java.util.Collection getGroups() -> getGroups
    org.jivesoftware.smack.packet.RosterPacket$ItemType getType() -> getType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus getStatus() -> getStatus
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equalsDeep(java.lang.Object) -> equalsDeep
    org.jivesoftware.smack.packet.RosterPacket$Item toRosterItem(org.jivesoftware.smack.RosterEntry) -> toRosterItem
org.jivesoftware.smack.RosterGroup -> org.jivesoftware.smack.RosterGroup:
    java.lang.String name -> name
    org.jivesoftware.smack.XMPPConnection connection -> connection
    java.util.Set entries -> entries
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getEntryCount() -> getEntryCount
    java.util.Collection getEntries() -> getEntries
    org.jivesoftware.smack.RosterEntry getEntry(java.lang.String) -> getEntry
    boolean contains(org.jivesoftware.smack.RosterEntry) -> contains
    boolean contains(java.lang.String) -> contains
    void addEntry(org.jivesoftware.smack.RosterEntry) -> addEntry
    void removeEntry(org.jivesoftware.smack.RosterEntry) -> removeEntry
    void addEntryLocal(org.jivesoftware.smack.RosterEntry) -> addEntryLocal
    void removeEntryLocal(org.jivesoftware.smack.RosterEntry) -> removeEntryLocal
org.jivesoftware.smack.RosterListener -> org.jivesoftware.smack.RosterListener:
    void entriesAdded(java.util.Collection) -> entriesAdded
    void entriesUpdated(java.util.Collection) -> entriesUpdated
    void entriesDeleted(java.util.Collection) -> entriesDeleted
    void presenceChanged(org.jivesoftware.smack.packet.Presence) -> presenceChanged
org.jivesoftware.smack.RosterStore -> org.jivesoftware.smack.RosterStore:
    java.util.Collection getEntries() -> getEntries
    org.jivesoftware.smack.packet.RosterPacket$Item getEntry(java.lang.String) -> getEntry
    java.lang.String getRosterVersion() -> getRosterVersion
    boolean addEntry(org.jivesoftware.smack.packet.RosterPacket$Item,java.lang.String) -> addEntry
    boolean resetEntries(java.util.Collection,java.lang.String) -> resetEntries
    boolean removeEntry(java.lang.String,java.lang.String) -> removeEntry
org.jivesoftware.smack.SASLAuthentication -> org.jivesoftware.smack.SASLAuthentication:
    java.util.Map implementedMechanisms -> implementedMechanisms
    java.util.List mechanismsPreferences -> mechanismsPreferences
    org.jivesoftware.smack.XMPPConnection connection -> connection
    java.util.Collection serverMechanisms -> serverMechanisms
    org.jivesoftware.smack.sasl.SASLMechanism currentMechanism -> currentMechanism
    boolean saslNegotiated -> saslNegotiated
    org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure saslFailure -> saslFailure
    void registerSASLMechanism(java.lang.String,java.lang.Class) -> registerSASLMechanism
    void unregisterSASLMechanism(java.lang.String) -> unregisterSASLMechanism
    void supportSASLMechanism(java.lang.String) -> supportSASLMechanism
    void supportSASLMechanism(java.lang.String,int) -> supportSASLMechanism
    void unsupportSASLMechanism(java.lang.String) -> unsupportSASLMechanism
    java.util.List getRegisterSASLMechanisms() -> getRegisterSASLMechanisms
    boolean hasAnonymousAuthentication() -> hasAnonymousAuthentication
    boolean hasNonAnonymousAuthentication() -> hasNonAnonymousAuthentication
    void authenticate(java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticateAnonymously() -> authenticateAnonymously
    void setAvailableSASLMethods(java.util.Collection) -> setAvailableSASLMethods
    boolean isAuthenticated() -> isAuthenticated
    void challengeReceived(java.lang.String) -> challengeReceived
    void authenticated() -> authenticated
    void authenticationFailed(org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure) -> authenticationFailed
    void send(org.jivesoftware.smack.packet.Packet) -> send
    void init() -> init
org.jivesoftware.smack.SmackAndroid -> org.jivesoftware.smack.SmackAndroid:
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.SmackAndroid sSmackAndroid -> sSmackAndroid
    android.content.BroadcastReceiver mConnectivityChangedReceiver -> mConnectivityChangedReceiver
    boolean receiverRegistered -> receiverRegistered
    android.content.Context mCtx -> mCtx
    org.jivesoftware.smack.SmackAndroid init(android.content.Context) -> init
    void onDestroy() -> onDestroy
    void maybeRegisterReceiver() -> maybeRegisterReceiver
    java.util.logging.Logger access$000() -> access$000
org.jivesoftware.smack.SmackAndroid$1 -> org.jivesoftware.smack.SmackAndroid$1:
    org.jivesoftware.smack.SmackAndroid this$0 -> this$0
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.jivesoftware.smack.SmackAndroid$1$1 -> org.jivesoftware.smack.SmackAndroid$1$1:
    org.jivesoftware.smack.SmackAndroid$1 this$1 -> this$1
    void run() -> run
org.jivesoftware.smack.SmackConfiguration -> org.jivesoftware.smack.SmackConfiguration:
    java.lang.String SMACK_VERSION -> SMACK_VERSION
    java.lang.String DEFAULT_CONFIG_FILE -> DEFAULT_CONFIG_FILE
    java.util.logging.Logger LOGGER -> LOGGER
    int defaultPacketReplyTimeout -> defaultPacketReplyTimeout
    int packetCollectorSize -> packetCollectorSize
    java.util.List defaultMechs -> defaultMechs
    java.util.Set disabledSmackClasses -> disabledSmackClasses
    java.util.List compressionHandlers -> compressionHandlers
    boolean DEBUG_ENABLED -> DEBUG_ENABLED
    org.jivesoftware.smack.parsing.ParsingExceptionCallback defaultCallback -> defaultCallback
    javax.net.ssl.HostnameVerifier defaultHostnameVerififer -> defaultHostnameVerififer
    java.lang.String getVersion() -> getVersion
    int getDefaultPacketReplyTimeout() -> getDefaultPacketReplyTimeout
    void setDefaultPacketReplyTimeout(int) -> setDefaultPacketReplyTimeout
    int getPacketCollectorSize() -> getPacketCollectorSize
    void setPacketCollectorSize(int) -> setPacketCollectorSize
    void addSaslMech(java.lang.String) -> addSaslMech
    void addSaslMechs(java.util.Collection) -> addSaslMechs
    void removeSaslMech(java.lang.String) -> removeSaslMech
    void removeSaslMechs(java.util.Collection) -> removeSaslMechs
    java.util.List getSaslMechs() -> getSaslMechs
    void setDefaultParsingExceptionCallback(org.jivesoftware.smack.parsing.ParsingExceptionCallback) -> setDefaultParsingExceptionCallback
    org.jivesoftware.smack.parsing.ParsingExceptionCallback getDefaultParsingExceptionCallback() -> getDefaultParsingExceptionCallback
    void addCompressionHandler(org.jivesoftware.smack.compression.XMPPInputOutputStream) -> addCompressionHandler
    java.util.List getCompresionHandlers() -> getCompresionHandlers
    void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier) -> setDefaultHostnameVerifier
    javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier() -> getDefaultHostnameVerifier
    void processConfigFile(java.io.InputStream,java.util.Collection) -> processConfigFile
    void processConfigFile(java.io.InputStream,java.util.Collection,java.lang.ClassLoader) -> processConfigFile
    void parseClassesToLoad(org.xmlpull.v1.XmlPullParser,boolean,java.util.Collection,java.lang.ClassLoader) -> parseClassesToLoad
    void loadSmackClass(java.lang.String,boolean,java.lang.ClassLoader) -> loadSmackClass
org.jivesoftware.smack.SmackException -> org.jivesoftware.smack.SmackException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$AlreadyLoggedInException -> org.jivesoftware.smack.SmackException$AlreadyLoggedInException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$ConnectionException -> org.jivesoftware.smack.SmackException$ConnectionException:
    long serialVersionUID -> serialVersionUID
    java.util.List failedAddresses -> failedAddresses
    java.util.List getFailedAddresses() -> getFailedAddresses
org.jivesoftware.smack.SmackException$FeatureNotSupportedException -> org.jivesoftware.smack.SmackException$FeatureNotSupportedException:
    long serialVersionUID -> serialVersionUID
    java.lang.String feature -> feature
    java.lang.String jid -> jid
    java.lang.String getFeature() -> getFeature
    java.lang.String getJid() -> getJid
org.jivesoftware.smack.SmackException$IllegalStateChangeException -> org.jivesoftware.smack.SmackException$IllegalStateChangeException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$NoResponseException -> org.jivesoftware.smack.SmackException$NoResponseException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$NotConnectedException -> org.jivesoftware.smack.SmackException$NotConnectedException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$NotLoggedInException -> org.jivesoftware.smack.SmackException$NotLoggedInException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$ResourceBindingNotOfferedException -> org.jivesoftware.smack.SmackException$ResourceBindingNotOfferedException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.SmackException$SecurityRequiredException -> org.jivesoftware.smack.SmackException$SecurityRequiredException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.XMPPConnection -> org.jivesoftware.smack.XMPPConnection:
    java.util.logging.Logger LOGGER -> LOGGER
    java.util.concurrent.atomic.AtomicInteger connectionCounter -> connectionCounter
    java.util.Set connectionEstablishedListeners -> connectionEstablishedListeners
    java.util.Collection connectionListeners -> connectionListeners
    java.util.Collection collectors -> collectors
    java.util.Map recvListeners -> recvListeners
    java.util.Map sendListeners -> sendListeners
    java.util.Map interceptors -> interceptors
    long packetReplyTimeout -> packetReplyTimeout
    org.jivesoftware.smack.debugger.SmackDebugger debugger -> debugger
    java.io.Reader reader -> reader
    java.io.Writer writer -> writer
    org.jivesoftware.smack.SASLAuthentication saslAuthentication -> saslAuthentication
    int connectionCounterValue -> connectionCounterValue
    org.jivesoftware.smack.ConnectionConfiguration config -> config
    java.lang.String serviceCapsNode -> serviceCapsNode
    org.jivesoftware.smack.XMPPConnection$FromMode fromMode -> fromMode
    boolean rosterVersioningSupported -> rosterVersioningSupported
    org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler -> compressionHandler
    java.util.concurrent.ScheduledExecutorService executorService -> executorService
    org.jivesoftware.smack.Roster roster -> roster
    java.lang.String host -> host
    int port -> port
    java.util.concurrent.atomic.AtomicBoolean bindingRequired -> bindingRequired
    boolean sessionSupported -> sessionSupported
    java.io.IOException connectionException -> connectionException
    boolean authenticated -> authenticated
    boolean wasAuthenticated -> wasAuthenticated
    org.jivesoftware.smack.ConnectionConfiguration getConfiguration() -> getConfiguration
    java.lang.String getServiceName() -> getServiceName
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getUser() -> getUser
    java.lang.String getConnectionID() -> getConnectionID
    boolean isConnected() -> isConnected
    boolean isAuthenticated() -> isAuthenticated
    boolean isAnonymous() -> isAnonymous
    boolean isSecureConnection() -> isSecureConnection
    void sendPacketInternal(org.jivesoftware.smack.packet.Packet) -> sendPacketInternal
    boolean isUsingCompression() -> isUsingCompression
    void connect() -> connect
    void connectInternal() -> connectInternal
    void login(java.lang.String,java.lang.String) -> login
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    void serverRequiresBinding() -> serverRequiresBinding
    void serverSupportsSession() -> serverSupportsSession
    java.lang.String bindResourceAndEstablishSession(java.lang.String) -> bindResourceAndEstablishSession
    void setConnectionException(java.io.IOException) -> setConnectionException
    void throwConnectionExceptionOrNoResponse() -> throwConnectionExceptionOrNoResponse
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    void setServiceName(java.lang.String) -> setServiceName
    void setLoginInfo(java.lang.String,java.lang.String,java.lang.String) -> setLoginInfo
    void serverSupportsAccountCreation() -> serverSupportsAccountCreation
    void maybeResolveDns() -> maybeResolveDns
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    org.jivesoftware.smack.Roster getRoster() -> getRoster
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    void disconnect() -> disconnect
    void disconnect(org.jivesoftware.smack.packet.Presence) -> disconnect
    void shutdown() -> shutdown
    void addConnectionCreationListener(org.jivesoftware.smack.ConnectionCreationListener) -> addConnectionCreationListener
    void removeConnectionCreationListener(org.jivesoftware.smack.ConnectionCreationListener) -> removeConnectionCreationListener
    java.util.Collection getConnectionCreationListeners() -> getConnectionCreationListeners
    void addConnectionListener(org.jivesoftware.smack.ConnectionListener) -> addConnectionListener
    void removeConnectionListener(org.jivesoftware.smack.ConnectionListener) -> removeConnectionListener
    java.util.Collection getConnectionListeners() -> getConnectionListeners
    org.jivesoftware.smack.PacketCollector createPacketCollectorAndSend(org.jivesoftware.smack.packet.IQ) -> createPacketCollectorAndSend
    org.jivesoftware.smack.PacketCollector createPacketCollector(org.jivesoftware.smack.filter.PacketFilter) -> createPacketCollector
    void removePacketCollector(org.jivesoftware.smack.PacketCollector) -> removePacketCollector
    java.util.Collection getPacketCollectors() -> getPacketCollectors
    void addPacketListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketListener
    void removePacketListener(org.jivesoftware.smack.PacketListener) -> removePacketListener
    java.util.Map getPacketListeners() -> getPacketListeners
    void addPacketSendingListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketSendingListener
    void removePacketSendingListener(org.jivesoftware.smack.PacketListener) -> removePacketSendingListener
    java.util.Map getPacketSendingListeners() -> getPacketSendingListeners
    void firePacketSendingListeners(org.jivesoftware.smack.packet.Packet) -> firePacketSendingListeners
    void addPacketInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addPacketInterceptor
    void removePacketInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePacketInterceptor
    java.util.Map getPacketInterceptors() -> getPacketInterceptors
    void firePacketInterceptors(org.jivesoftware.smack.packet.Packet) -> firePacketInterceptors
    void initDebugger() -> initDebugger
    void setServiceCapsNode(java.lang.String) -> setServiceCapsNode
    java.lang.String getServiceCapsNode() -> getServiceCapsNode
    boolean isRosterVersioningSupported() -> isRosterVersioningSupported
    void setRosterVersioningSupported() -> setRosterVersioningSupported
    long getPacketReplyTimeout() -> getPacketReplyTimeout
    void setPacketReplyTimeout(long) -> setPacketReplyTimeout
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void setWasAuthenticated(boolean) -> setWasAuthenticated
    void callConnectionConnectedListener() -> callConnectionConnectedListener
    void callConnectionAuthenticatedListener() -> callConnectionAuthenticatedListener
    void callConnectionClosedListener() -> callConnectionClosedListener
    void callConnectionClosedOnErrorListener(java.lang.Exception) -> callConnectionClosedOnErrorListener
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    int getConnectionCounter() -> getConnectionCounter
    void setFromMode(org.jivesoftware.smack.XMPPConnection$FromMode) -> setFromMode
    org.jivesoftware.smack.XMPPConnection$FromMode getFromMode() -> getFromMode
    void finalize() -> finalize
    java.util.logging.Logger access$100() -> access$100
org.jivesoftware.smack.XMPPConnection$1 -> org.jivesoftware.smack.XMPPConnection$1:
    int[] $SwitchMap$org$jivesoftware$smack$XMPPConnection$FromMode -> $SwitchMap$org$jivesoftware$smack$XMPPConnection$FromMode
org.jivesoftware.smack.XMPPConnection$FromMode -> org.jivesoftware.smack.XMPPConnection$FromMode:
    org.jivesoftware.smack.XMPPConnection$FromMode UNCHANGED -> UNCHANGED
    org.jivesoftware.smack.XMPPConnection$FromMode OMITTED -> OMITTED
    org.jivesoftware.smack.XMPPConnection$FromMode USER -> USER
    org.jivesoftware.smack.XMPPConnection$FromMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.XMPPConnection$FromMode[] values() -> values
    org.jivesoftware.smack.XMPPConnection$FromMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.XMPPConnection$InterceptorWrapper -> org.jivesoftware.smack.XMPPConnection$InterceptorWrapper:
    org.jivesoftware.smack.PacketInterceptor packetInterceptor -> packetInterceptor
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    boolean equals(java.lang.Object) -> equals
    void notifyListener(org.jivesoftware.smack.packet.Packet) -> notifyListener
org.jivesoftware.smack.XMPPConnection$ListenerNotification -> org.jivesoftware.smack.XMPPConnection$ListenerNotification:
    org.jivesoftware.smack.packet.Packet packet -> packet
    org.jivesoftware.smack.XMPPConnection this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.XMPPConnection$ListenerWrapper -> org.jivesoftware.smack.XMPPConnection$ListenerWrapper:
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    void notifyListener(org.jivesoftware.smack.packet.Packet) -> notifyListener
org.jivesoftware.smack.XMPPConnection$SmackExecutorThreadFactory -> org.jivesoftware.smack.XMPPConnection$SmackExecutorThreadFactory:
    int connectionCounterValue -> connectionCounterValue
    int count -> count
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.jivesoftware.smack.XMPPException -> org.jivesoftware.smack.XMPPException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.XMPPException$StreamErrorException -> org.jivesoftware.smack.XMPPException$StreamErrorException:
    long serialVersionUID -> serialVersionUID
    org.jivesoftware.smack.packet.StreamError streamError -> streamError
    org.jivesoftware.smack.packet.StreamError getStreamError() -> getStreamError
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.jivesoftware.smack.XMPPException$XMPPErrorException -> org.jivesoftware.smack.XMPPException$XMPPErrorException:
    long serialVersionUID -> serialVersionUID
    org.jivesoftware.smack.packet.XMPPError error -> error
    org.jivesoftware.smack.packet.XMPPError getXMPPError() -> getXMPPError
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream -> org.jivesoftware.smack.compression.Java7ZlibInputOutputStream:
    java.lang.reflect.Method method -> method
    boolean supported -> supported
    int compressionLevel -> compressionLevel
    int SYNC_FLUSH_INT -> SYNC_FLUSH_INT
    int FULL_FLUSH_INT -> FULL_FLUSH_INT
    boolean isSupported() -> isSupported
    java.io.InputStream getInputStream(java.io.InputStream) -> getInputStream
    java.io.OutputStream getOutputStream(java.io.OutputStream) -> getOutputStream
    boolean access$000() -> access$000
    java.lang.reflect.Method access$100() -> access$100
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$1 -> org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$1:
    org.jivesoftware.smack.compression.Java7ZlibInputOutputStream this$0 -> this$0
    int available() -> available
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$2 -> org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$2:
    int val$flushMethodInt -> val$flushMethodInt
    org.jivesoftware.smack.compression.Java7ZlibInputOutputStream this$0 -> this$0
    void flush() -> flush
org.jivesoftware.smack.compression.XMPPInputOutputStream -> org.jivesoftware.smack.compression.XMPPInputOutputStream:
    org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod flushMethod -> flushMethod
    java.lang.String compressionMethod -> compressionMethod
    void setFlushMethod(org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod) -> setFlushMethod
    java.lang.String getCompressionMethod() -> getCompressionMethod
    boolean isSupported() -> isSupported
    java.io.InputStream getInputStream(java.io.InputStream) -> getInputStream
    java.io.OutputStream getOutputStream(java.io.OutputStream) -> getOutputStream
org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod -> org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod:
    org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod FULL_FLUSH -> FULL_FLUSH
    org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod SYNC_FLUSH -> SYNC_FLUSH
    org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod[] $VALUES -> $VALUES
    org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod[] values() -> values
    org.jivesoftware.smack.compression.XMPPInputOutputStream$FlushMethod valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.debugger.ConsoleDebugger -> org.jivesoftware.smack.debugger.ConsoleDebugger:
    boolean printInterpreted -> printInterpreted
    java.text.SimpleDateFormat dateFormatter -> dateFormatter
    org.jivesoftware.smack.XMPPConnection connection -> connection
    org.jivesoftware.smack.PacketListener listener -> listener
    org.jivesoftware.smack.ConnectionListener connListener -> connListener
    java.io.Writer writer -> writer
    java.io.Reader reader -> reader
    org.jivesoftware.smack.util.ReaderListener readerListener -> readerListener
    org.jivesoftware.smack.util.WriterListener writerListener -> writerListener
    void createDebug() -> createDebug
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
    java.text.SimpleDateFormat access$000(org.jivesoftware.smack.debugger.ConsoleDebugger) -> access$000
    org.jivesoftware.smack.XMPPConnection access$100(org.jivesoftware.smack.debugger.ConsoleDebugger) -> access$100
org.jivesoftware.smack.debugger.ConsoleDebugger$1 -> org.jivesoftware.smack.debugger.ConsoleDebugger$1:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void read(java.lang.String) -> read
org.jivesoftware.smack.debugger.ConsoleDebugger$2 -> org.jivesoftware.smack.debugger.ConsoleDebugger$2:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void write(java.lang.String) -> write
org.jivesoftware.smack.debugger.ConsoleDebugger$3 -> org.jivesoftware.smack.debugger.ConsoleDebugger$3:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.debugger.ConsoleDebugger$4 -> org.jivesoftware.smack.debugger.ConsoleDebugger$4:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void connected(org.jivesoftware.smack.XMPPConnection) -> connected
    void authenticated(org.jivesoftware.smack.XMPPConnection) -> authenticated
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
org.jivesoftware.smack.debugger.SmackDebugger -> org.jivesoftware.smack.debugger.SmackDebugger:
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
org.jivesoftware.smack.filter.AndFilter -> org.jivesoftware.smack.filter.AndFilter:
    java.util.List filters -> filters
    void addFilter(org.jivesoftware.smack.filter.PacketFilter) -> addFilter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.FromMatchesFilter -> org.jivesoftware.smack.filter.FromMatchesFilter:
    java.lang.String address -> address
    boolean matchBareJID -> matchBareJID
    org.jivesoftware.smack.filter.FromMatchesFilter create(java.lang.String) -> create
    org.jivesoftware.smack.filter.FromMatchesFilter createBare(java.lang.String) -> createBare
    org.jivesoftware.smack.filter.FromMatchesFilter createFull(java.lang.String) -> createFull
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.IQReplyFilter -> org.jivesoftware.smack.filter.IQReplyFilter:
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.filter.PacketFilter iqAndIdFilter -> iqAndIdFilter
    org.jivesoftware.smack.filter.OrFilter fromFilter -> fromFilter
    java.lang.String to -> to
    java.lang.String local -> local
    java.lang.String server -> server
    java.lang.String packetId -> packetId
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.IQTypeFilter -> org.jivesoftware.smack.filter.IQTypeFilter:
    org.jivesoftware.smack.packet.IQ$Type type -> type
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.MessageTypeFilter -> org.jivesoftware.smack.filter.MessageTypeFilter:
    org.jivesoftware.smack.packet.Message$Type type -> type
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.NotFilter -> org.jivesoftware.smack.filter.NotFilter:
    org.jivesoftware.smack.filter.PacketFilter filter -> filter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.OrFilter -> org.jivesoftware.smack.filter.OrFilter:
    java.util.List filters -> filters
    void addFilter(org.jivesoftware.smack.filter.PacketFilter) -> addFilter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.PacketExtensionFilter -> org.jivesoftware.smack.filter.PacketExtensionFilter:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.PacketFilter -> org.jivesoftware.smack.filter.PacketFilter:
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.PacketIDFilter -> org.jivesoftware.smack.filter.PacketIDFilter:
    java.lang.String packetID -> packetID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.PacketTypeFilter -> org.jivesoftware.smack.filter.PacketTypeFilter:
    org.jivesoftware.smack.filter.PacketTypeFilter PRESENCE -> PRESENCE
    org.jivesoftware.smack.filter.PacketTypeFilter MESSAGE -> MESSAGE
    java.lang.Class packetType -> packetType
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.ThreadFilter -> org.jivesoftware.smack.filter.ThreadFilter:
    java.lang.String thread -> thread
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.initializer.SmackAndOsgiInitializer -> org.jivesoftware.smack.initializer.SmackAndOsgiInitializer:
    void activate() -> activate
org.jivesoftware.smack.initializer.SmackInitializer -> org.jivesoftware.smack.initializer.SmackInitializer:
    java.util.List initialize() -> initialize
    java.util.List initialize(java.lang.ClassLoader) -> initialize
org.jivesoftware.smack.initializer.UrlInitializer -> org.jivesoftware.smack.initializer.UrlInitializer:
    java.util.logging.Logger LOGGER -> LOGGER
    java.util.List initialize() -> initialize
    java.util.List initialize(java.lang.ClassLoader) -> initialize
    java.lang.String getProvidersUrl() -> getProvidersUrl
    java.lang.String getConfigUrl() -> getConfigUrl
org.jivesoftware.smack.initializer.VmArgInitializer -> org.jivesoftware.smack.initializer.VmArgInitializer:
    java.lang.String getFilePath() -> getFilePath
    java.util.List initialize() -> initialize
org.jivesoftware.smack.initializer.experimental.ExperimentalInitializer -> org.jivesoftware.smack.initializer.experimental.ExperimentalInitializer:
    java.lang.String getProvidersUrl() -> getProvidersUrl
    java.lang.String getConfigUrl() -> getConfigUrl
org.jivesoftware.smack.initializer.extensions.ExtensionsInitializer -> org.jivesoftware.smack.initializer.extensions.ExtensionsInitializer:
    java.lang.String getProvidersUrl() -> getProvidersUrl
    java.lang.String getConfigUrl() -> getConfigUrl
org.jivesoftware.smack.packet.Bind -> org.jivesoftware.smack.packet.Bind:
    java.lang.String resource -> resource
    java.lang.String jid -> jid
    java.lang.String getResource() -> getResource
    void setResource(java.lang.String) -> setResource
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.DefaultPacketExtension -> org.jivesoftware.smack.packet.DefaultPacketExtension:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    java.util.Map map -> map
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.CharSequence toXML() -> toXML
    java.util.Collection getNames() -> getNames
    java.lang.String getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,java.lang.String) -> setValue
org.jivesoftware.smack.packet.IQ -> org.jivesoftware.smack.packet.IQ:
    org.jivesoftware.smack.packet.IQ$Type type -> type
    org.jivesoftware.smack.packet.IQ$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.IQ$Type) -> setType
    java.lang.CharSequence toXML() -> toXML
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
    org.jivesoftware.smack.packet.IQ createResultIQ(org.jivesoftware.smack.packet.IQ) -> createResultIQ
    org.jivesoftware.smack.packet.IQ createErrorResponse(org.jivesoftware.smack.packet.IQ,org.jivesoftware.smack.packet.XMPPError) -> createErrorResponse
org.jivesoftware.smack.packet.IQ$1 -> org.jivesoftware.smack.packet.IQ$1:
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.IQ$2 -> org.jivesoftware.smack.packet.IQ$2:
    org.jivesoftware.smack.packet.IQ val$request -> val$request
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.IQ$Type -> org.jivesoftware.smack.packet.IQ$Type:
    org.jivesoftware.smack.packet.IQ$Type GET -> GET
    org.jivesoftware.smack.packet.IQ$Type SET -> SET
    org.jivesoftware.smack.packet.IQ$Type RESULT -> RESULT
    org.jivesoftware.smack.packet.IQ$Type ERROR -> ERROR
    java.lang.String value -> value
    org.jivesoftware.smack.packet.IQ$Type fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.Message -> org.jivesoftware.smack.packet.Message:
    org.jivesoftware.smack.packet.Message$Type type -> type
    java.lang.String thread -> thread
    java.lang.String language -> language
    java.util.Set subjects -> subjects
    java.util.Set bodies -> bodies
    org.jivesoftware.smack.packet.Message$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.Message$Type) -> setType
    java.lang.String getSubject() -> getSubject
    java.lang.String getSubject(java.lang.String) -> getSubject
    org.jivesoftware.smack.packet.Message$Subject getMessageSubject(java.lang.String) -> getMessageSubject
    java.util.Collection getSubjects() -> getSubjects
    void setSubject(java.lang.String) -> setSubject
    org.jivesoftware.smack.packet.Message$Subject addSubject(java.lang.String,java.lang.String) -> addSubject
    boolean removeSubject(java.lang.String) -> removeSubject
    boolean removeSubject(org.jivesoftware.smack.packet.Message$Subject) -> removeSubject
    java.util.Collection getSubjectLanguages() -> getSubjectLanguages
    java.lang.String getBody() -> getBody
    java.lang.String getBody(java.lang.String) -> getBody
    org.jivesoftware.smack.packet.Message$Body getMessageBody(java.lang.String) -> getMessageBody
    java.util.Collection getBodies() -> getBodies
    void setBody(java.lang.String) -> setBody
    org.jivesoftware.smack.packet.Message$Body addBody(java.lang.String,java.lang.String) -> addBody
    boolean removeBody(java.lang.String) -> removeBody
    boolean removeBody(org.jivesoftware.smack.packet.Message$Body) -> removeBody
    java.util.Collection getBodyLanguages() -> getBodyLanguages
    java.lang.String getThread() -> getThread
    void setThread(java.lang.String) -> setThread
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String determineLanguage(java.lang.String) -> determineLanguage
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.packet.Message$1 -> org.jivesoftware.smack.packet.Message$1:
org.jivesoftware.smack.packet.Message$Body -> org.jivesoftware.smack.packet.Message$Body:
    java.lang.String message -> message
    java.lang.String language -> language
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getMessage() -> getMessage
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String access$300(org.jivesoftware.smack.packet.Message$Body) -> access$300
    java.lang.String access$400(org.jivesoftware.smack.packet.Message$Body) -> access$400
org.jivesoftware.smack.packet.Message$Subject -> org.jivesoftware.smack.packet.Message$Subject:
    java.lang.String subject -> subject
    java.lang.String language -> language
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getSubject() -> getSubject
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String access$000(org.jivesoftware.smack.packet.Message$Subject) -> access$000
    java.lang.String access$100(org.jivesoftware.smack.packet.Message$Subject) -> access$100
org.jivesoftware.smack.packet.Message$Type -> org.jivesoftware.smack.packet.Message$Type:
    org.jivesoftware.smack.packet.Message$Type normal -> normal
    org.jivesoftware.smack.packet.Message$Type chat -> chat
    org.jivesoftware.smack.packet.Message$Type groupchat -> groupchat
    org.jivesoftware.smack.packet.Message$Type headline -> headline
    org.jivesoftware.smack.packet.Message$Type error -> error
    org.jivesoftware.smack.packet.Message$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Message$Type[] values() -> values
    org.jivesoftware.smack.packet.Message$Type valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smack.packet.Message$Type fromString(java.lang.String) -> fromString
org.jivesoftware.smack.packet.Packet -> org.jivesoftware.smack.packet.Packet:
    java.lang.String DEFAULT_LANGUAGE -> DEFAULT_LANGUAGE
    java.lang.String DEFAULT_XML_NS -> DEFAULT_XML_NS
    java.lang.String ID_NOT_AVAILABLE -> ID_NOT_AVAILABLE
    java.lang.String prefix -> prefix
    long id -> id
    java.lang.String xmlns -> xmlns
    java.lang.String packetID -> packetID
    java.lang.String to -> to
    java.lang.String from -> from
    java.util.List packetExtensions -> packetExtensions
    org.jivesoftware.smack.packet.XMPPError error -> error
    java.lang.String nextID() -> nextID
    void setDefaultXmlns(java.lang.String) -> setDefaultXmlns
    java.lang.String getPacketID() -> getPacketID
    void setPacketID(java.lang.String) -> setPacketID
    java.lang.String getTo() -> getTo
    void setTo(java.lang.String) -> setTo
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    org.jivesoftware.smack.packet.XMPPError getError() -> getError
    void setError(org.jivesoftware.smack.packet.XMPPError) -> setError
    java.util.Collection getExtensions() -> getExtensions
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String) -> getExtension
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String,java.lang.String) -> getExtension
    void addExtension(org.jivesoftware.smack.packet.PacketExtension) -> addExtension
    void addExtensions(java.util.Collection) -> addExtensions
    void removeExtension(org.jivesoftware.smack.packet.PacketExtension) -> removeExtension
    java.lang.CharSequence toXML() -> toXML
    java.lang.CharSequence getExtensionsXML() -> getExtensionsXML
    java.lang.String getXmlns() -> getXmlns
    java.lang.String getDefaultLanguage() -> getDefaultLanguage
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void addCommonAttributes(org.jivesoftware.smack.util.XmlStringBuilder) -> addCommonAttributes
org.jivesoftware.smack.packet.PacketExtension -> org.jivesoftware.smack.packet.PacketExtension:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.packet.Presence -> org.jivesoftware.smack.packet.Presence:
    org.jivesoftware.smack.packet.Presence$Type type -> type
    java.lang.String status -> status
    int priority -> priority
    org.jivesoftware.smack.packet.Presence$Mode mode -> mode
    java.lang.String language -> language
    boolean isAvailable() -> isAvailable
    boolean isAway() -> isAway
    org.jivesoftware.smack.packet.Presence$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.Presence$Type) -> setType
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    int getPriority() -> getPriority
    void setPriority(int) -> setPriority
    org.jivesoftware.smack.packet.Presence$Mode getMode() -> getMode
    void setMode(org.jivesoftware.smack.packet.Presence$Mode) -> setMode
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> toXML
    java.lang.String toString() -> toString
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.packet.Presence$Mode -> org.jivesoftware.smack.packet.Presence$Mode:
    org.jivesoftware.smack.packet.Presence$Mode chat -> chat
    org.jivesoftware.smack.packet.Presence$Mode available -> available
    org.jivesoftware.smack.packet.Presence$Mode away -> away
    org.jivesoftware.smack.packet.Presence$Mode xa -> xa
    org.jivesoftware.smack.packet.Presence$Mode dnd -> dnd
    org.jivesoftware.smack.packet.Presence$Mode[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Presence$Mode[] values() -> values
    org.jivesoftware.smack.packet.Presence$Mode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Presence$Type -> org.jivesoftware.smack.packet.Presence$Type:
    org.jivesoftware.smack.packet.Presence$Type available -> available
    org.jivesoftware.smack.packet.Presence$Type unavailable -> unavailable
    org.jivesoftware.smack.packet.Presence$Type subscribe -> subscribe
    org.jivesoftware.smack.packet.Presence$Type subscribed -> subscribed
    org.jivesoftware.smack.packet.Presence$Type unsubscribe -> unsubscribe
    org.jivesoftware.smack.packet.Presence$Type unsubscribed -> unsubscribed
    org.jivesoftware.smack.packet.Presence$Type error -> error
    org.jivesoftware.smack.packet.Presence$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Presence$Type[] values() -> values
    org.jivesoftware.smack.packet.Presence$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Registration -> org.jivesoftware.smack.packet.Registration:
    java.lang.String instructions -> instructions
    java.util.Map attributes -> attributes
    java.lang.String getInstructions() -> getInstructions
    void setInstructions(java.lang.String) -> setInstructions
    java.util.Map getAttributes() -> getAttributes
    void setAttributes(java.util.Map) -> setAttributes
    org.jivesoftware.smack.util.XmlStringBuilder getChildElementXML() -> getChildElementXML
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.RosterPacket -> org.jivesoftware.smack.packet.RosterPacket:
    java.util.List rosterItems -> rosterItems
    java.lang.String rosterVersion -> rosterVersion
    void addRosterItem(org.jivesoftware.smack.packet.RosterPacket$Item) -> addRosterItem
    int getRosterItemCount() -> getRosterItemCount
    java.util.Collection getRosterItems() -> getRosterItems
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
org.jivesoftware.smack.packet.RosterPacket$Item -> org.jivesoftware.smack.packet.RosterPacket$Item:
    java.lang.String user -> user
    java.lang.String name -> name
    org.jivesoftware.smack.packet.RosterPacket$ItemType itemType -> itemType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus itemStatus -> itemStatus
    java.util.Set groupNames -> groupNames
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    org.jivesoftware.smack.packet.RosterPacket$ItemType getItemType() -> getItemType
    void setItemType(org.jivesoftware.smack.packet.RosterPacket$ItemType) -> setItemType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus getItemStatus() -> getItemStatus
    void setItemStatus(org.jivesoftware.smack.packet.RosterPacket$ItemStatus) -> setItemStatus
    java.util.Set getGroupNames() -> getGroupNames
    void addGroupName(java.lang.String) -> addGroupName
    void removeGroupName(java.lang.String) -> removeGroupName
    java.lang.String toXML() -> toXML
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.jivesoftware.smack.packet.RosterPacket$ItemStatus -> org.jivesoftware.smack.packet.RosterPacket$ItemStatus:
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus subscribe -> subscribe
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus unsubscribe -> unsubscribe
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus SUBSCRIPTION_PENDING -> SUBSCRIPTION_PENDING
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus UNSUBSCRIPTION_PENDING -> UNSUBSCRIPTION_PENDING
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus[] values() -> values
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus fromString(java.lang.String) -> fromString
org.jivesoftware.smack.packet.RosterPacket$ItemType -> org.jivesoftware.smack.packet.RosterPacket$ItemType:
    org.jivesoftware.smack.packet.RosterPacket$ItemType none -> none
    org.jivesoftware.smack.packet.RosterPacket$ItemType to -> to
    org.jivesoftware.smack.packet.RosterPacket$ItemType from -> from
    org.jivesoftware.smack.packet.RosterPacket$ItemType both -> both
    org.jivesoftware.smack.packet.RosterPacket$ItemType remove -> remove
    org.jivesoftware.smack.packet.RosterPacket$ItemType[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.RosterPacket$ItemType[] values() -> values
    org.jivesoftware.smack.packet.RosterPacket$ItemType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Session -> org.jivesoftware.smack.packet.Session:
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.StreamError -> org.jivesoftware.smack.packet.StreamError:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String code -> code
    java.lang.String text -> text
    java.lang.String getCode() -> getCode
    java.lang.String getText() -> getText
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.XMPPError -> org.jivesoftware.smack.packet.XMPPError:
    org.jivesoftware.smack.packet.XMPPError$Type type -> type
    java.lang.String condition -> condition
    java.lang.String message -> message
    java.util.List applicationExtensions -> applicationExtensions
    java.lang.String getCondition() -> getCondition
    org.jivesoftware.smack.packet.XMPPError$Type getType() -> getType
    java.lang.String getMessage() -> getMessage
    java.lang.CharSequence toXML() -> toXML
    java.lang.String toString() -> toString
    java.util.List getExtensions() -> getExtensions
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String,java.lang.String) -> getExtension
    void addExtension(org.jivesoftware.smack.packet.PacketExtension) -> addExtension
    void setExtension(java.util.List) -> setExtension
org.jivesoftware.smack.packet.XMPPError$Condition -> org.jivesoftware.smack.packet.XMPPError$Condition:
    org.jivesoftware.smack.packet.XMPPError$Condition internal_server_error -> internal_server_error
    org.jivesoftware.smack.packet.XMPPError$Condition forbidden -> forbidden
    org.jivesoftware.smack.packet.XMPPError$Condition bad_request -> bad_request
    org.jivesoftware.smack.packet.XMPPError$Condition conflict -> conflict
    org.jivesoftware.smack.packet.XMPPError$Condition feature_not_implemented -> feature_not_implemented
    org.jivesoftware.smack.packet.XMPPError$Condition gone -> gone
    org.jivesoftware.smack.packet.XMPPError$Condition item_not_found -> item_not_found
    org.jivesoftware.smack.packet.XMPPError$Condition jid_malformed -> jid_malformed
    org.jivesoftware.smack.packet.XMPPError$Condition not_acceptable -> not_acceptable
    org.jivesoftware.smack.packet.XMPPError$Condition not_allowed -> not_allowed
    org.jivesoftware.smack.packet.XMPPError$Condition not_authorized -> not_authorized
    org.jivesoftware.smack.packet.XMPPError$Condition payment_required -> payment_required
    org.jivesoftware.smack.packet.XMPPError$Condition recipient_unavailable -> recipient_unavailable
    org.jivesoftware.smack.packet.XMPPError$Condition redirect -> redirect
    org.jivesoftware.smack.packet.XMPPError$Condition registration_required -> registration_required
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_error -> remote_server_error
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_not_found -> remote_server_not_found
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_timeout -> remote_server_timeout
    org.jivesoftware.smack.packet.XMPPError$Condition resource_constraint -> resource_constraint
    org.jivesoftware.smack.packet.XMPPError$Condition service_unavailable -> service_unavailable
    org.jivesoftware.smack.packet.XMPPError$Condition subscription_required -> subscription_required
    org.jivesoftware.smack.packet.XMPPError$Condition undefined_condition -> undefined_condition
    org.jivesoftware.smack.packet.XMPPError$Condition unexpected_request -> unexpected_request
    org.jivesoftware.smack.packet.XMPPError$Condition request_timeout -> request_timeout
    java.lang.String value -> value
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    boolean equals(java.lang.CharSequence) -> equals
    int hashCode() -> hashCode
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String access$000(org.jivesoftware.smack.packet.XMPPError$Condition) -> access$000
org.jivesoftware.smack.packet.XMPPError$ErrorSpecification -> org.jivesoftware.smack.packet.XMPPError$ErrorSpecification:
    java.util.Map instances -> instances
    org.jivesoftware.smack.packet.XMPPError$Type type -> type
    org.jivesoftware.smack.packet.XMPPError$Condition condition -> condition
    org.jivesoftware.smack.packet.XMPPError$ErrorSpecification specFor(org.jivesoftware.smack.packet.XMPPError$Condition) -> specFor
    org.jivesoftware.smack.packet.XMPPError$Type getType() -> getType
org.jivesoftware.smack.packet.XMPPError$Type -> org.jivesoftware.smack.packet.XMPPError$Type:
    org.jivesoftware.smack.packet.XMPPError$Type WAIT -> WAIT
    org.jivesoftware.smack.packet.XMPPError$Type CANCEL -> CANCEL
    org.jivesoftware.smack.packet.XMPPError$Type MODIFY -> MODIFY
    org.jivesoftware.smack.packet.XMPPError$Type AUTH -> AUTH
    org.jivesoftware.smack.packet.XMPPError$Type CONTINUE -> CONTINUE
    org.jivesoftware.smack.packet.XMPPError$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.XMPPError$Type[] values() -> values
    org.jivesoftware.smack.packet.XMPPError$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.parsing.ExceptionLoggingCallback -> org.jivesoftware.smack.parsing.ExceptionLoggingCallback:
    java.util.logging.Logger LOGGER -> LOGGER
    void handleUnparsablePacket(org.jivesoftware.smack.parsing.UnparsablePacket) -> handleUnparsablePacket
org.jivesoftware.smack.parsing.ExceptionThrowingCallback -> org.jivesoftware.smack.parsing.ExceptionThrowingCallback:
    void handleUnparsablePacket(org.jivesoftware.smack.parsing.UnparsablePacket) -> handleUnparsablePacket
org.jivesoftware.smack.parsing.ParsingExceptionCallback -> org.jivesoftware.smack.parsing.ParsingExceptionCallback:
    void handleUnparsablePacket(org.jivesoftware.smack.parsing.UnparsablePacket) -> handleUnparsablePacket
org.jivesoftware.smack.parsing.UnparsablePacket -> org.jivesoftware.smack.parsing.UnparsablePacket:
    java.lang.String content -> content
    java.lang.Exception e -> e
    java.lang.Exception getParsingException() -> getParsingException
    java.lang.String getContent() -> getContent
org.jivesoftware.smack.provider.AbstractProviderInfo -> org.jivesoftware.smack.provider.AbstractProviderInfo:
    java.lang.String element -> element
    java.lang.String ns -> ns
    java.lang.Object provider -> provider
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.Object getProvider() -> getProvider
org.jivesoftware.smack.provider.EmbeddedExtensionProvider -> org.jivesoftware.smack.provider.EmbeddedExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smack.provider.ExtensionProviderInfo -> org.jivesoftware.smack.provider.ExtensionProviderInfo:
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
org.jivesoftware.smack.provider.IQProvider -> org.jivesoftware.smack.provider.IQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smack.provider.IQProviderInfo -> org.jivesoftware.smack.provider.IQProviderInfo:
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
org.jivesoftware.smack.provider.PacketExtensionProvider -> org.jivesoftware.smack.provider.PacketExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smack.provider.ProviderFileLoader -> org.jivesoftware.smack.provider.ProviderFileLoader:
    java.util.logging.Logger LOGGER -> LOGGER
    java.util.Collection iqProviders -> iqProviders
    java.util.Collection extProviders -> extProviders
    java.util.List exceptions -> exceptions
    java.util.Collection getIQProviderInfo() -> getIQProviderInfo
    java.util.Collection getExtensionProviderInfo() -> getExtensionProviderInfo
    java.util.List getLoadingExceptions() -> getLoadingExceptions
org.jivesoftware.smack.provider.ProviderLoader -> org.jivesoftware.smack.provider.ProviderLoader:
    java.util.Collection getIQProviderInfo() -> getIQProviderInfo
    java.util.Collection getExtensionProviderInfo() -> getExtensionProviderInfo
org.jivesoftware.smack.provider.ProviderManager -> org.jivesoftware.smack.provider.ProviderManager:
    java.util.Map extensionProviders -> extensionProviders
    java.util.Map iqProviders -> iqProviders
    void addLoader(org.jivesoftware.smack.provider.ProviderLoader) -> addLoader
    java.lang.Object getIQProvider(java.lang.String,java.lang.String) -> getIQProvider
    java.util.Collection getIQProviders() -> getIQProviders
    void addIQProvider(java.lang.String,java.lang.String,java.lang.Object) -> addIQProvider
    void removeIQProvider(java.lang.String,java.lang.String) -> removeIQProvider
    java.lang.Object getExtensionProvider(java.lang.String,java.lang.String) -> getExtensionProvider
    void addExtensionProvider(java.lang.String,java.lang.String,java.lang.Object) -> addExtensionProvider
    void removeExtensionProvider(java.lang.String,java.lang.String) -> removeExtensionProvider
    java.util.Collection getExtensionProviders() -> getExtensionProviders
    java.lang.String getProviderKey(java.lang.String,java.lang.String) -> getProviderKey
org.jivesoftware.smack.proxy.DirectSocketFactory -> org.jivesoftware.smack.proxy.DirectSocketFactory:
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
org.jivesoftware.smack.proxy.HTTPProxySocketFactory -> org.jivesoftware.smack.proxy.HTTPProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.util.regex.Pattern RESPONSE_PATTERN -> RESPONSE_PATTERN
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket httpProxifiedSocket(java.lang.String,int) -> httpProxifiedSocket
org.jivesoftware.smack.proxy.ProxyException -> org.jivesoftware.smack.proxy.ProxyException:
    long serialVersionUID -> serialVersionUID
org.jivesoftware.smack.proxy.ProxyInfo -> org.jivesoftware.smack.proxy.ProxyInfo:
    java.lang.String proxyAddress -> proxyAddress
    int proxyPort -> proxyPort
    java.lang.String proxyUsername -> proxyUsername
    java.lang.String proxyPassword -> proxyPassword
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType proxyType -> proxyType
    org.jivesoftware.smack.proxy.ProxyInfo forHttpProxy(java.lang.String,int,java.lang.String,java.lang.String) -> forHttpProxy
    org.jivesoftware.smack.proxy.ProxyInfo forSocks4Proxy(java.lang.String,int,java.lang.String,java.lang.String) -> forSocks4Proxy
    org.jivesoftware.smack.proxy.ProxyInfo forSocks5Proxy(java.lang.String,int,java.lang.String,java.lang.String) -> forSocks5Proxy
    org.jivesoftware.smack.proxy.ProxyInfo forNoProxy() -> forNoProxy
    org.jivesoftware.smack.proxy.ProxyInfo forDefaultProxy() -> forDefaultProxy
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType getProxyType() -> getProxyType
    java.lang.String getProxyAddress() -> getProxyAddress
    int getProxyPort() -> getProxyPort
    java.lang.String getProxyUsername() -> getProxyUsername
    java.lang.String getProxyPassword() -> getProxyPassword
    javax.net.SocketFactory getSocketFactory() -> getSocketFactory
org.jivesoftware.smack.proxy.ProxyInfo$ProxyType -> org.jivesoftware.smack.proxy.ProxyInfo$ProxyType:
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType NONE -> NONE
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType HTTP -> HTTP
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType SOCKS4 -> SOCKS4
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType SOCKS5 -> SOCKS5
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType[] $VALUES -> $VALUES
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType[] values() -> values
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.proxy.Socks4ProxySocketFactory -> org.jivesoftware.smack.proxy.Socks4ProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket socks4ProxifiedSocket(java.lang.String,int) -> socks4ProxifiedSocket
org.jivesoftware.smack.proxy.Socks5ProxySocketFactory -> org.jivesoftware.smack.proxy.Socks5ProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket socks5ProxifiedSocket(java.lang.String,int) -> socks5ProxifiedSocket
    void fill(java.io.InputStream,byte[],int) -> fill
org.jivesoftware.smack.sasl.SASLAnonymous -> org.jivesoftware.smack.sasl.SASLAnonymous:
    java.lang.String getName() -> getName
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate() -> authenticate
    void challengeReceived(java.lang.String) -> challengeReceived
org.jivesoftware.smack.sasl.SASLCramMD5Mechanism -> org.jivesoftware.smack.sasl.SASLCramMD5Mechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLDigestMD5Mechanism -> org.jivesoftware.smack.sasl.SASLDigestMD5Mechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLError -> org.jivesoftware.smack.sasl.SASLError:
    org.jivesoftware.smack.sasl.SASLError aborted -> aborted
    org.jivesoftware.smack.sasl.SASLError account_disabled -> account_disabled
    org.jivesoftware.smack.sasl.SASLError credentials_expired -> credentials_expired
    org.jivesoftware.smack.sasl.SASLError encryption_required -> encryption_required
    org.jivesoftware.smack.sasl.SASLError incorrect_encoding -> incorrect_encoding
    org.jivesoftware.smack.sasl.SASLError invalid_authzid -> invalid_authzid
    org.jivesoftware.smack.sasl.SASLError invalid_mechanism -> invalid_mechanism
    org.jivesoftware.smack.sasl.SASLError malformed_request -> malformed_request
    org.jivesoftware.smack.sasl.SASLError mechanism_too_weak -> mechanism_too_weak
    org.jivesoftware.smack.sasl.SASLError not_authorized -> not_authorized
    org.jivesoftware.smack.sasl.SASLError temporary_auth_failure -> temporary_auth_failure
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.sasl.SASLError[] $VALUES -> $VALUES
    org.jivesoftware.smack.sasl.SASLError[] values() -> values
    org.jivesoftware.smack.sasl.SASLError valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    org.jivesoftware.smack.sasl.SASLError fromString(java.lang.String) -> fromString
org.jivesoftware.smack.sasl.SASLErrorException -> org.jivesoftware.smack.sasl.SASLErrorException:
    long serialVersionUID -> serialVersionUID
    org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure saslFailure -> saslFailure
    java.lang.String mechanism -> mechanism
    java.util.Map texts -> texts
    org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure getSASLFailure() -> getSASLFailure
    java.lang.String getMechanism() -> getMechanism
    java.util.Map getTexts() -> getTexts
org.jivesoftware.smack.sasl.SASLExternalMechanism -> org.jivesoftware.smack.sasl.SASLExternalMechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLGSSAPIMechanism -> org.jivesoftware.smack.sasl.SASLGSSAPIMechanism:
    java.lang.String getName() -> getName
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
org.jivesoftware.smack.sasl.SASLMechanism -> org.jivesoftware.smack.sasl.SASLMechanism:
    org.jivesoftware.smack.SASLAuthentication saslAuthentication -> saslAuthentication
    org.apache.harmony.javax.security.sasl.SaslClient sc -> sc
    java.lang.String authenticationId -> authenticationId
    java.lang.String password -> password
    java.lang.String hostname -> hostname
    void authenticate(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate(java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate() -> authenticate
    void challengeReceived(java.lang.String) -> challengeReceived
    java.lang.String getName() -> getName
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
org.jivesoftware.smack.sasl.SASLMechanism$AuthMechanism -> org.jivesoftware.smack.sasl.SASLMechanism$AuthMechanism:
    java.lang.String name -> name
    java.lang.String authenticationText -> authenticationText
    java.lang.String toXML() -> toXML
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Challenge -> org.jivesoftware.smack.sasl.SASLMechanism$Challenge:
    java.lang.String data -> data
    java.lang.String toXML() -> toXML
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Response -> org.jivesoftware.smack.sasl.SASLMechanism$Response:
    java.lang.String authenticationText -> authenticationText
    java.lang.String toXML() -> toXML
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure -> org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure:
    org.jivesoftware.smack.sasl.SASLError saslError -> saslError
    java.lang.String saslErrorString -> saslErrorString
    org.jivesoftware.smack.sasl.SASLError getSASLError() -> getSASLError
    java.lang.String getSASLErrorString() -> getSASLErrorString
    java.lang.String toXML() -> toXML
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Success -> org.jivesoftware.smack.sasl.SASLMechanism$Success:
    java.lang.String data -> data
    java.lang.String toXML() -> toXML
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smack.sasl.SASLPlainMechanism -> org.jivesoftware.smack.sasl.SASLPlainMechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.tcp.PacketReader -> org.jivesoftware.smack.tcp.PacketReader:
    java.lang.Thread readerThread -> readerThread
    org.jivesoftware.smack.tcp.XMPPTCPConnection connection -> connection
    org.xmlpull.v1.XmlPullParser parser -> parser
    boolean lastFeaturesParsed -> lastFeaturesParsed
    boolean done -> done
    void init() -> init
    void startup() -> startup
    void shutdown() -> shutdown
    void resetParser() -> resetParser
    void parsePackets(java.lang.Thread) -> parsePackets
    void parseFeatures(org.xmlpull.v1.XmlPullParser) -> parseFeatures
    void access$000(org.jivesoftware.smack.tcp.PacketReader,java.lang.Thread) -> access$000
org.jivesoftware.smack.tcp.PacketReader$1 -> org.jivesoftware.smack.tcp.PacketReader$1:
    org.jivesoftware.smack.tcp.PacketReader this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.tcp.PacketWriter -> org.jivesoftware.smack.tcp.PacketWriter:
    int QUEUE_SIZE -> QUEUE_SIZE
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.tcp.XMPPTCPConnection connection -> connection
    org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown queue -> queue
    java.lang.Thread writerThread -> writerThread
    java.io.Writer writer -> writer
    boolean done -> done
    java.util.concurrent.atomic.AtomicBoolean shutdownDone -> shutdownDone
    void init() -> init
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    void startup() -> startup
    void setWriter(java.io.Writer) -> setWriter
    void shutdown() -> shutdown
    org.jivesoftware.smack.packet.Packet nextPacket() -> nextPacket
    void writePackets(java.lang.Thread) -> writePackets
    void openStream() -> openStream
    void access$000(org.jivesoftware.smack.tcp.PacketWriter,java.lang.Thread) -> access$000
org.jivesoftware.smack.tcp.PacketWriter$1 -> org.jivesoftware.smack.tcp.PacketWriter$1:
    org.jivesoftware.smack.tcp.PacketWriter this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.tcp.XMPPTCPConnection -> org.jivesoftware.smack.tcp.XMPPTCPConnection:
    java.util.logging.Logger LOGGER -> LOGGER
    java.net.Socket socket -> socket
    java.lang.String connectionID -> connectionID
    java.lang.String user -> user
    boolean connected -> connected
    boolean socketClosed -> socketClosed
    boolean anonymous -> anonymous
    boolean usingTLS -> usingTLS
    org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback -> parsingExceptionCallback
    org.jivesoftware.smack.tcp.PacketWriter packetWriter -> packetWriter
    org.jivesoftware.smack.tcp.PacketReader packetReader -> packetReader
    java.util.Collection compressionMethods -> compressionMethods
    boolean serverAckdCompression -> serverAckdCompression
    java.lang.Object compressionLock -> compressionLock
    java.lang.String getConnectionID() -> getConnectionID
    java.lang.String getUser() -> getUser
    void setParsingExceptionCallback(org.jivesoftware.smack.parsing.ParsingExceptionCallback) -> setParsingExceptionCallback
    org.jivesoftware.smack.parsing.ParsingExceptionCallback getParsingExceptionCallback() -> getParsingExceptionCallback
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    boolean isConnected() -> isConnected
    boolean isSecureConnection() -> isSecureConnection
    boolean isSocketClosed() -> isSocketClosed
    boolean isAuthenticated() -> isAuthenticated
    boolean isAnonymous() -> isAnonymous
    void shutdown() -> shutdown
    void sendPacketInternal(org.jivesoftware.smack.packet.Packet) -> sendPacketInternal
    void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration) -> connectUsingConfiguration
    void initConnection() -> initConnection
    void initReaderAndWriter() -> initReaderAndWriter
    boolean isUsingTLS() -> isUsingTLS
    void startTLSReceived(boolean) -> startTLSReceived
    void proceedTLSReceived() -> proceedTLSReceived
    void setAvailableCompressionMethods(java.util.Collection) -> setAvailableCompressionMethods
    org.jivesoftware.smack.compression.XMPPInputOutputStream maybeGetCompressionHandler() -> maybeGetCompressionHandler
    boolean isUsingCompression() -> isUsingCompression
    boolean useCompression() -> useCompression
    void requestStreamCompression(java.lang.String) -> requestStreamCompression
    void startStreamCompression() -> startStreamCompression
    void streamCompressionNegotiationDone() -> streamCompressionNegotiationDone
    void connectInternal() -> connectInternal
    void notifyConnectionError(java.lang.Exception) -> notifyConnectionError
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    void throwConnectionExceptionOrNoResponse() -> throwConnectionExceptionOrNoResponse
    void setServiceName(java.lang.String) -> setServiceName
    void serverRequiresBinding() -> serverRequiresBinding
    void setServiceCapsNode(java.lang.String) -> setServiceCapsNode
    void serverSupportsSession() -> serverSupportsSession
    void setRosterVersioningSupported() -> setRosterVersioningSupported
    void serverSupportsAccountCreation() -> serverSupportsAccountCreation
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    org.jivesoftware.smack.ConnectionConfiguration getConfiguration() -> getConfiguration
    void notifyReconnection() -> notifyReconnection
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown -> org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown:
    java.lang.Object[] items -> items
    int takeIndex -> takeIndex
    int putIndex -> putIndex
    int count -> count
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.util.concurrent.locks.Condition notEmpty -> notEmpty
    java.util.concurrent.locks.Condition notFull -> notFull
    boolean isShutdown -> isShutdown
    int inc(int) -> inc
    void insert(java.lang.Object) -> insert
    java.lang.Object extract() -> extract
    void removeAt(int) -> removeAt
    void checkNotNull(java.lang.Object) -> checkNotNull
    void checkNotShutdown() -> checkNotShutdown
    boolean hasNoElements() -> hasNoElements
    boolean hasElements() -> hasElements
    boolean isFull() -> isFull
    boolean isNotFull() -> isNotFull
    void shutdown() -> shutdown
    void start() -> start
    boolean isShutdown() -> isShutdown
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    boolean offer(java.lang.Object) -> offer
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    int remainingCapacity() -> remainingCapacity
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    int size() -> size
    java.util.Iterator iterator() -> iterator
    int access$000(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown) -> access$000
    int access$100(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown) -> access$100
    java.lang.Object[] access$200(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown) -> access$200
    int access$300(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown) -> access$300
    java.util.concurrent.locks.ReentrantLock access$400(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown) -> access$400
    int access$500(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown,int) -> access$500
    void access$600(org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown,int) -> access$600
org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown$Itr -> org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown$Itr:
    int nextIndex -> nextIndex
    java.lang.Object nextItem -> nextItem
    int lastRet -> lastRet
    org.jivesoftware.smack.util.ArrayBlockingQueueWithShutdown this$0 -> this$0
    boolean hasNext() -> hasNext
    void checkNext() -> checkNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jivesoftware.smack.util.Base32Encoder -> org.jivesoftware.smack.util.Base32Encoder:
    org.jivesoftware.smack.util.Base32Encoder instance -> instance
    java.lang.String ALPHABET -> ALPHABET
    org.jivesoftware.smack.util.Base32Encoder getInstance() -> getInstance
    java.lang.String decode(java.lang.String) -> decode
    java.lang.String encode(java.lang.String) -> encode
    int lenToPadding(int) -> lenToPadding
    int paddingToLen(int) -> paddingToLen
org.jivesoftware.smack.util.Base64 -> org.jivesoftware.smack.util.Base64:
    java.util.logging.Logger LOGGER -> LOGGER
    int NO_OPTIONS -> NO_OPTIONS
    int ENCODE -> ENCODE
    int DECODE -> DECODE
    int GZIP -> GZIP
    int DONT_BREAK_LINES -> DONT_BREAK_LINES
    int URL_SAFE -> URL_SAFE
    int ORDERED -> ORDERED
    int MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    byte EQUALS_SIGN -> EQUALS_SIGN
    byte NEW_LINE -> NEW_LINE
    java.lang.String PREFERRED_ENCODING -> PREFERRED_ENCODING
    byte WHITE_SPACE_ENC -> WHITE_SPACE_ENC
    byte EQUALS_SIGN_ENC -> EQUALS_SIGN_ENC
    byte[] _STANDARD_ALPHABET -> _STANDARD_ALPHABET
    byte[] _STANDARD_DECODABET -> _STANDARD_DECODABET
    byte[] _URL_SAFE_ALPHABET -> _URL_SAFE_ALPHABET
    byte[] _URL_SAFE_DECODABET -> _URL_SAFE_DECODABET
    byte[] _ORDERED_ALPHABET -> _ORDERED_ALPHABET
    byte[] _ORDERED_DECODABET -> _ORDERED_DECODABET
    byte[] getAlphabet(int) -> getAlphabet
    byte[] getDecodabet(int) -> getDecodabet
    byte[] encode3to4(byte[],byte[],int,int) -> encode3to4
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> encode3to4
    java.lang.String encodeObject(java.io.Serializable) -> encodeObject
    java.lang.String encodeObject(java.io.Serializable,int) -> encodeObject
    java.lang.String encodeBytes(byte[]) -> encodeBytes
    java.lang.String encodeBytes(byte[],int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int,int) -> encodeBytes
    int decode4to3(byte[],int,byte[],int,int) -> decode4to3
    byte[] decode(byte[],int,int,int) -> decode
    byte[] decode(java.lang.String) -> decode
    byte[] decode(java.lang.String,int) -> decode
    java.lang.Object decodeToObject(java.lang.String) -> decodeToObject
    boolean encodeToFile(byte[],java.lang.String) -> encodeToFile
    boolean decodeToFile(java.lang.String,java.lang.String) -> decodeToFile
    byte[] decodeFromFile(java.lang.String) -> decodeFromFile
    java.lang.String encodeFromFile(java.lang.String) -> encodeFromFile
    void encodeFileToFile(java.lang.String,java.lang.String) -> encodeFileToFile
    void decodeFileToFile(java.lang.String,java.lang.String) -> decodeFileToFile
    byte[] access$000(int) -> access$000
    byte[] access$100(byte[],int,int,byte[],int,int) -> access$100
    int access$200(byte[],int,byte[],int,int) -> access$200
    byte[] access$300(byte[],byte[],int,int) -> access$300
org.jivesoftware.smack.util.Base64$InputStream -> org.jivesoftware.smack.util.Base64$InputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int numSigBytes -> numSigBytes
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    int options -> options
    byte[] decodabet -> decodabet
    int read() -> read
    int read(byte[],int,int) -> read
org.jivesoftware.smack.util.Base64$OutputStream -> org.jivesoftware.smack.util.Base64$OutputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    byte[] b4 -> b4
    boolean suspendEncoding -> suspendEncoding
    int options -> options
    byte[] decodabet -> decodabet
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> flushBase64
    void close() -> close
    void suspendEncoding() -> suspendEncoding
    void resumeEncoding() -> resumeEncoding
org.jivesoftware.smack.util.Base64Encoder -> org.jivesoftware.smack.util.Base64Encoder:
    org.jivesoftware.smack.util.Base64Encoder instance -> instance
    org.jivesoftware.smack.util.Base64Encoder getInstance() -> getInstance
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
org.jivesoftware.smack.util.Base64FileUrlEncoder -> org.jivesoftware.smack.util.Base64FileUrlEncoder:
    org.jivesoftware.smack.util.Base64FileUrlEncoder instance -> instance
    org.jivesoftware.smack.util.Base64FileUrlEncoder getInstance() -> getInstance
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
org.jivesoftware.smack.util.Cache -> org.jivesoftware.smack.util.Cache:
    java.util.logging.Logger LOGGER -> LOGGER
    java.util.Map map -> map
    org.jivesoftware.smack.util.Cache$LinkedList lastAccessedList -> lastAccessedList
    org.jivesoftware.smack.util.Cache$LinkedList ageList -> ageList
    int maxCacheSize -> maxCacheSize
    long maxLifetime -> maxLifetime
    long cacheHits -> cacheHits
    long cacheMisses -> cacheMisses
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove(java.lang.Object,boolean) -> remove
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Collection values() -> values
    boolean containsKey(java.lang.Object) -> containsKey
    void putAll(java.util.Map) -> putAll
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    long getCacheHits() -> getCacheHits
    long getCacheMisses() -> getCacheMisses
    int getMaxCacheSize() -> getMaxCacheSize
    void setMaxCacheSize(int) -> setMaxCacheSize
    long getMaxLifetime() -> getMaxLifetime
    void setMaxLifetime(long) -> setMaxLifetime
    void deleteExpiredEntries() -> deleteExpiredEntries
    void cullCache() -> cullCache
org.jivesoftware.smack.util.Cache$1 -> org.jivesoftware.smack.util.Cache$1:
    java.util.Collection values -> values
    org.jivesoftware.smack.util.Cache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jivesoftware.smack.util.Cache$1$1 -> org.jivesoftware.smack.util.Cache$1$1:
    java.util.Iterator it -> it
    org.jivesoftware.smack.util.Cache$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jivesoftware.smack.util.Cache$2 -> org.jivesoftware.smack.util.Cache$2:
    java.util.Set set -> set
    org.jivesoftware.smack.util.Cache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.util.Set access$000(org.jivesoftware.smack.util.Cache$2) -> access$000
org.jivesoftware.smack.util.Cache$2$1 -> org.jivesoftware.smack.util.Cache$2$1:
    java.util.Iterator it -> it
    org.jivesoftware.smack.util.Cache$2 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.jivesoftware.smack.util.Cache$2$1$1 -> org.jivesoftware.smack.util.Cache$2$1$1:
    org.jivesoftware.smack.util.Cache$2$1 this$2 -> this$2
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.Cache$AbstractMapEntry -> org.jivesoftware.smack.util.Cache$AbstractMapEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.util.Cache$CacheObject -> org.jivesoftware.smack.util.Cache$CacheObject:
    java.lang.Object object -> object
    org.jivesoftware.smack.util.Cache$LinkedListNode lastAccessedListNode -> lastAccessedListNode
    org.jivesoftware.smack.util.Cache$LinkedListNode ageListNode -> ageListNode
    int readCount -> readCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.util.Cache$LinkedList -> org.jivesoftware.smack.util.Cache$LinkedList:
    org.jivesoftware.smack.util.Cache$LinkedListNode head -> head
    org.jivesoftware.smack.util.Cache$LinkedListNode getFirst() -> getFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode getLast() -> getLast
    org.jivesoftware.smack.util.Cache$LinkedListNode addFirst(org.jivesoftware.smack.util.Cache$LinkedListNode) -> addFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode addFirst(java.lang.Object) -> addFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode addLast(java.lang.Object) -> addLast
    void clear() -> clear
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.Cache$LinkedListNode -> org.jivesoftware.smack.util.Cache$LinkedListNode:
    org.jivesoftware.smack.util.Cache$LinkedListNode previous -> previous
    org.jivesoftware.smack.util.Cache$LinkedListNode next -> next
    java.lang.Object object -> object
    long timestamp -> timestamp
    void remove() -> remove
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.DNSUtil -> org.jivesoftware.smack.util.DNSUtil:
    java.util.logging.Logger LOGGER -> LOGGER
    org.jivesoftware.smack.util.dns.DNSResolver dnsResolver -> dnsResolver
    void init() -> init
    void setDNSResolver(org.jivesoftware.smack.util.dns.DNSResolver) -> setDNSResolver
    org.jivesoftware.smack.util.dns.DNSResolver getDNSResolver() -> getDNSResolver
    java.util.List resolveXMPPDomain(java.lang.String) -> resolveXMPPDomain
    java.util.List resolveXMPPServerDomain(java.lang.String) -> resolveXMPPServerDomain
    java.util.List resolveDomain(java.lang.String,char) -> resolveDomain
    java.util.List sortSRVRecords(java.util.List) -> sortSRVRecords
    int bisect(int[],double) -> bisect
org.jivesoftware.smack.util.FileUtils -> org.jivesoftware.smack.util.FileUtils:
    java.util.logging.Logger LOGGER -> LOGGER
    java.io.InputStream getStreamForUrl(java.lang.String,java.lang.ClassLoader) -> getStreamForUrl
    java.util.List getClassLoaders() -> getClassLoaders
    boolean addLines(java.lang.String,java.util.Set) -> addLines
    java.lang.String readFileOrThrow(java.io.File) -> readFileOrThrow
    java.lang.String readFile(java.io.File) -> readFile
    void writeFileOrThrow(java.io.File,java.lang.String) -> writeFileOrThrow
    boolean writeFile(java.io.File,java.lang.String) -> writeFile
org.jivesoftware.smack.util.LazyStringBuilder -> org.jivesoftware.smack.util.LazyStringBuilder:
    java.util.List list -> list
    java.lang.String cache -> cache
    boolean $assertionsDisabled -> $assertionsDisabled
    void invalidateCache() -> invalidateCache
    org.jivesoftware.smack.util.LazyStringBuilder append(org.jivesoftware.smack.util.LazyStringBuilder) -> append
    org.jivesoftware.smack.util.LazyStringBuilder append(java.lang.CharSequence) -> append
    org.jivesoftware.smack.util.LazyStringBuilder append(java.lang.CharSequence,int,int) -> append
    org.jivesoftware.smack.util.LazyStringBuilder append(char) -> append
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    java.lang.Appendable append(char) -> append
org.jivesoftware.smack.util.ObservableReader -> org.jivesoftware.smack.util.ObservableReader:
    java.io.Reader wrappedReader -> wrappedReader
    java.util.List listeners -> listeners
    int read(char[],int,int) -> read
    void close() -> close
    int read() -> read
    int read(char[]) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void addReaderListener(org.jivesoftware.smack.util.ReaderListener) -> addReaderListener
    void removeReaderListener(org.jivesoftware.smack.util.ReaderListener) -> removeReaderListener
org.jivesoftware.smack.util.ObservableWriter -> org.jivesoftware.smack.util.ObservableWriter:
    java.io.Writer wrappedWriter -> wrappedWriter
    java.util.List listeners -> listeners
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void write(int) -> write
    void write(char[]) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    void notifyListeners(java.lang.String) -> notifyListeners
    void addWriterListener(org.jivesoftware.smack.util.WriterListener) -> addWriterListener
    void removeWriterListener(org.jivesoftware.smack.util.WriterListener) -> removeWriterListener
org.jivesoftware.smack.util.PacketParserUtils -> org.jivesoftware.smack.util.PacketParserUtils:
    java.util.logging.Logger LOGGER -> LOGGER
    boolean $assertionsDisabled -> $assertionsDisabled
    org.xmlpull.v1.XmlPullParser newXmppParser() -> newXmppParser
    org.jivesoftware.smack.packet.Message parseMessage(org.xmlpull.v1.XmlPullParser) -> parseMessage
    java.lang.String parseElementText(org.xmlpull.v1.XmlPullParser) -> parseElementText
    java.lang.String parseElement(org.xmlpull.v1.XmlPullParser) -> parseElement
    java.lang.String parseElement(org.xmlpull.v1.XmlPullParser,boolean) -> parseElement
    java.lang.String parseContent(org.xmlpull.v1.XmlPullParser) -> parseContent
    java.lang.String parseContentDepth(org.xmlpull.v1.XmlPullParser,int) -> parseContentDepth
    java.lang.String parseContentDepth(org.xmlpull.v1.XmlPullParser,int,boolean) -> parseContentDepth
    org.jivesoftware.smack.packet.Presence parsePresence(org.xmlpull.v1.XmlPullParser) -> parsePresence
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser,org.jivesoftware.smack.XMPPConnection) -> parseIQ
    org.jivesoftware.smack.packet.RosterPacket parseRoster(org.xmlpull.v1.XmlPullParser) -> parseRoster
    org.jivesoftware.smack.packet.Registration parseRegistration(org.xmlpull.v1.XmlPullParser) -> parseRegistration
    org.jivesoftware.smack.packet.Bind parseResourceBinding(org.xmlpull.v1.XmlPullParser) -> parseResourceBinding
    java.util.Collection parseMechanisms(org.xmlpull.v1.XmlPullParser) -> parseMechanisms
    java.util.Collection parseCompressionMethods(org.xmlpull.v1.XmlPullParser) -> parseCompressionMethods
    org.jivesoftware.smack.sasl.SASLMechanism$SASLFailure parseSASLFailure(org.xmlpull.v1.XmlPullParser) -> parseSASLFailure
    org.jivesoftware.smack.packet.StreamError parseStreamError(org.xmlpull.v1.XmlPullParser) -> parseStreamError
    org.jivesoftware.smack.packet.XMPPError parseError(org.xmlpull.v1.XmlPullParser) -> parseError
    org.jivesoftware.smack.packet.PacketExtension parsePacketExtension(java.lang.String,java.lang.String,org.xmlpull.v1.XmlPullParser) -> parsePacketExtension
    java.lang.String getLanguageAttribute(org.xmlpull.v1.XmlPullParser) -> getLanguageAttribute
    java.lang.Object parseWithIntrospection(java.lang.String,java.lang.Class,org.xmlpull.v1.XmlPullParser) -> parseWithIntrospection
    java.lang.Object decode(java.lang.Class,java.lang.String) -> decode
org.jivesoftware.smack.util.PacketParserUtils$1 -> org.jivesoftware.smack.util.PacketParserUtils$1:
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.PacketParserUtils$2 -> org.jivesoftware.smack.util.PacketParserUtils$2:
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.PacketParserUtils$UnparsedResultIQ -> org.jivesoftware.smack.util.PacketParserUtils$UnparsedResultIQ:
    java.lang.String str -> str
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.ReaderListener -> org.jivesoftware.smack.util.ReaderListener:
    void read(java.lang.String) -> read
org.jivesoftware.smack.util.StringEncoder -> org.jivesoftware.smack.util.StringEncoder:
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
org.jivesoftware.smack.util.StringUtils -> org.jivesoftware.smack.util.StringUtils:
    java.util.logging.Logger LOGGER -> LOGGER
    java.lang.String QUOTE_ENCODE -> QUOTE_ENCODE
    java.lang.String APOS_ENCODE -> APOS_ENCODE
    java.lang.String AMP_ENCODE -> AMP_ENCODE
    java.lang.String LT_ENCODE -> LT_ENCODE
    java.lang.String GT_ENCODE -> GT_ENCODE
    java.security.MessageDigest digest -> digest
    java.util.Random randGen -> randGen
    char[] numbersAndLetters -> numbersAndLetters
    java.lang.String parseName(java.lang.String) -> parseName
    java.lang.String parseServer(java.lang.String) -> parseServer
    java.lang.String parseResource(java.lang.String) -> parseResource
    java.lang.String parseBareAddress(java.lang.String) -> parseBareAddress
    boolean isFullJID(java.lang.String) -> isFullJID
    java.lang.String escapeNode(java.lang.String) -> escapeNode
    java.lang.String unescapeNode(java.lang.String) -> unescapeNode
    java.lang.CharSequence escapeForXML(java.lang.String) -> escapeForXML
    java.lang.String hash(java.lang.String) -> hash
    java.lang.String encodeHex(byte[]) -> encodeHex
    java.lang.String encodeBase64(java.lang.String) -> encodeBase64
    java.lang.String encodeBase64(byte[]) -> encodeBase64
    java.lang.String encodeBase64(byte[],boolean) -> encodeBase64
    java.lang.String encodeBase64(byte[],int,int,boolean) -> encodeBase64
    byte[] decodeBase64(java.lang.String) -> decodeBase64
    java.lang.String randomString(int) -> randomString
    boolean isNotEmpty(java.lang.CharSequence) -> isNotEmpty
    boolean isNullOrEmpty(java.lang.CharSequence) -> isNullOrEmpty
    boolean isEmpty(java.lang.CharSequence) -> isEmpty
    boolean nullSafeCharSequenceEquals(java.lang.CharSequence,java.lang.CharSequence) -> nullSafeCharSequenceEquals
    int nullSafeCharSequenceComperator(java.lang.CharSequence,java.lang.CharSequence) -> nullSafeCharSequenceComperator
org.jivesoftware.smack.util.WriterListener -> org.jivesoftware.smack.util.WriterListener:
    void write(java.lang.String) -> write
org.jivesoftware.smack.util.XmlStringBuilder -> org.jivesoftware.smack.util.XmlStringBuilder:
    java.lang.String RIGHT_ANGEL_BRACKET -> RIGHT_ANGEL_BRACKET
    org.jivesoftware.smack.util.LazyStringBuilder sb -> sb
    boolean $assertionsDisabled -> $assertionsDisabled
    org.jivesoftware.smack.util.XmlStringBuilder element(java.lang.String,java.lang.String) -> element
    org.jivesoftware.smack.util.XmlStringBuilder element(java.lang.String,java.lang.Enum) -> element
    org.jivesoftware.smack.util.XmlStringBuilder optElement(java.lang.String,java.lang.String) -> optElement
    org.jivesoftware.smack.util.XmlStringBuilder optElement(java.lang.String,java.lang.Enum) -> optElement
    org.jivesoftware.smack.util.XmlStringBuilder halfOpenElement(java.lang.String) -> halfOpenElement
    org.jivesoftware.smack.util.XmlStringBuilder openElement(java.lang.String) -> openElement
    org.jivesoftware.smack.util.XmlStringBuilder closeElement(java.lang.String) -> closeElement
    org.jivesoftware.smack.util.XmlStringBuilder closeElement(org.jivesoftware.smack.packet.PacketExtension) -> closeElement
    org.jivesoftware.smack.util.XmlStringBuilder closeEmptyElement() -> closeEmptyElement
    org.jivesoftware.smack.util.XmlStringBuilder rightAngelBracket() -> rightAngelBracket
    org.jivesoftware.smack.util.XmlStringBuilder attribute(java.lang.String,java.lang.String) -> attribute
    org.jivesoftware.smack.util.XmlStringBuilder attribute(java.lang.String,java.lang.Enum) -> attribute
    org.jivesoftware.smack.util.XmlStringBuilder optAttribute(java.lang.String,java.lang.String) -> optAttribute
    org.jivesoftware.smack.util.XmlStringBuilder optAttribute(java.lang.String,java.lang.Enum) -> optAttribute
    org.jivesoftware.smack.util.XmlStringBuilder xmlnsAttribute(java.lang.String) -> xmlnsAttribute
    org.jivesoftware.smack.util.XmlStringBuilder xmllangAttribute(java.lang.String) -> xmllangAttribute
    org.jivesoftware.smack.util.XmlStringBuilder escape(java.lang.String) -> escape
    org.jivesoftware.smack.util.XmlStringBuilder prelude(org.jivesoftware.smack.packet.PacketExtension) -> prelude
    org.jivesoftware.smack.util.XmlStringBuilder optAppend(java.lang.CharSequence) -> optAppend
    org.jivesoftware.smack.util.XmlStringBuilder append(org.jivesoftware.smack.util.XmlStringBuilder) -> append
    org.jivesoftware.smack.util.XmlStringBuilder emptyElement(java.lang.String) -> emptyElement
    org.jivesoftware.smack.util.XmlStringBuilder condEmptyElement(boolean,java.lang.String) -> condEmptyElement
    org.jivesoftware.smack.util.XmlStringBuilder condAttribute(boolean,java.lang.String,java.lang.String) -> condAttribute
    org.jivesoftware.smack.util.XmlStringBuilder append(java.lang.CharSequence) -> append
    org.jivesoftware.smack.util.XmlStringBuilder append(java.lang.CharSequence,int,int) -> append
    org.jivesoftware.smack.util.XmlStringBuilder append(char) -> append
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    java.lang.Appendable append(char) -> append
org.jivesoftware.smack.util.XmppDateTime -> org.jivesoftware.smack.util.XmppDateTime:
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType dateFormatter -> dateFormatter
    java.util.regex.Pattern datePattern -> datePattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType timeFormatter -> timeFormatter
    java.util.regex.Pattern timePattern -> timePattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType timeNoZoneFormatter -> timeNoZoneFormatter
    java.util.regex.Pattern timeNoZonePattern -> timeNoZonePattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType timeNoMillisFormatter -> timeNoMillisFormatter
    java.util.regex.Pattern timeNoMillisPattern -> timeNoMillisPattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType timeNoMillisNoZoneFormatter -> timeNoMillisNoZoneFormatter
    java.util.regex.Pattern timeNoMillisNoZonePattern -> timeNoMillisNoZonePattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType dateTimeFormatter -> dateTimeFormatter
    java.util.regex.Pattern dateTimePattern -> dateTimePattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType dateTimeNoMillisFormatter -> dateTimeNoMillisFormatter
    java.util.regex.Pattern dateTimeNoMillisPattern -> dateTimeNoMillisPattern
    java.text.DateFormat xep0091Formatter -> xep0091Formatter
    java.text.DateFormat xep0091Date6DigitFormatter -> xep0091Date6DigitFormatter
    java.text.DateFormat xep0091Date7Digit1MonthFormatter -> xep0091Date7Digit1MonthFormatter
    java.text.DateFormat xep0091Date7Digit2MonthFormatter -> xep0091Date7Digit2MonthFormatter
    java.util.regex.Pattern xep0091Pattern -> xep0091Pattern
    java.util.List couplings -> couplings
    java.util.Date parseXEP0082Date(java.lang.String) -> parseXEP0082Date
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.lang.String formatXEP0082Date(java.util.Date) -> formatXEP0082Date
    java.lang.String convertXep82TimezoneToRfc822(java.lang.String) -> convertXep82TimezoneToRfc822
    java.lang.String convertRfc822TimezoneToXep82(java.lang.String) -> convertRfc822TimezoneToXep82
    java.lang.String asString(java.util.TimeZone) -> asString
    java.util.Date handleDateWithMissingLeadingZeros(java.lang.String,int) -> handleDateWithMissingLeadingZeros
    java.util.Calendar parseXEP91Date(java.lang.String,java.text.DateFormat) -> parseXEP91Date
    java.util.List filterDatesBefore(java.util.Calendar,java.util.Calendar[]) -> filterDatesBefore
    java.util.Calendar determineNearestDate(java.util.Calendar,java.util.List) -> determineNearestDate
org.jivesoftware.smack.util.XmppDateTime$1 -> org.jivesoftware.smack.util.XmppDateTime$1:
    java.util.Calendar val$now -> val$now
    int compare(java.util.Calendar,java.util.Calendar) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jivesoftware.smack.util.XmppDateTime$DateFormatType -> org.jivesoftware.smack.util.XmppDateTime$DateFormatType:
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_DATE_PROFILE -> XEP_0082_DATE_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_DATETIME_PROFILE -> XEP_0082_DATETIME_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_DATETIME_MILLIS_PROFILE -> XEP_0082_DATETIME_MILLIS_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_TIME_PROFILE -> XEP_0082_TIME_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_TIME_ZONE_PROFILE -> XEP_0082_TIME_ZONE_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_TIME_MILLIS_PROFILE -> XEP_0082_TIME_MILLIS_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0082_TIME_MILLIS_ZONE_PROFILE -> XEP_0082_TIME_MILLIS_ZONE_PROFILE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType XEP_0091_DATETIME -> XEP_0091_DATETIME
    java.lang.String FORMAT_STRING -> FORMAT_STRING
    java.text.DateFormat FORMATTER -> FORMATTER
    boolean CONVERT_TIMEZONE -> CONVERT_TIMEZONE
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType[] $VALUES -> $VALUES
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType[] values() -> values
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType valueOf(java.lang.String) -> valueOf
    java.lang.String format(java.util.Date) -> format
    java.util.Date parse(java.lang.String) -> parse
org.jivesoftware.smack.util.XmppDateTime$PatternCouplings -> org.jivesoftware.smack.util.XmppDateTime$PatternCouplings:
    java.util.regex.Pattern pattern -> pattern
    org.jivesoftware.smack.util.XmppDateTime$DateFormatType formatter -> formatter
org.jivesoftware.smack.util.dns.DNSResolver -> org.jivesoftware.smack.util.dns.DNSResolver:
    java.util.List lookupSRVRecords(java.lang.String) -> lookupSRVRecords
org.jivesoftware.smack.util.dns.HostAddress -> org.jivesoftware.smack.util.dns.HostAddress:
    java.lang.String fqdn -> fqdn
    int port -> port
    java.lang.Exception exception -> exception
    java.lang.String getFQDN() -> getFQDN
    int getPort() -> getPort
    void setException(java.lang.Exception) -> setException
    java.lang.Exception getException() -> getException
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getErrorMessage() -> getErrorMessage
org.jivesoftware.smack.util.dns.SRVRecord -> org.jivesoftware.smack.util.dns.SRVRecord:
    int weight -> weight
    int priority -> priority
    int getPriority() -> getPriority
    int getWeight() -> getWeight
    int compareTo(org.jivesoftware.smack.util.dns.SRVRecord) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jivesoftware.smack.util.dns.dnsjava.DNSJavaResolver -> org.jivesoftware.smack.util.dns.dnsjava.DNSJavaResolver:
    org.jivesoftware.smack.util.dns.dnsjava.DNSJavaResolver instance -> instance
    org.jivesoftware.smack.util.dns.DNSResolver getInstance() -> getInstance
    java.util.List lookupSRVRecords(java.lang.String) -> lookupSRVRecords
org.jivesoftware.smackx.address.MultipleRecipientManager -> org.jivesoftware.smackx.address.MultipleRecipientManager:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smack.util.Cache services -> b
org.jivesoftware.smackx.address.MultipleRecipientManager$PacketCopy -> org.jivesoftware.smackx.address.MultipleRecipientManager$PacketCopy:
    java.lang.CharSequence text -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.address.packet.MultipleAddresses -> org.jivesoftware.smackx.address.a.a:
    java.util.List addresses -> a
    void addAddress(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.address.packet.MultipleAddresses$1 -> org.jivesoftware.smackx.address.a.b:
org.jivesoftware.smackx.address.packet.MultipleAddresses$Address -> org.jivesoftware.smackx.address.a.c:
    java.lang.String type -> a
    java.lang.String jid -> b
    java.lang.String node -> c
    java.lang.String description -> d
    boolean delivered -> e
    java.lang.String uri -> f
    void setJid(java.lang.String) -> a
    void setNode(java.lang.String) -> b
    void setDescription(java.lang.String) -> c
    void setDelivered(boolean) -> a
    void setUri(java.lang.String) -> d
    java.lang.String toXML() -> a
    void access$100(org.jivesoftware.smackx.address.packet.MultipleAddresses$Address,java.lang.String) -> a
    void access$200(org.jivesoftware.smackx.address.packet.MultipleAddresses$Address,java.lang.String) -> b
    void access$300(org.jivesoftware.smackx.address.packet.MultipleAddresses$Address,java.lang.String) -> c
    void access$400(org.jivesoftware.smackx.address.packet.MultipleAddresses$Address,boolean) -> a
    void access$500(org.jivesoftware.smackx.address.packet.MultipleAddresses$Address,java.lang.String) -> d
    java.lang.String access$600(org.jivesoftware.smackx.address.packet.MultipleAddresses$Address) -> a
org.jivesoftware.smackx.address.provider.MultipleAddressesProvider -> org.jivesoftware.smackx.address.provider.MultipleAddressesProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.amp.AMPDeliverCondition -> org.jivesoftware.smackx.amp.a:
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value value -> a
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
org.jivesoftware.smackx.amp.AMPDeliverCondition$Value -> org.jivesoftware.smackx.amp.b:
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value direct -> a
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value forward -> b
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value gateway -> c
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value none -> d
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value stored -> e
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value[] $VALUES -> f
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value[] values() -> values
    org.jivesoftware.smackx.amp.AMPDeliverCondition$Value valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.amp.AMPExpireAtCondition -> org.jivesoftware.smackx.amp.c:
    java.lang.String value -> a
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
org.jivesoftware.smackx.amp.AMPMatchResourceCondition -> org.jivesoftware.smackx.amp.d:
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value value -> a
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value -> org.jivesoftware.smackx.amp.e:
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value any -> a
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value exact -> b
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value other -> c
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value[] $VALUES -> d
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value[] values() -> values
    org.jivesoftware.smackx.amp.AMPMatchResourceCondition$Value valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.amp.packet.AMPExtension -> org.jivesoftware.smackx.amp.a.a:
    java.util.concurrent.CopyOnWriteArrayList rules -> a
    boolean perHop -> b
    java.lang.String from -> c
    java.lang.String to -> d
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status status -> e
    java.util.Collection getRules() -> a
    void addRule(org.jivesoftware.smackx.amp.packet.AMPExtension$Rule) -> a
    void setPerHop(boolean) -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> b
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.amp.packet.AMPExtension$Action -> org.jivesoftware.smackx.amp.a.b:
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action alert -> a
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action drop -> b
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action error -> c
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action notify -> d
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action[] $VALUES -> e
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action[] values() -> values
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.amp.packet.AMPExtension$Condition -> org.jivesoftware.smackx.amp.a.c:
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
org.jivesoftware.smackx.amp.packet.AMPExtension$Rule -> org.jivesoftware.smackx.amp.a.d:
    org.jivesoftware.smackx.amp.packet.AMPExtension$Action action -> a
    org.jivesoftware.smackx.amp.packet.AMPExtension$Condition condition -> b
    java.lang.String toXML() -> a
    java.lang.String access$000(org.jivesoftware.smackx.amp.packet.AMPExtension$Rule) -> a
org.jivesoftware.smackx.amp.packet.AMPExtension$Status -> org.jivesoftware.smackx.amp.a.e:
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status alert -> a
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status error -> b
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status notify -> c
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status[] $VALUES -> d
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status[] values() -> values
    org.jivesoftware.smackx.amp.packet.AMPExtension$Status valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.amp.provider.AMPExtensionProvider -> org.jivesoftware.smackx.amp.provider.AMPExtensionProvider:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.amp.packet.AMPExtension$Condition createCondition(java.lang.String,java.lang.String) -> a
org.jivesoftware.smackx.attention.packet.AttentionExtension -> org.jivesoftware.smackx.attention.packet.AttentionExtension:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.attention.packet.AttentionExtension$Provider -> org.jivesoftware.smackx.attention.packet.AttentionExtension$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.bytestreams.BytestreamListener -> org.jivesoftware.smackx.bytestreams.a:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> a
org.jivesoftware.smackx.bytestreams.BytestreamRequest -> org.jivesoftware.smackx.bytestreams.b:
org.jivesoftware.smackx.bytestreams.ibb.CloseListener -> org.jivesoftware.smackx.bytestreams.ibb.a:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> a
    org.jivesoftware.smack.filter.PacketFilter closeFilter -> b
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> a
org.jivesoftware.smackx.bytestreams.ibb.DataListener -> org.jivesoftware.smackx.bytestreams.ibb.b:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> a
    org.jivesoftware.smack.filter.PacketFilter dataFilter -> b
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> a
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager:
    java.util.Random randomGenerator -> a
    java.util.Map managers -> b
    org.jivesoftware.smack.XMPPConnection connection -> c
    java.util.Map userListeners -> d
    java.util.List allRequestListeners -> e
    org.jivesoftware.smackx.bytestreams.ibb.InitiationListener initiationListener -> f
    org.jivesoftware.smackx.bytestreams.ibb.DataListener dataListener -> g
    org.jivesoftware.smackx.bytestreams.ibb.CloseListener closeListener -> h
    java.util.Map sessions -> i
    int defaultBlockSize -> j
    int maximumBlockSize -> k
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType stanza -> l
    java.util.List ignoredBytestreamRequests -> m
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager getByteStreamManager(org.jivesoftware.smack.XMPPConnection) -> a
    int getMaximumBlockSize() -> a
    void replyRejectPacket(org.jivesoftware.smack.packet.IQ) -> a
    void replyResourceConstraintPacket(org.jivesoftware.smack.packet.IQ) -> b
    void replyItemNotFoundPacket(org.jivesoftware.smack.packet.IQ) -> c
    org.jivesoftware.smackx.bytestreams.BytestreamListener getUserListener(java.lang.String) -> a
    java.util.List getAllRequestListeners() -> b
    java.util.Map getSessions() -> c
    java.util.List getIgnoredBytestreamRequests() -> d
    void disableService() -> e
    void access$000(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager) -> a
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1 -> org.jivesoftware.smackx.bytestreams.ibb.c:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1$1 -> org.jivesoftware.smackx.bytestreams.ibb.d:
    org.jivesoftware.smack.XMPPConnection val$connection -> a
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1 this$0 -> b
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType -> org.jivesoftware.smackx.bytestreams.ibb.e:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType IQ -> a
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType MESSAGE -> b
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType[] $VALUES -> c
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType[] values() -> values
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest -> org.jivesoftware.smackx.bytestreams.ibb.f:
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open byteStreamRequest -> a
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> b
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession -> org.jivesoftware.smackx.bytestreams.ibb.g:
    org.jivesoftware.smack.XMPPConnection connection -> a
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open byteStreamRequest -> b
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream inputStream -> c
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream outputStream -> d
    java.lang.String remoteJID -> e
    boolean closeBothStreamsEnabled -> f
    boolean isClosed -> g
    void close() -> a
    void closeByPeer(org.jivesoftware.smackx.bytestreams.ibb.packet.Close) -> a
    void closeByLocal(boolean) -> a
    org.jivesoftware.smack.XMPPConnection access$800(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> a
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open access$1100(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> b
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.h:
    org.jivesoftware.smack.PacketListener dataPacketListener -> c
    java.util.concurrent.BlockingQueue dataQueue -> a
    byte[] buffer -> d
    int bufferPointer -> e
    long seq -> f
    boolean isClosed -> g
    boolean closeInvoked -> h
    int readTimeout -> i
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> b
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    boolean loadBuffer() -> a
    void checkClosed() -> b
    boolean markSupported() -> markSupported
    void close() -> close
    void closeInternal() -> c
    void cleanup() -> d
    void access$500(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> a
    void access$600(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> b
    boolean access$700(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> c
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.i:
    byte[] buffer -> a
    int bufferPointer -> b
    long seq -> c
    boolean isClosed -> d
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> e
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void writeOut(byte[],int,int) -> a
    void flush() -> flush
    void flushBuffer() -> a
    void close() -> close
    void closeInternal(boolean) -> a
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener -> org.jivesoftware.smackx.bytestreams.ibb.j:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> b
    org.jivesoftware.smack.filter.PacketFilter initFilter -> c
    java.util.concurrent.ExecutorService initiationListenerExecutor -> d
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void processRequest(org.jivesoftware.smack.packet.Packet) -> a
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> a
    void shutdown() -> b
    void access$000(org.jivesoftware.smackx.bytestreams.ibb.InitiationListener,org.jivesoftware.smack.packet.Packet) -> a
    java.util.logging.Logger access$100() -> c
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener$1 -> org.jivesoftware.smackx.bytestreams.ibb.k:
    org.jivesoftware.smack.packet.Packet val$packet -> a
    org.jivesoftware.smackx.bytestreams.ibb.InitiationListener this$0 -> b
    void run() -> run
org.jivesoftware.smackx.bytestreams.ibb.packet.Close -> org.jivesoftware.smackx.bytestreams.ibb.packet.Close:
    java.lang.String sessionID -> a
    java.lang.String getSessionID() -> a
    java.lang.String getChildElementXML() -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.packet.Data -> org.jivesoftware.smackx.bytestreams.ibb.packet.Data:
    org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension dataPacketExtension -> a
    org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension getDataPacketExtension() -> a
    java.lang.String getChildElementXML() -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension -> org.jivesoftware.smackx.bytestreams.ibb.packet.a:
    java.lang.String sessionID -> a
    long seq -> b
    java.lang.String data -> c
    byte[] decodedData -> d
    java.lang.String getSessionID() -> a
    long getSeq() -> b
    byte[] getDecodedData() -> c
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> d
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.bytestreams.ibb.packet.Open -> org.jivesoftware.smackx.bytestreams.ibb.packet.Open:
    java.lang.String sessionID -> a
    int blockSize -> b
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType stanza -> c
    java.lang.String getSessionID() -> a
    int getBlockSize() -> b
    java.lang.String getChildElementXML() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener -> org.jivesoftware.smackx.bytestreams.socks5.a:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> b
    org.jivesoftware.smack.filter.PacketFilter initFilter -> c
    java.util.concurrent.ExecutorService initiationListenerExecutor -> d
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void processRequest(org.jivesoftware.smack.packet.Packet) -> a
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> a
    void shutdown() -> b
    void access$000(org.jivesoftware.smackx.bytestreams.socks5.InitiationListener,org.jivesoftware.smack.packet.Packet) -> a
    java.util.logging.Logger access$100() -> c
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener$1 -> org.jivesoftware.smackx.bytestreams.socks5.b:
    org.jivesoftware.smack.packet.Packet val$packet -> a
    org.jivesoftware.smackx.bytestreams.socks5.InitiationListener this$0 -> b
    void run() -> run
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager:
    java.util.Random randomGenerator -> a
    java.util.Map managers -> b
    org.jivesoftware.smack.XMPPConnection connection -> c
    java.util.Map userListeners -> d
    java.util.List allRequestListeners -> e
    org.jivesoftware.smackx.bytestreams.socks5.InitiationListener initiationListener -> f
    int targetResponseTimeout -> g
    int proxyConnectionTimeout -> h
    java.util.List proxyBlacklist -> i
    java.lang.String lastWorkingProxy -> j
    boolean proxyPrioritizationEnabled -> k
    java.util.List ignoredBytestreamRequests -> l
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager getBytestreamManager(org.jivesoftware.smack.XMPPConnection) -> a
    void disableService() -> a
    void replyRejectPacket(org.jivesoftware.smack.packet.IQ) -> a
    void activate() -> d
    void enableService() -> e
    org.jivesoftware.smackx.bytestreams.BytestreamListener getUserListener(java.lang.String) -> a
    java.util.List getAllRequestListeners() -> b
    java.util.List getIgnoredBytestreamRequests() -> c
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1 -> org.jivesoftware.smackx.bytestreams.socks5.c:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1$1 -> org.jivesoftware.smackx.bytestreams.socks5.d:
    org.jivesoftware.smack.XMPPConnection val$connection -> a
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1 this$0 -> b
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest -> org.jivesoftware.smackx.bytestreams.socks5.e:
    org.jivesoftware.smack.util.Cache ADDRESS_BLACKLIST -> a
    int CONNECTION_FAILURE_THRESHOLD -> b
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream bytestreamRequest -> c
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> d
    int totalConnectTimeout -> e
    int minimumConnectTimeout -> f
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy -> org.jivesoftware.smackx.bytestreams.socks5.f:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy socks5Server -> b
    boolean localSocks5ProxyEnabled -> c
    int localSocks5ProxyPort -> d
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess serverProcess -> e
    java.lang.Thread serverThread -> f
    java.net.ServerSocket serverSocket -> g
    java.util.Map connectionMap -> h
    java.util.List allowedConnections -> i
    java.util.Set localAddresses -> j
    boolean isLocalSocks5ProxyEnabled() -> a
    int getLocalSocks5ProxyPort() -> b
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy getSocks5Proxy() -> c
    void start() -> d
    void stop() -> e
    boolean isRunning() -> f
    java.net.ServerSocket access$100(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> a
    java.util.List access$200(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> b
    java.util.Map access$300(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> c
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$1 -> org.jivesoftware.smackx.bytestreams.socks5.g:
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess -> org.jivesoftware.smackx.bytestreams.socks5.h:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy this$0 -> a
    void run() -> run
    void establishConnection(java.net.Socket) -> a
org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils -> org.jivesoftware.smackx.bytestreams.socks5.i:
    byte[] receiveSocks5Message(java.io.DataInputStream) -> a
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream:
    java.lang.String sessionID -> a
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode mode -> b
    java.util.List streamHosts -> c
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed usedHost -> d
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate toActivate -> e
    void setSessionID(java.lang.String) -> a
    java.lang.String getSessionID() -> a
    void setMode(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode) -> a
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode getMode() -> b
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost addStreamHost(java.lang.String,java.lang.String) -> a
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost addStreamHost(java.lang.String,java.lang.String,int) -> a
    void addStreamHost(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost) -> a
    java.util.Collection getStreamHosts() -> c
    int countStreamHosts() -> d
    void setUsedHost(java.lang.String) -> b
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed getUsedHost() -> e
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate getToActivate() -> f
    void setToActivate(java.lang.String) -> c
    java.lang.String getChildElementXML() -> g
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate -> org.jivesoftware.smackx.bytestreams.socks5.packet.a:
    java.lang.String NAMESPACE -> a
    java.lang.String ELEMENTNAME -> b
    java.lang.String target -> c
    java.lang.String getTarget() -> a
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> b
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode -> org.jivesoftware.smackx.bytestreams.socks5.packet.b:
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode tcp -> a
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode udp -> b
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode[] $VALUES -> c
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode[] values() -> values
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode fromName(java.lang.String) -> a
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost -> org.jivesoftware.smackx.bytestreams.socks5.packet.c:
    java.lang.String NAMESPACE -> a
    java.lang.String ELEMENTNAME -> b
    java.lang.String JID -> c
    java.lang.String addy -> d
    int port -> e
    java.lang.String getJID() -> a
    java.lang.String getAddress() -> b
    void setPort(int) -> a
    int getPort() -> c
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> d
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed -> org.jivesoftware.smackx.bytestreams.socks5.packet.d:
    java.lang.String NAMESPACE -> a
    java.lang.String ELEMENTNAME -> b
    java.lang.String JID -> c
    java.lang.String getJID() -> a
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> b
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider -> org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.caps.EntityCapsManager -> org.jivesoftware.smackx.caps.a:
    java.util.logging.Logger LOGGER -> d
    java.util.Map SUPPORTED_HASHES -> e
    java.lang.String DEFAULT_ENTITY_NODE -> f
    org.jivesoftware.smackx.caps.cache.EntityCapsPersistentCache persistentCache -> a
    boolean autoEnableEntityCaps -> g
    java.util.Map instances -> h
    org.jivesoftware.smack.filter.PacketFilter PRESENCES_WITH_CAPS -> i
    org.jivesoftware.smack.filter.PacketFilter PRESENCES_WITHOUT_CAPS -> j
    org.jivesoftware.smack.filter.PacketFilter PRESENCES -> k
    java.util.Map caps -> b
    java.util.Map jidCaps -> c
    org.jivesoftware.smackx.disco.ServiceDiscoveryManager sdm -> l
    boolean entityCapsEnabled -> m
    java.lang.String currentCapsVersion -> n
    boolean presenceSend -> o
    java.util.Queue lastLocalCapsVersions -> p
    java.lang.String entityNode -> q
    void addDiscoverInfoByNode(java.lang.String,org.jivesoftware.smackx.disco.packet.DiscoverInfo) -> a
    org.jivesoftware.smackx.caps.EntityCapsManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
    void enableEntityCaps() -> a
    boolean entityCapsEnabled() -> b
    java.lang.String getCapsVersion() -> c
    java.lang.String getLocalNodeVer() -> d
    void updateLocalEntityCaps() -> e
    java.lang.String generateVerificationString(org.jivesoftware.smackx.disco.packet.DiscoverInfo,java.lang.String) -> a
    void formFieldValuesToCaps(java.util.List,java.lang.StringBuilder) -> a
    boolean access$102(org.jivesoftware.smackx.caps.EntityCapsManager,boolean) -> a
    java.util.Map access$200() -> f
    boolean access$300(org.jivesoftware.smackx.caps.EntityCapsManager) -> a
    java.lang.String access$400(org.jivesoftware.smackx.caps.EntityCapsManager) -> b
    org.jivesoftware.smackx.disco.ServiceDiscoveryManager access$500(org.jivesoftware.smackx.caps.EntityCapsManager) -> c
org.jivesoftware.smackx.caps.EntityCapsManager$1 -> org.jivesoftware.smackx.caps.b:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.caps.EntityCapsManager$2 -> org.jivesoftware.smackx.caps.c:
    org.jivesoftware.smackx.caps.EntityCapsManager this$0 -> a
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
org.jivesoftware.smackx.caps.EntityCapsManager$3 -> org.jivesoftware.smackx.caps.d:
    org.jivesoftware.smackx.caps.EntityCapsManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.caps.EntityCapsManager$4 -> org.jivesoftware.smackx.caps.e:
    org.jivesoftware.smackx.caps.EntityCapsManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.caps.EntityCapsManager$5 -> org.jivesoftware.smackx.caps.f:
    org.jivesoftware.smackx.caps.EntityCapsManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.caps.EntityCapsManager$6 -> org.jivesoftware.smackx.caps.g:
    org.jivesoftware.smackx.caps.EntityCapsManager this$0 -> a
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.caps.EntityCapsManager$7 -> org.jivesoftware.smackx.caps.h:
    java.util.List features -> a
    java.util.List packetExtensions -> b
    java.util.List val$identities -> c
    org.jivesoftware.smackx.caps.EntityCapsManager this$0 -> d
    java.util.List getNodeItems() -> a
    java.util.List getNodeFeatures() -> b
    java.util.List getNodeIdentities() -> c
    java.util.List getNodePacketExtensions() -> d
org.jivesoftware.smackx.caps.EntityCapsManager$8 -> org.jivesoftware.smackx.caps.i:
    int compare(org.jivesoftware.smackx.xdata.FormField,org.jivesoftware.smackx.xdata.FormField) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jivesoftware.smackx.caps.EntityCapsManager$NodeVerHash -> org.jivesoftware.smackx.caps.j:
    java.lang.String node -> a
    java.lang.String hash -> b
    java.lang.String ver -> c
    java.lang.String nodeVer -> d
org.jivesoftware.smackx.caps.cache.EntityCapsPersistentCache -> org.jivesoftware.smackx.caps.a.a:
    void addDiscoverInfoByNodePersistent(java.lang.String,org.jivesoftware.smackx.disco.packet.DiscoverInfo) -> a
org.jivesoftware.smackx.caps.packet.CapsExtension -> org.jivesoftware.smackx.caps.b.a:
    java.lang.String node -> a
    java.lang.String ver -> b
    java.lang.String hash -> c
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getNode() -> a
    java.lang.String getVer() -> b
    java.lang.String getHash() -> c
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.caps.provider.CapsExtensionProvider -> org.jivesoftware.smackx.caps.provider.CapsExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.carbons.CarbonManager -> org.jivesoftware.smackx.carbons.a:
    java.util.Map instances -> a
    boolean enabled_state -> b
    org.jivesoftware.smackx.carbons.CarbonManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
org.jivesoftware.smackx.carbons.CarbonManager$1 -> org.jivesoftware.smackx.carbons.b:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.carbons.CarbonManager$2 -> org.jivesoftware.smackx.carbons.CarbonManager$2:
    boolean val$new_state -> a
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.carbons.packet.CarbonExtension -> org.jivesoftware.smackx.carbons.a.a:
    org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction dir -> a
    org.jivesoftware.smackx.forward.Forwarded fwd -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction -> org.jivesoftware.smackx.carbons.a.b:
    org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction received -> a
    org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction sent -> b
    org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction[] $VALUES -> c
    org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction[] values() -> values
    org.jivesoftware.smackx.carbons.packet.CarbonExtension$Direction valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.carbons.provider.CarbonManagerProvider -> org.jivesoftware.smackx.carbons.provider.CarbonManagerProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.chatstates.ChatState -> org.jivesoftware.smackx.chatstates.a:
    org.jivesoftware.smackx.chatstates.ChatState active -> a
    org.jivesoftware.smackx.chatstates.ChatState composing -> b
    org.jivesoftware.smackx.chatstates.ChatState paused -> c
    org.jivesoftware.smackx.chatstates.ChatState inactive -> d
    org.jivesoftware.smackx.chatstates.ChatState gone -> e
    org.jivesoftware.smackx.chatstates.ChatState[] $VALUES -> f
    org.jivesoftware.smackx.chatstates.ChatState[] values() -> values
    org.jivesoftware.smackx.chatstates.ChatState valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.chatstates.packet.ChatStateExtension -> org.jivesoftware.smackx.chatstates.packet.ChatStateExtension:
    org.jivesoftware.smackx.chatstates.ChatState state -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.chatstates.packet.ChatStateExtension$Provider -> org.jivesoftware.smackx.chatstates.packet.ChatStateExtension$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.commands.AdHocCommand -> org.jivesoftware.smackx.commands.a:
    org.jivesoftware.smackx.commands.packet.AdHocCommandData data -> a
    void setName(java.lang.String) -> a
    void setNode(java.lang.String) -> b
    void execute() -> a
    void next(org.jivesoftware.smackx.xdata.Form) -> a
    void complete(org.jivesoftware.smackx.xdata.Form) -> b
    void prev() -> b
    void cancel() -> c
    java.util.List getActions() -> d
    org.jivesoftware.smackx.commands.AdHocCommand$Action getExecuteAction() -> e
    void setData(org.jivesoftware.smackx.commands.packet.AdHocCommandData) -> a
    org.jivesoftware.smackx.commands.packet.AdHocCommandData getData() -> f
    boolean isValidAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> a
org.jivesoftware.smackx.commands.AdHocCommand$Action -> org.jivesoftware.smackx.commands.b:
    org.jivesoftware.smackx.commands.AdHocCommand$Action execute -> a
    org.jivesoftware.smackx.commands.AdHocCommand$Action cancel -> b
    org.jivesoftware.smackx.commands.AdHocCommand$Action prev -> c
    org.jivesoftware.smackx.commands.AdHocCommand$Action next -> d
    org.jivesoftware.smackx.commands.AdHocCommand$Action complete -> e
    org.jivesoftware.smackx.commands.AdHocCommand$Action unknown -> f
    org.jivesoftware.smackx.commands.AdHocCommand$Action[] $VALUES -> g
    org.jivesoftware.smackx.commands.AdHocCommand$Action[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$Action valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition -> org.jivesoftware.smackx.commands.c:
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badAction -> a
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition malformedAction -> b
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badLocale -> c
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badPayload -> d
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badSessionid -> e
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition sessionExpired -> f
    java.lang.String value -> g
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition[] $VALUES -> h
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.jivesoftware.smackx.commands.AdHocCommand$Status -> org.jivesoftware.smackx.commands.d:
    org.jivesoftware.smackx.commands.AdHocCommand$Status executing -> a
    org.jivesoftware.smackx.commands.AdHocCommand$Status completed -> b
    org.jivesoftware.smackx.commands.AdHocCommand$Status canceled -> c
    org.jivesoftware.smackx.commands.AdHocCommand$Status[] $VALUES -> d
    org.jivesoftware.smackx.commands.AdHocCommand$Status[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$Status valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.AdHocCommandManager -> org.jivesoftware.smackx.commands.AdHocCommandManager:
    java.util.Map instances -> a
    java.util.Map commands -> b
    java.util.Map executingCommands -> c
    org.jivesoftware.smackx.disco.ServiceDiscoveryManager serviceDiscoveryManager -> d
    java.lang.Thread sessionsSweeper -> e
    org.jivesoftware.smackx.commands.AdHocCommandManager getAddHocCommandsManager(org.jivesoftware.smack.XMPPConnection) -> a
    void processAdHocCommand(org.jivesoftware.smackx.commands.packet.AdHocCommandData) -> a
    void respondError(org.jivesoftware.smackx.commands.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError$Condition) -> a
    void respondError(org.jivesoftware.smackx.commands.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError$Condition,org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition) -> a
    void respondError(org.jivesoftware.smackx.commands.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError) -> a
    org.jivesoftware.smackx.commands.LocalCommand newInstanceOfCmd(java.lang.String,java.lang.String) -> a
    java.util.Collection getRegisteredCommands() -> a
    java.util.Collection access$000(org.jivesoftware.smackx.commands.AdHocCommandManager) -> a
    void access$100(org.jivesoftware.smackx.commands.AdHocCommandManager,org.jivesoftware.smackx.commands.packet.AdHocCommandData) -> a
    java.util.Map access$200(org.jivesoftware.smackx.commands.AdHocCommandManager) -> b
org.jivesoftware.smackx.commands.AdHocCommandManager$1 -> org.jivesoftware.smackx.commands.e:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.commands.AdHocCommandManager$2 -> org.jivesoftware.smackx.commands.f:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> a
    java.util.List getNodeItems() -> a
    java.util.List getNodeFeatures() -> b
    java.util.List getNodeIdentities() -> c
    java.util.List getNodePacketExtensions() -> d
org.jivesoftware.smackx.commands.AdHocCommandManager$3 -> org.jivesoftware.smackx.commands.g:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.commands.AdHocCommandManager$6 -> org.jivesoftware.smackx.commands.h:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> a
    void run() -> run
org.jivesoftware.smackx.commands.AdHocCommandManager$AdHocCommandInfo -> org.jivesoftware.smackx.commands.i:
    java.lang.String node -> a
    java.lang.String name -> b
    java.lang.String ownerJID -> c
    org.jivesoftware.smackx.commands.LocalCommandFactory factory -> d
    org.jivesoftware.smackx.commands.LocalCommand getCommandInstance() -> a
    java.lang.String getName() -> b
    java.lang.String getNode() -> c
    java.lang.String getOwnerJID() -> d
org.jivesoftware.smackx.commands.AdHocCommandNote -> org.jivesoftware.smackx.commands.j:
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type type -> a
    java.lang.String value -> b
    java.lang.String getValue() -> a
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type getType() -> b
org.jivesoftware.smackx.commands.AdHocCommandNote$Type -> org.jivesoftware.smackx.commands.k:
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type info -> a
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type warn -> b
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type error -> c
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type[] $VALUES -> d
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.LocalCommand -> org.jivesoftware.smackx.commands.l:
    long creationDate -> a
    java.lang.String sessionID -> b
    int currenStage -> c
    void setSessionID(java.lang.String) -> c
    long getCreationDate() -> g
    boolean isLastStage() -> h
    boolean hasPermission(java.lang.String) -> d
    void setData(org.jivesoftware.smackx.commands.packet.AdHocCommandData) -> a
    void incrementStage() -> i
    void decrementStage() -> j
org.jivesoftware.smackx.commands.LocalCommandFactory -> org.jivesoftware.smackx.commands.m:
    org.jivesoftware.smackx.commands.LocalCommand getInstance() -> a
org.jivesoftware.smackx.commands.packet.AdHocCommandData -> org.jivesoftware.smackx.commands.packet.AdHocCommandData:
    java.lang.String id -> a
    java.lang.String name -> b
    java.lang.String node -> c
    java.lang.String sessionID -> d
    java.util.List notes -> e
    org.jivesoftware.smackx.xdata.packet.DataForm form -> f
    org.jivesoftware.smackx.commands.AdHocCommand$Action action -> g
    org.jivesoftware.smackx.commands.AdHocCommand$Status status -> h
    java.util.ArrayList actions -> i
    org.jivesoftware.smackx.commands.AdHocCommand$Action executeAction -> j
    java.lang.String lang -> k
    java.lang.String getChildElementXML() -> a
    void setId(java.lang.String) -> a
    void setName(java.lang.String) -> b
    java.lang.String getNode() -> b
    void setNode(java.lang.String) -> c
    void addNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> a
    org.jivesoftware.smackx.xdata.packet.DataForm getForm() -> c
    void setForm(org.jivesoftware.smackx.xdata.packet.DataForm) -> a
    org.jivesoftware.smackx.commands.AdHocCommand$Action getAction() -> d
    void setAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> a
    void setStatus(org.jivesoftware.smackx.commands.AdHocCommand$Status) -> a
    java.util.List getActions() -> e
    void addAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> b
    void setExecuteAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> c
    org.jivesoftware.smackx.commands.AdHocCommand$Action getExecuteAction() -> f
    void setSessionID(java.lang.String) -> d
    java.lang.String getSessionID() -> g
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.commands.packet.AdHocCommandData$SpecificError -> org.jivesoftware.smackx.commands.packet.a:
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition condition -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadActionError -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadActionError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadLocaleError -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadLocaleError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadPayloadError -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadPayloadError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadSessionIDError -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$BadSessionIDError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$MalformedActionError -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$MalformedActionError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$SessionExpiredError -> org.jivesoftware.smackx.commands.provider.AdHocCommandDataProvider$SessionExpiredError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.delay.packet.DelayInfo -> org.jivesoftware.smackx.delay.a.a:
    org.jivesoftware.smackx.delay.packet.DelayInformation wrappedInfo -> a
    java.lang.String getFrom() -> a
    java.lang.String getReason() -> b
    java.util.Date getStamp() -> c
    void setFrom(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> d
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.delay.packet.DelayInformation -> org.jivesoftware.smackx.delay.a.b:
    java.text.DateFormat XEP_0091_UTC_FORMAT -> b
    java.util.Date stamp -> a
    java.lang.String from -> c
    java.lang.String reason -> d
    java.lang.String getFrom() -> a
    void setFrom(java.lang.String) -> a
    java.util.Date getStamp() -> c
    java.lang.String getReason() -> b
    void setReason(java.lang.String) -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> d
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.delay.provider.DelayInfoProvider -> org.jivesoftware.smackx.delay.provider.DelayInfoProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.delay.provider.DelayInformationProvider -> org.jivesoftware.smackx.delay.provider.DelayInformationProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.disco.NodeInformationProvider -> org.jivesoftware.smackx.disco.a:
    java.util.List getNodeItems() -> a
    java.util.List getNodeFeatures() -> b
    java.util.List getNodeIdentities() -> c
    java.util.List getNodePacketExtensions() -> d
org.jivesoftware.smackx.disco.ServiceDiscoveryManager -> org.jivesoftware.smackx.disco.ServiceDiscoveryManager:
    org.jivesoftware.smackx.disco.packet.DiscoverInfo$Identity defaultIdentity -> a
    java.util.Set identities -> b
    org.jivesoftware.smackx.disco.packet.DiscoverInfo$Identity identity -> c
    org.jivesoftware.smackx.caps.EntityCapsManager capsManager -> d
    java.util.Map instances -> e
    java.util.Set features -> f
    org.jivesoftware.smackx.xdata.packet.DataForm extendedInfo -> g
    java.util.Map nodeInformationProviders -> h
    java.util.Set getIdentities() -> a
    org.jivesoftware.smackx.disco.ServiceDiscoveryManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
    void addDiscoverInfoTo(org.jivesoftware.smackx.disco.packet.DiscoverInfo) -> a
    org.jivesoftware.smackx.disco.NodeInformationProvider getNodeInformationProvider(java.lang.String) -> e
    void setNodeInformationProvider(java.lang.String,org.jivesoftware.smackx.disco.NodeInformationProvider) -> a
    void removeNodeInformationProvider(java.lang.String) -> a
    java.util.List getFeatures() -> b
    java.util.List getFeaturesList() -> c
    void addFeature(java.lang.String) -> b
    void removeFeature(java.lang.String) -> c
    boolean includesFeature(java.lang.String) -> d
    java.util.List getExtendedInfoAsList() -> d
    void setEntityCapsManager(org.jivesoftware.smackx.caps.EntityCapsManager) -> a
    void renewEntityCapsVersion() -> e
    org.jivesoftware.smack.XMPPConnection access$000(org.jivesoftware.smackx.disco.ServiceDiscoveryManager) -> a
    org.jivesoftware.smackx.disco.NodeInformationProvider access$100(org.jivesoftware.smackx.disco.ServiceDiscoveryManager,java.lang.String) -> a
    org.jivesoftware.smack.XMPPConnection access$200(org.jivesoftware.smackx.disco.ServiceDiscoveryManager) -> b
org.jivesoftware.smackx.disco.ServiceDiscoveryManager$1 -> org.jivesoftware.smackx.disco.b:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.disco.ServiceDiscoveryManager$2 -> org.jivesoftware.smackx.disco.c:
    org.jivesoftware.smackx.disco.ServiceDiscoveryManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.disco.ServiceDiscoveryManager$3 -> org.jivesoftware.smackx.disco.d:
    org.jivesoftware.smackx.disco.ServiceDiscoveryManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.disco.packet.DiscoverInfo -> org.jivesoftware.smackx.disco.packet.DiscoverInfo:
    java.util.List features -> a
    java.util.List identities -> b
    java.lang.String node -> c
    void addFeature(java.lang.String) -> a
    void addFeatures(java.util.Collection) -> a
    void addFeature(org.jivesoftware.smackx.disco.packet.DiscoverInfo$Feature) -> a
    java.util.List getFeatures() -> a
    void addIdentity(org.jivesoftware.smackx.disco.packet.DiscoverInfo$Identity) -> a
    void addIdentities(java.util.Collection) -> b
    java.util.List getIdentities() -> b
    java.lang.String getNode() -> c
    void setNode(java.lang.String) -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
    org.jivesoftware.smackx.disco.packet.DiscoverInfo clone() -> d
    java.lang.Object clone() -> clone
org.jivesoftware.smackx.disco.packet.DiscoverInfo$Feature -> org.jivesoftware.smackx.disco.packet.a:
    java.lang.String variable -> a
    java.lang.String getVar() -> a
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.jivesoftware.smackx.disco.packet.DiscoverInfo$Feature clone() -> c
    java.lang.Object clone() -> clone
org.jivesoftware.smackx.disco.packet.DiscoverInfo$Identity -> org.jivesoftware.smackx.disco.packet.b:
    java.lang.String category -> a
    java.lang.String name -> b
    java.lang.String type -> c
    java.lang.String lang -> d
    java.lang.String getCategory() -> a
    java.lang.String getName() -> b
    java.lang.String getType() -> c
    void setLanguage(java.lang.String) -> a
    java.lang.String getLanguage() -> d
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.jivesoftware.smackx.disco.packet.DiscoverInfo$Identity) -> a
    org.jivesoftware.smackx.disco.packet.DiscoverInfo$Identity clone() -> f
    java.lang.Object clone() -> clone
    int compareTo(java.lang.Object) -> compareTo
org.jivesoftware.smackx.disco.packet.DiscoverItems -> org.jivesoftware.smackx.disco.packet.DiscoverItems:
    java.util.List items -> a
    java.lang.String node -> b
    void addItem(org.jivesoftware.smackx.disco.packet.DiscoverItems$Item) -> a
    void addItems(java.util.Collection) -> a
    java.lang.String getNode() -> a
    void setNode(java.lang.String) -> a
    org.jivesoftware.smack.util.XmlStringBuilder getChildElementXML() -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.disco.packet.DiscoverItems$Item -> org.jivesoftware.smackx.disco.packet.c:
    java.lang.String entityID -> a
    java.lang.String name -> b
    java.lang.String node -> c
    java.lang.String action -> d
    void setName(java.lang.String) -> a
    void setNode(java.lang.String) -> b
    void setAction(java.lang.String) -> c
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> a
org.jivesoftware.smackx.disco.provider.DiscoverInfoProvider -> org.jivesoftware.smackx.disco.provider.DiscoverInfoProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.disco.provider.DiscoverItemsProvider -> org.jivesoftware.smackx.disco.provider.DiscoverItemsProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.filetransfer.FileTransferManager -> org.jivesoftware.smackx.filetransfer.FileTransferManager:
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator -> org.jivesoftware.smackx.filetransfer.a:
    java.lang.String[] NAMESPACE -> b
    java.util.Map transferObject -> c
    java.util.Random randomGenerator -> d
    boolean IBB_ONLY -> a
org.jivesoftware.smackx.filetransfer.FileTransferNegotiator$1 -> org.jivesoftware.smackx.filetransfer.FileTransferNegotiator$1:
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.forward.Forwarded -> org.jivesoftware.smackx.forward.a:
    org.jivesoftware.smackx.delay.packet.DelayInfo delay -> a
    org.jivesoftware.smack.packet.Packet forwardedPacket -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.forward.provider.ForwardedProvider -> org.jivesoftware.smackx.forward.provider.ForwardedProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp -> org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp:
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$AbstractBody -> org.jivesoftware.smackx.hoxt.packet.a:
    org.jivesoftware.smackx.shim.packet.HeadersExtension headers -> b
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Data data -> c
    java.lang.String version -> a
    java.lang.String toXML() -> a
    java.lang.String getStartTag() -> b
    java.lang.String getEndTag() -> c
    void setVersion(java.lang.String) -> a
    void setHeaders(org.jivesoftware.smackx.shim.packet.HeadersExtension) -> a
    void setData(org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Data) -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Base64 -> org.jivesoftware.smackx.hoxt.packet.b:
    java.lang.String text -> a
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$ChunkedBase64 -> org.jivesoftware.smackx.hoxt.packet.c:
    java.lang.String streamId -> a
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Data -> org.jivesoftware.smackx.hoxt.packet.d:
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$DataChild child -> a
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$DataChild -> org.jivesoftware.smackx.hoxt.packet.e:
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Ibb -> org.jivesoftware.smackx.hoxt.packet.f:
    java.lang.String sid -> a
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Text -> org.jivesoftware.smackx.hoxt.packet.g:
    java.lang.String text -> a
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Xml -> org.jivesoftware.smackx.hoxt.packet.h:
    java.lang.String text -> a
    java.lang.String toXML() -> a
org.jivesoftware.smackx.hoxt.packet.Base64BinaryChunk -> org.jivesoftware.smackx.hoxt.packet.i:
    java.lang.String streamId -> a
    boolean last -> b
    java.lang.String text -> c
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.hoxt.packet.HttpMethod -> org.jivesoftware.smackx.hoxt.packet.j:
    org.jivesoftware.smackx.hoxt.packet.HttpMethod OPTIONS -> a
    org.jivesoftware.smackx.hoxt.packet.HttpMethod GET -> b
    org.jivesoftware.smackx.hoxt.packet.HttpMethod HEAD -> c
    org.jivesoftware.smackx.hoxt.packet.HttpMethod POST -> d
    org.jivesoftware.smackx.hoxt.packet.HttpMethod PUT -> e
    org.jivesoftware.smackx.hoxt.packet.HttpMethod DELETE -> f
    org.jivesoftware.smackx.hoxt.packet.HttpMethod TRACE -> g
    org.jivesoftware.smackx.hoxt.packet.HttpMethod PATCH -> h
    org.jivesoftware.smackx.hoxt.packet.HttpMethod[] $VALUES -> i
    org.jivesoftware.smackx.hoxt.packet.HttpMethod[] values() -> values
    org.jivesoftware.smackx.hoxt.packet.HttpMethod valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq -> org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq:
    org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq$Req req -> a
    java.lang.String getChildElementXML() -> a
    void setReq(org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq$Req) -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppReq$Req -> org.jivesoftware.smackx.hoxt.packet.k:
    org.jivesoftware.smackx.hoxt.packet.HttpMethod method -> b
    java.lang.String resource -> c
    int maxChunkSize -> d
    boolean sipub -> e
    boolean ibb -> f
    boolean jingle -> g
    java.lang.String getStartTag() -> b
    java.lang.String getEndTag() -> c
    void setMaxChunkSize(int) -> a
    void setSipub(boolean) -> a
    void setIbb(boolean) -> b
    void setJingle(boolean) -> c
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp -> org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp:
    org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp$Resp resp -> a
    java.lang.String getChildElementXML() -> a
    void setResp(org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp$Resp) -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.hoxt.packet.HttpOverXmppResp$Resp -> org.jivesoftware.smackx.hoxt.packet.l:
    int statusCode -> b
    java.lang.String statusMessage -> c
    java.lang.String getStartTag() -> b
    java.lang.String getEndTag() -> c
    void setStatusCode(int) -> a
    void setStatusMessage(java.lang.String) -> b
org.jivesoftware.smackx.hoxt.provider.AbstractHttpOverXmppProvider -> org.jivesoftware.smackx.hoxt.provider.AbstractHttpOverXmppProvider:
    void parseHeadersAndData(org.xmlpull.v1.XmlPullParser,java.lang.String,org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$AbstractBody) -> a
    org.jivesoftware.smackx.shim.packet.HeadersExtension parseHeaders(org.xmlpull.v1.XmlPullParser) -> a
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Data parseData(org.xmlpull.v1.XmlPullParser) -> b
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Text parseText(org.xmlpull.v1.XmlPullParser) -> c
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Xml parseXml(org.xmlpull.v1.XmlPullParser) -> d
    void appendXmlAttributes(org.xmlpull.v1.XmlPullParser,java.lang.StringBuilder) -> a
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Base64 parseBase64(org.xmlpull.v1.XmlPullParser) -> e
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$ChunkedBase64 parseChunkedBase64(org.xmlpull.v1.XmlPullParser) -> f
    org.jivesoftware.smackx.hoxt.packet.AbstractHttpOverXmpp$Ibb parseIbb(org.xmlpull.v1.XmlPullParser) -> g
org.jivesoftware.smackx.hoxt.provider.Base64BinaryChunkProvider -> org.jivesoftware.smackx.hoxt.provider.Base64BinaryChunkProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.hoxt.provider.HttpOverXmppReqProvider -> org.jivesoftware.smackx.hoxt.provider.HttpOverXmppReqProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.hoxt.provider.HttpOverXmppRespProvider -> org.jivesoftware.smackx.hoxt.provider.HttpOverXmppRespProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.iqlast.LastActivityManager -> org.jivesoftware.smackx.iqlast.LastActivityManager:
    java.util.Map instances -> a
    org.jivesoftware.smack.filter.PacketFilter IQ_GET_LAST_FILTER -> b
    boolean enabledPerDefault -> c
    long lastMessageSent -> d
    boolean enabled -> e
    org.jivesoftware.smackx.iqlast.LastActivityManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
    void enable() -> a
    void resetIdleTime() -> b
    long getIdleTime() -> c
    void access$000(org.jivesoftware.smackx.iqlast.LastActivityManager) -> a
    boolean access$100(org.jivesoftware.smackx.iqlast.LastActivityManager) -> b
    long access$200(org.jivesoftware.smackx.iqlast.LastActivityManager) -> c
    org.jivesoftware.smack.XMPPConnection access$300(org.jivesoftware.smackx.iqlast.LastActivityManager) -> d
org.jivesoftware.smackx.iqlast.LastActivityManager$1 -> org.jivesoftware.smackx.iqlast.a:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.iqlast.LastActivityManager$2 -> org.jivesoftware.smackx.iqlast.b:
    org.jivesoftware.smackx.iqlast.LastActivityManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.iqlast.LastActivityManager$3 -> org.jivesoftware.smackx.iqlast.c:
    org.jivesoftware.smackx.iqlast.LastActivityManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.iqlast.LastActivityManager$4 -> org.jivesoftware.smackx.iqlast.d:
    org.jivesoftware.smackx.iqlast.LastActivityManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.iqlast.LastActivityManager$5 -> org.jivesoftware.smackx.iqlast.e:
    int[] $SwitchMap$org$jivesoftware$smack$packet$Presence$Mode -> a
org.jivesoftware.smackx.iqlast.packet.LastActivity -> org.jivesoftware.smackx.iqlast.packet.LastActivity:
    long lastActivity -> a
    java.lang.String message -> b
    org.jivesoftware.smack.util.XmlStringBuilder getChildElementXML() -> a
    void setLastActivity(long) -> a
    void setMessage(java.lang.String) -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
    void access$000(org.jivesoftware.smackx.iqlast.packet.LastActivity,java.lang.String) -> a
org.jivesoftware.smackx.iqlast.packet.LastActivity$Provider -> org.jivesoftware.smackx.iqlast.packet.LastActivity$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.iqprivate.PrivateDataManager -> org.jivesoftware.smackx.iqprivate.PrivateDataManager:
    java.util.Map instances -> a
    java.util.Map privateDataProviders -> b
    org.jivesoftware.smackx.iqprivate.provider.PrivateDataProvider getPrivateDataProvider(java.lang.String,java.lang.String) -> a
    java.lang.String getProviderKey(java.lang.String,java.lang.String) -> b
org.jivesoftware.smackx.iqprivate.PrivateDataManager$1 -> org.jivesoftware.smackx.iqprivate.PrivateDataManager$1:
    java.lang.String val$elementName -> a
    java.lang.String val$namespace -> b
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.iqprivate.PrivateDataManager$2 -> org.jivesoftware.smackx.iqprivate.PrivateDataManager$2:
    org.jivesoftware.smackx.iqprivate.packet.PrivateData val$privateData -> a
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.iqprivate.PrivateDataManager$PrivateDataIQProvider -> org.jivesoftware.smackx.iqprivate.PrivateDataManager$PrivateDataIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.iqprivate.PrivateDataManager$PrivateDataResult -> org.jivesoftware.smackx.iqprivate.PrivateDataManager$PrivateDataResult:
    org.jivesoftware.smackx.iqprivate.packet.PrivateData privateData -> a
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.iqprivate.packet.DefaultPrivateData -> org.jivesoftware.smackx.iqprivate.a.a:
    java.lang.String elementName -> a
    java.lang.String namespace -> b
    java.util.Map map -> c
    java.lang.String toXML() -> a
    java.util.Set getNames() -> b
    java.lang.String getValue(java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String) -> a
    java.lang.CharSequence toXML() -> c
org.jivesoftware.smackx.iqprivate.packet.PrivateData -> org.jivesoftware.smackx.iqprivate.a.b:
    java.lang.CharSequence toXML() -> c
org.jivesoftware.smackx.iqprivate.provider.PrivateDataProvider -> org.jivesoftware.smackx.iqprivate.b.a:
    org.jivesoftware.smackx.iqprivate.packet.PrivateData parsePrivateData(org.xmlpull.v1.XmlPullParser) -> a
org.jivesoftware.smackx.iqversion.packet.Version -> org.jivesoftware.smackx.iqversion.packet.Version:
    java.lang.String name -> a
    java.lang.String version -> b
    java.lang.String os -> c
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.iqversion.provider.VersionProvider -> org.jivesoftware.smackx.iqversion.provider.VersionProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.jiveproperties.JivePropertiesManager -> org.jivesoftware.smackx.jiveproperties.a:
    boolean javaObjectEnabled -> a
    boolean isJavaObjectEnabled() -> a
org.jivesoftware.smackx.jiveproperties.packet.JivePropertiesExtension -> org.jivesoftware.smackx.jiveproperties.a.a:
    java.util.logging.Logger LOGGER -> a
    java.util.Map properties -> b
    java.lang.Object getProperty(java.lang.String) -> a
    java.util.Collection getPropertyNames() -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.jiveproperties.provider.JivePropertiesExtensionProvider -> org.jivesoftware.smackx.jiveproperties.provider.JivePropertiesExtensionProvider:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector -> org.jivesoftware.smackx.muc.a:
    java.util.concurrent.ArrayBlockingQueue resultQueue -> a
    org.jivesoftware.smack.packet.Packet pollResult() -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> a
org.jivesoftware.smackx.muc.DiscussionHistory -> org.jivesoftware.smackx.muc.b:
    int maxChars -> a
    int maxStanzas -> b
    int seconds -> c
    java.util.Date since -> d
    boolean isConfigured() -> b
    org.jivesoftware.smackx.muc.packet.MUCInitialPresence$History getMUCHistory() -> a
org.jivesoftware.smackx.muc.InvitationRejectionListener -> org.jivesoftware.smackx.muc.c:
    void invitationDeclined(java.lang.String,java.lang.String) -> a
org.jivesoftware.smackx.muc.MultiUserChat -> org.jivesoftware.smackx.muc.MultiUserChat:
    java.util.logging.Logger LOGGER -> a
    java.util.Map joinedRooms -> b
    org.jivesoftware.smack.XMPPConnection connection -> c
    java.lang.String room -> d
    java.lang.String subject -> e
    java.lang.String nickname -> f
    boolean joined -> g
    java.util.Map occupantsMap -> h
    java.util.List invitationRejectionListeners -> i
    java.util.List subjectUpdatedListeners -> j
    java.util.List userStatusListeners -> k
    java.util.List participantStatusListeners -> l
    org.jivesoftware.smack.filter.PacketFilter presenceFilter -> m
    java.util.List presenceInterceptors -> n
    org.jivesoftware.smack.filter.PacketFilter messageFilter -> o
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor roomListenerMultiplexor -> p
    org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector messageCollector -> q
    java.util.List connectionListeners -> r
    java.util.List getJoinedRooms(org.jivesoftware.smack.XMPPConnection) -> b
    org.jivesoftware.smack.packet.Presence enter(java.lang.String,java.lang.String,org.jivesoftware.smackx.muc.DiscussionHistory,long) -> b
    void join(java.lang.String) -> a
    void join(java.lang.String,java.lang.String,org.jivesoftware.smackx.muc.DiscussionHistory,long) -> a
    boolean isJoined() -> a
    void leave() -> b
    void fireInvitationRejectionListeners(java.lang.String,java.lang.String) -> a
    void fireSubjectUpdatedListeners(java.lang.String,java.lang.String) -> b
    java.util.List getOccupants() -> c
    org.jivesoftware.smack.packet.Message createMessage() -> d
    void sendMessage(org.jivesoftware.smack.packet.Message) -> a
    org.jivesoftware.smack.packet.Message pollMessage() -> e
    void addMessageListener(org.jivesoftware.smack.PacketListener) -> a
    void userHasLeft() -> f
    org.jivesoftware.smackx.muc.packet.MUCUser getMUCUserExtension(org.jivesoftware.smack.packet.Packet) -> a
    void fireUserStatusListeners(java.lang.String,java.lang.Object[]) -> a
    void addParticipantStatusListener(org.jivesoftware.smackx.muc.ParticipantStatusListener) -> a
    void fireParticipantStatusListeners(java.lang.String,java.util.List) -> a
    void init() -> g
    void checkRoleModifications(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    void checkAffiliationModifications(java.lang.String,java.lang.String,boolean,java.lang.String) -> b
    void checkPresenceCode(java.lang.String,boolean,org.jivesoftware.smackx.muc.packet.MUCUser,java.lang.String) -> a
    void cleanup() -> h
    void finalize() -> finalize
    java.util.List access$000(org.jivesoftware.smack.XMPPConnection) -> a
    java.lang.String access$102(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String) -> a
    void access$200(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String) -> a
    java.lang.String access$300(org.jivesoftware.smackx.muc.MultiUserChat) -> a
    java.lang.String access$400(org.jivesoftware.smackx.muc.MultiUserChat) -> b
    java.util.Map access$500(org.jivesoftware.smackx.muc.MultiUserChat) -> c
    org.jivesoftware.smackx.muc.packet.MUCUser access$600(org.jivesoftware.smackx.muc.MultiUserChat,org.jivesoftware.smack.packet.Packet) -> a
    void access$700(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    void access$800(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String,boolean,java.lang.String) -> b
    void access$900(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.util.List) -> a
    void access$1000(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,boolean,org.jivesoftware.smackx.muc.packet.MUCUser,java.lang.String) -> a
    void access$1100(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String) -> b
org.jivesoftware.smackx.muc.MultiUserChat$1 -> org.jivesoftware.smackx.muc.d:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.muc.MultiUserChat$1$1 -> org.jivesoftware.smackx.muc.e:
    java.lang.ref.WeakReference val$weakRefConnection -> a
    org.jivesoftware.smackx.muc.MultiUserChat$1 this$0 -> b
    java.util.List getNodeItems() -> a
    java.util.List getNodeFeatures() -> b
    java.util.List getNodeIdentities() -> c
    java.util.List getNodePacketExtensions() -> d
org.jivesoftware.smackx.muc.MultiUserChat$3 -> org.jivesoftware.smackx.muc.f:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$4 -> org.jivesoftware.smackx.muc.g:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$5 -> org.jivesoftware.smackx.muc.h:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.PacketMultiplexListener -> org.jivesoftware.smackx.muc.i:
    org.jivesoftware.smack.filter.PacketFilter MESSAGE_FILTER -> a
    org.jivesoftware.smack.filter.PacketFilter PRESENCE_FILTER -> b
    org.jivesoftware.smack.filter.PacketFilter SUBJECT_FILTER -> c
    org.jivesoftware.smack.filter.PacketFilter DECLINES_FILTER -> d
    org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector messageCollector -> e
    org.jivesoftware.smack.PacketListener presenceListener -> f
    org.jivesoftware.smack.PacketListener subjectListener -> g
    org.jivesoftware.smack.PacketListener declinesListener -> h
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.PacketMultiplexListener$1 -> org.jivesoftware.smackx.muc.j:
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.ParticipantStatusListener -> org.jivesoftware.smackx.muc.k:
org.jivesoftware.smackx.muc.RoomListenerMultiplexor -> org.jivesoftware.smackx.muc.l:
    java.util.Map monitors -> a
    org.jivesoftware.smack.XMPPConnection connection -> b
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter filter -> c
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener listener -> d
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor getRoomMultiplexor(org.jivesoftware.smack.XMPPConnection) -> a
    void addRoom(java.lang.String,org.jivesoftware.smackx.muc.PacketMultiplexListener) -> a
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void init() -> a
    void removeRoom(java.lang.String) -> a
    void cancel() -> b
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$1 -> org.jivesoftware.smackx.muc.m:
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter -> org.jivesoftware.smackx.muc.n:
    java.util.Map roomAddressTable -> a
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    void addRoom(java.lang.String) -> a
    void removeRoom(java.lang.String) -> b
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener -> org.jivesoftware.smackx.muc.o:
    java.util.Map roomListenersByAddress -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void addRoom(java.lang.String,org.jivesoftware.smackx.muc.PacketMultiplexListener) -> a
    void removeRoom(java.lang.String) -> a
org.jivesoftware.smackx.muc.SubjectUpdatedListener -> org.jivesoftware.smackx.muc.p:
    void subjectUpdated(java.lang.String,java.lang.String) -> a
org.jivesoftware.smackx.muc.UserStatusListener -> org.jivesoftware.smackx.muc.q:
org.jivesoftware.smackx.muc.packet.GroupChatInvitation -> org.jivesoftware.smackx.muc.packet.GroupChatInvitation:
    java.lang.String roomAddress -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.muc.packet.GroupChatInvitation$Provider -> org.jivesoftware.smackx.muc.packet.GroupChatInvitation$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.muc.packet.MUCAdmin -> org.jivesoftware.smackx.muc.packet.MUCAdmin:
    java.util.List items -> a
    void addItem(org.jivesoftware.smackx.muc.packet.MUCAdmin$Item) -> a
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.muc.packet.MUCAdmin$Item -> org.jivesoftware.smackx.muc.packet.a:
    java.lang.String actor -> a
    java.lang.String reason -> b
    java.lang.String affiliation -> c
    java.lang.String jid -> d
    java.lang.String nick -> e
    java.lang.String role -> f
    java.lang.String getActor() -> a
    java.lang.String getReason() -> b
    java.lang.String getAffiliation() -> c
    java.lang.String getJid() -> d
    java.lang.String getNick() -> e
    java.lang.String getRole() -> f
    void setActor(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    void setJid(java.lang.String) -> c
    void setNick(java.lang.String) -> d
    java.lang.String toXML() -> g
org.jivesoftware.smackx.muc.packet.MUCInitialPresence -> org.jivesoftware.smackx.muc.packet.b:
    java.lang.String password -> a
    org.jivesoftware.smackx.muc.packet.MUCInitialPresence$History history -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    org.jivesoftware.smackx.muc.packet.MUCInitialPresence$History getHistory() -> b
    java.lang.String getPassword() -> c
    void setHistory(org.jivesoftware.smackx.muc.packet.MUCInitialPresence$History) -> a
    void setPassword(java.lang.String) -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.muc.packet.MUCInitialPresence$History -> org.jivesoftware.smackx.muc.packet.c:
    int maxChars -> a
    int maxStanzas -> b
    int seconds -> c
    java.util.Date since -> d
    int getMaxChars() -> a
    int getMaxStanzas() -> b
    int getSeconds() -> c
    java.util.Date getSince() -> d
    void setMaxChars(int) -> a
    void setMaxStanzas(int) -> b
    void setSeconds(int) -> c
    void setSince(java.util.Date) -> a
    java.lang.String toXML() -> e
org.jivesoftware.smackx.muc.packet.MUCOwner -> org.jivesoftware.smackx.muc.packet.MUCOwner:
    java.util.List items -> a
    org.jivesoftware.smackx.muc.packet.MUCOwner$Destroy destroy -> b
    org.jivesoftware.smackx.muc.packet.MUCOwner$Destroy getDestroy() -> a
    void setDestroy(org.jivesoftware.smackx.muc.packet.MUCOwner$Destroy) -> a
    void addItem(org.jivesoftware.smackx.muc.packet.MUCOwner$Item) -> a
    java.lang.String getChildElementXML() -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.muc.packet.MUCOwner$Destroy -> org.jivesoftware.smackx.muc.packet.d:
    java.lang.String reason -> a
    java.lang.String jid -> b
    java.lang.String getJid() -> a
    java.lang.String getReason() -> b
    void setJid(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    java.lang.String toXML() -> c
org.jivesoftware.smackx.muc.packet.MUCOwner$Item -> org.jivesoftware.smackx.muc.packet.e:
    java.lang.String actor -> a
    java.lang.String reason -> b
    java.lang.String affiliation -> c
    java.lang.String jid -> d
    java.lang.String nick -> e
    java.lang.String role -> f
    java.lang.String getActor() -> a
    java.lang.String getReason() -> b
    java.lang.String getAffiliation() -> c
    java.lang.String getJid() -> d
    java.lang.String getNick() -> e
    java.lang.String getRole() -> f
    void setActor(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    void setJid(java.lang.String) -> c
    void setNick(java.lang.String) -> d
    void setRole(java.lang.String) -> e
    java.lang.String toXML() -> g
org.jivesoftware.smackx.muc.packet.MUCUser -> org.jivesoftware.smackx.muc.packet.f:
    org.jivesoftware.smackx.muc.packet.MUCUser$Invite invite -> a
    org.jivesoftware.smackx.muc.packet.MUCUser$Decline decline -> b
    org.jivesoftware.smackx.muc.packet.MUCUser$Item item -> c
    java.lang.String password -> d
    org.jivesoftware.smackx.muc.packet.MUCUser$Status status -> e
    org.jivesoftware.smackx.muc.packet.MUCUser$Destroy destroy -> f
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    org.jivesoftware.smackx.muc.packet.MUCUser$Invite getInvite() -> b
    org.jivesoftware.smackx.muc.packet.MUCUser$Decline getDecline() -> c
    org.jivesoftware.smackx.muc.packet.MUCUser$Item getItem() -> d
    java.lang.String getPassword() -> e
    org.jivesoftware.smackx.muc.packet.MUCUser$Status getStatus() -> f
    org.jivesoftware.smackx.muc.packet.MUCUser$Destroy getDestroy() -> g
    void setInvite(org.jivesoftware.smackx.muc.packet.MUCUser$Invite) -> a
    void setDecline(org.jivesoftware.smackx.muc.packet.MUCUser$Decline) -> a
    void setItem(org.jivesoftware.smackx.muc.packet.MUCUser$Item) -> a
    void setPassword(java.lang.String) -> a
    void setStatus(org.jivesoftware.smackx.muc.packet.MUCUser$Status) -> a
    void setDestroy(org.jivesoftware.smackx.muc.packet.MUCUser$Destroy) -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.muc.packet.MUCUser$Decline -> org.jivesoftware.smackx.muc.packet.g:
    java.lang.String reason -> a
    java.lang.String from -> b
    java.lang.String to -> c
    java.lang.String getFrom() -> a
    java.lang.String getReason() -> b
    java.lang.String getTo() -> c
    void setFrom(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    void setTo(java.lang.String) -> c
    java.lang.String toXML() -> d
org.jivesoftware.smackx.muc.packet.MUCUser$Destroy -> org.jivesoftware.smackx.muc.packet.h:
    java.lang.String reason -> a
    java.lang.String jid -> b
    java.lang.String getJid() -> a
    java.lang.String getReason() -> b
    void setJid(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    java.lang.String toXML() -> c
org.jivesoftware.smackx.muc.packet.MUCUser$Invite -> org.jivesoftware.smackx.muc.packet.i:
    java.lang.String reason -> a
    java.lang.String from -> b
    java.lang.String to -> c
    java.lang.String getFrom() -> a
    java.lang.String getReason() -> b
    java.lang.String getTo() -> c
    void setFrom(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    void setTo(java.lang.String) -> c
    java.lang.String toXML() -> d
org.jivesoftware.smackx.muc.packet.MUCUser$Item -> org.jivesoftware.smackx.muc.packet.j:
    java.lang.String actor -> a
    java.lang.String reason -> b
    java.lang.String affiliation -> c
    java.lang.String jid -> d
    java.lang.String nick -> e
    java.lang.String role -> f
    java.lang.String getActor() -> a
    java.lang.String getReason() -> b
    java.lang.String getAffiliation() -> c
    java.lang.String getJid() -> d
    java.lang.String getNick() -> e
    java.lang.String getRole() -> f
    void setActor(java.lang.String) -> a
    void setReason(java.lang.String) -> b
    void setJid(java.lang.String) -> c
    void setNick(java.lang.String) -> d
    java.lang.String toXML() -> g
org.jivesoftware.smackx.muc.packet.MUCUser$Status -> org.jivesoftware.smackx.muc.packet.k:
    java.lang.String code -> a
    java.lang.String getCode() -> a
    java.lang.String toXML() -> b
org.jivesoftware.smackx.muc.provider.MUCAdminProvider -> org.jivesoftware.smackx.muc.provider.MUCAdminProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.muc.packet.MUCAdmin$Item parseItem(org.xmlpull.v1.XmlPullParser) -> a
org.jivesoftware.smackx.muc.provider.MUCOwnerProvider -> org.jivesoftware.smackx.muc.provider.MUCOwnerProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.muc.packet.MUCOwner$Item parseItem(org.xmlpull.v1.XmlPullParser) -> a
    org.jivesoftware.smackx.muc.packet.MUCOwner$Destroy parseDestroy(org.xmlpull.v1.XmlPullParser) -> b
org.jivesoftware.smackx.muc.provider.MUCUserProvider -> org.jivesoftware.smackx.muc.provider.MUCUserProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.muc.packet.MUCUser$Item parseItem(org.xmlpull.v1.XmlPullParser) -> a
    org.jivesoftware.smackx.muc.packet.MUCUser$Invite parseInvite(org.xmlpull.v1.XmlPullParser) -> b
    org.jivesoftware.smackx.muc.packet.MUCUser$Decline parseDecline(org.xmlpull.v1.XmlPullParser) -> c
    org.jivesoftware.smackx.muc.packet.MUCUser$Destroy parseDestroy(org.xmlpull.v1.XmlPullParser) -> d
org.jivesoftware.smackx.nick.packet.Nick -> org.jivesoftware.smackx.nick.packet.Nick:
    java.lang.String name -> a
    java.lang.String getName() -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> b
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.nick.packet.Nick$Provider -> org.jivesoftware.smackx.nick.packet.Nick$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo -> org.jivesoftware.smackx.offline.packet.OfflineMessageInfo:
    java.lang.String node -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getNode() -> a
    void setNode(java.lang.String) -> a
    java.lang.String toXML() -> b
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.offline.packet.OfflineMessageInfo$Provider -> org.jivesoftware.smackx.offline.packet.OfflineMessageInfo$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest -> org.jivesoftware.smackx.offline.packet.OfflineMessageRequest:
    java.util.List items -> a
    boolean purge -> b
    boolean fetch -> c
    void addItem(org.jivesoftware.smackx.offline.packet.OfflineMessageRequest$Item) -> a
    void setPurge(boolean) -> a
    void setFetch(boolean) -> b
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest$Item -> org.jivesoftware.smackx.offline.packet.a:
    java.lang.String action -> a
    java.lang.String jid -> b
    java.lang.String node -> c
    java.lang.String getNode() -> a
    java.lang.String getAction() -> b
    void setAction(java.lang.String) -> a
    java.lang.String getJid() -> c
    void setJid(java.lang.String) -> b
    java.lang.String toXML() -> d
org.jivesoftware.smackx.offline.packet.OfflineMessageRequest$Provider -> org.jivesoftware.smackx.offline.packet.OfflineMessageRequest$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.offline.packet.OfflineMessageRequest$Item parseItem(org.xmlpull.v1.XmlPullParser) -> a
org.jivesoftware.smackx.pep.packet.PEPItem -> org.jivesoftware.smackx.pep.packet.a:
    java.lang.String id -> a
    java.lang.String getNode() -> a
    java.lang.String getItemDetailsXML() -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> c
org.jivesoftware.smackx.pep.packet.PEPPubSub -> org.jivesoftware.smackx.pep.packet.PEPPubSub:
    org.jivesoftware.smackx.pep.packet.PEPItem item -> a
    java.lang.String getElementName() -> a
    java.lang.String getNamespace() -> b
    java.lang.String getChildElementXML() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.pep.provider.PEPProvider -> org.jivesoftware.smackx.pep.provider.PEPProvider:
    java.util.Map nodeParsers -> a
    org.jivesoftware.smack.packet.PacketExtension pepItem -> b
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.ping.PingFailedListener -> org.jivesoftware.smackx.ping.a:
    void pingFailed() -> a
org.jivesoftware.smackx.ping.PingManager -> org.jivesoftware.smackx.ping.PingManager:
    java.util.logging.Logger LOGGER -> a
    java.util.Map INSTANCES -> b
    org.jivesoftware.smack.filter.PacketFilter PING_PACKET_FILTER -> c
    org.jivesoftware.smack.filter.PacketFilter PONG_PACKET_FILTER -> d
    int defaultPingInterval -> e
    java.util.Set pingFailedListeners -> f
    int pingInterval -> g
    java.util.concurrent.ScheduledFuture nextAutomaticPing -> h
    long lastPongReceived -> i
    java.lang.Runnable pingServerRunnable -> j
    org.jivesoftware.smackx.ping.PingManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
    boolean ping(java.lang.String,long) -> a
    boolean ping(java.lang.String) -> a
    boolean pingMyServer(boolean) -> a
    long getLastReceivedPong() -> a
    void maybeSchedulePingServerTask() -> c
    void maybeSchedulePingServerTask(int) -> a
    void maybeStopPingServerTask() -> d
    org.jivesoftware.smack.XMPPConnection access$000(org.jivesoftware.smackx.ping.PingManager) -> a
    long access$102(org.jivesoftware.smackx.ping.PingManager,long) -> a
    void access$200(org.jivesoftware.smackx.ping.PingManager) -> b
    void access$300(org.jivesoftware.smackx.ping.PingManager) -> c
    java.util.logging.Logger access$400() -> b
    org.jivesoftware.smack.XMPPConnection access$500(org.jivesoftware.smackx.ping.PingManager) -> d
    int access$600(org.jivesoftware.smackx.ping.PingManager) -> e
    void access$700(org.jivesoftware.smackx.ping.PingManager,int) -> a
    java.util.Set access$800(org.jivesoftware.smackx.ping.PingManager) -> f
org.jivesoftware.smackx.ping.PingManager$1 -> org.jivesoftware.smackx.ping.b:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.ping.PingManager$2 -> org.jivesoftware.smackx.ping.c:
    org.jivesoftware.smackx.ping.PingManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ping.PingManager$3 -> org.jivesoftware.smackx.ping.d:
    org.jivesoftware.smackx.ping.PingManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ping.PingManager$4 -> org.jivesoftware.smackx.ping.e:
    org.jivesoftware.smackx.ping.PingManager this$0 -> a
    void authenticated(org.jivesoftware.smack.XMPPConnection) -> authenticated
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
org.jivesoftware.smackx.ping.PingManager$5 -> org.jivesoftware.smackx.ping.f:
    org.jivesoftware.smackx.ping.PingManager this$0 -> a
    void run() -> run
org.jivesoftware.smackx.ping.packet.Ping -> org.jivesoftware.smackx.ping.packet.Ping:
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.ping.packet.Pong -> org.jivesoftware.smackx.ping.packet.Pong:
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.ping.provider.PingProvider -> org.jivesoftware.smackx.ping.provider.PingProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.privacy.PrivacyListListener -> org.jivesoftware.smackx.privacy.a:
    void setPrivacyList(java.lang.String,java.util.List) -> a
    void updatedPrivacyList(java.lang.String) -> a
org.jivesoftware.smackx.privacy.PrivacyListManager -> org.jivesoftware.smackx.privacy.PrivacyListManager:
    org.jivesoftware.smack.filter.PacketFilter PACKET_FILTER -> a
    java.util.Map instances -> b
    java.util.List listeners -> c
    org.jivesoftware.smackx.privacy.PrivacyListManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
    java.util.List access$000(org.jivesoftware.smackx.privacy.PrivacyListManager) -> a
org.jivesoftware.smackx.privacy.PrivacyListManager$1 -> org.jivesoftware.smackx.privacy.b:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.privacy.PrivacyListManager$2 -> org.jivesoftware.smackx.privacy.c:
    org.jivesoftware.smack.XMPPConnection val$connection -> a
    org.jivesoftware.smackx.privacy.PrivacyListManager this$0 -> b
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.privacy.packet.Privacy -> org.jivesoftware.smackx.privacy.packet.Privacy:
    boolean declineActiveList -> a
    java.lang.String activeName -> b
    boolean declineDefaultList -> c
    java.lang.String defaultName -> d
    java.util.Map itemLists -> e
    java.util.List setPrivacyList(java.lang.String,java.util.List) -> a
    java.lang.String getActiveName() -> a
    void setActiveName(java.lang.String) -> a
    java.lang.String getDefaultName() -> b
    void setDefaultName(java.lang.String) -> b
    java.util.Map getItemLists() -> c
    boolean isDeclineActiveList() -> d
    void setDeclineActiveList(boolean) -> a
    boolean isDeclineDefaultList() -> e
    void setDeclineDefaultList(boolean) -> b
    java.lang.String getChildElementXML() -> f
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.privacy.packet.PrivacyItem -> org.jivesoftware.smackx.privacy.packet.a:
    boolean allow -> a
    int order -> b
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type type -> c
    java.lang.String value -> d
    boolean filterIQ -> e
    boolean filterMessage -> f
    boolean filterPresenceIn -> g
    boolean filterPresenceOut -> h
    boolean isAllow() -> a
    boolean isFilterIQ() -> b
    void setFilterIQ(boolean) -> a
    boolean isFilterMessage() -> c
    void setFilterMessage(boolean) -> b
    boolean isFilterPresenceIn() -> d
    void setFilterPresenceIn(boolean) -> c
    boolean isFilterPresenceOut() -> e
    void setFilterPresenceOut(boolean) -> d
    int getOrder() -> f
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type getType() -> g
    java.lang.String getValue() -> h
    boolean isFilterEverything() -> i
    java.lang.String toXML() -> j
org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type -> org.jivesoftware.smackx.privacy.packet.b:
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type group -> a
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type jid -> b
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type subscription -> c
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type[] $VALUES -> d
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type[] values() -> values
    org.jivesoftware.smackx.privacy.packet.PrivacyItem$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.privacy.provider.PrivacyProvider -> org.jivesoftware.smackx.privacy.provider.PrivacyProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    void parseList(org.xmlpull.v1.XmlPullParser,org.jivesoftware.smackx.privacy.packet.Privacy) -> a
    org.jivesoftware.smackx.privacy.packet.PrivacyItem parseItem(org.xmlpull.v1.XmlPullParser) -> a
org.jivesoftware.smackx.pubsub.Affiliation -> org.jivesoftware.smackx.pubsub.a:
    java.lang.String node -> a
    org.jivesoftware.smackx.pubsub.Affiliation$Type type -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    void appendAttribute(java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.Affiliation$Type -> org.jivesoftware.smackx.pubsub.b:
    org.jivesoftware.smackx.pubsub.Affiliation$Type member -> a
    org.jivesoftware.smackx.pubsub.Affiliation$Type none -> b
    org.jivesoftware.smackx.pubsub.Affiliation$Type outcast -> c
    org.jivesoftware.smackx.pubsub.Affiliation$Type owner -> d
    org.jivesoftware.smackx.pubsub.Affiliation$Type publisher -> e
    org.jivesoftware.smackx.pubsub.Affiliation$Type[] $VALUES -> f
    org.jivesoftware.smackx.pubsub.Affiliation$Type[] values() -> values
    org.jivesoftware.smackx.pubsub.Affiliation$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.AffiliationsExtension -> org.jivesoftware.smackx.pubsub.c:
    java.util.List items -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.ConfigurationEvent -> org.jivesoftware.smackx.pubsub.d:
    org.jivesoftware.smackx.pubsub.ConfigureForm form -> a
org.jivesoftware.smackx.pubsub.ConfigureForm -> org.jivesoftware.smackx.pubsub.e:
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.EmbeddedPacketExtension -> org.jivesoftware.smackx.pubsub.f:
org.jivesoftware.smackx.pubsub.EventElement -> org.jivesoftware.smackx.pubsub.g:
    org.jivesoftware.smackx.pubsub.EventElementType type -> a
    org.jivesoftware.smackx.pubsub.NodeExtension ext -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.EventElementType -> org.jivesoftware.smackx.pubsub.h:
    org.jivesoftware.smackx.pubsub.EventElementType collection -> a
    org.jivesoftware.smackx.pubsub.EventElementType configuration -> b
    org.jivesoftware.smackx.pubsub.EventElementType delete -> c
    org.jivesoftware.smackx.pubsub.EventElementType items -> d
    org.jivesoftware.smackx.pubsub.EventElementType purge -> e
    org.jivesoftware.smackx.pubsub.EventElementType subscription -> f
    org.jivesoftware.smackx.pubsub.EventElementType[] $VALUES -> g
    org.jivesoftware.smackx.pubsub.EventElementType[] values() -> values
    org.jivesoftware.smackx.pubsub.EventElementType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.FormNode -> org.jivesoftware.smackx.pubsub.i:
    org.jivesoftware.smackx.xdata.Form configForm -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.FormNodeType -> org.jivesoftware.smackx.pubsub.j:
    org.jivesoftware.smackx.pubsub.FormNodeType CONFIGURE_OWNER -> a
    org.jivesoftware.smackx.pubsub.FormNodeType CONFIGURE -> b
    org.jivesoftware.smackx.pubsub.FormNodeType OPTIONS -> c
    org.jivesoftware.smackx.pubsub.FormNodeType DEFAULT -> d
    org.jivesoftware.smackx.pubsub.FormNodeType[] $VALUES -> e
    org.jivesoftware.smackx.pubsub.FormNodeType[] values() -> values
    org.jivesoftware.smackx.pubsub.FormNodeType valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.pubsub.PubSubElementType getNodeElement() -> a
    org.jivesoftware.smackx.pubsub.FormNodeType valueOfFromElementName(java.lang.String,java.lang.String) -> a
org.jivesoftware.smackx.pubsub.Item -> org.jivesoftware.smackx.pubsub.k:
    java.lang.String id -> a
    java.lang.String getId() -> a
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> b
    java.lang.String toString() -> toString
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.ItemsExtension -> org.jivesoftware.smackx.pubsub.l:
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType type -> a
    java.lang.Boolean notify -> b
    java.util.List items -> c
    java.lang.CharSequence toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType -> org.jivesoftware.smackx.pubsub.m:
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType items -> a
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType retract -> b
    org.jivesoftware.smackx.pubsub.PubSubElementType elem -> c
    java.lang.String att -> d
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType[] $VALUES -> e
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType[] values() -> values
    org.jivesoftware.smackx.pubsub.ItemsExtension$ItemsElementType valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.pubsub.PubSubElementType getNodeElement() -> a
    java.lang.String getElementAttribute() -> b
org.jivesoftware.smackx.pubsub.NodeExtension -> org.jivesoftware.smackx.pubsub.n:
    org.jivesoftware.smackx.pubsub.PubSubElementType element -> a
    java.lang.String node -> b
    java.lang.String getNode() -> c
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.CharSequence toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smackx.pubsub.PayloadItem -> org.jivesoftware.smackx.pubsub.o:
    org.jivesoftware.smack.packet.PacketExtension payload -> a
    java.lang.String toXML() -> b
    java.lang.String toString() -> toString
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.PubSubElementType -> org.jivesoftware.smackx.pubsub.p:
    org.jivesoftware.smackx.pubsub.PubSubElementType CREATE -> a
    org.jivesoftware.smackx.pubsub.PubSubElementType DELETE -> b
    org.jivesoftware.smackx.pubsub.PubSubElementType DELETE_EVENT -> c
    org.jivesoftware.smackx.pubsub.PubSubElementType CONFIGURE -> d
    org.jivesoftware.smackx.pubsub.PubSubElementType CONFIGURE_OWNER -> e
    org.jivesoftware.smackx.pubsub.PubSubElementType CONFIGURATION -> f
    org.jivesoftware.smackx.pubsub.PubSubElementType OPTIONS -> g
    org.jivesoftware.smackx.pubsub.PubSubElementType DEFAULT -> h
    org.jivesoftware.smackx.pubsub.PubSubElementType ITEMS -> i
    org.jivesoftware.smackx.pubsub.PubSubElementType ITEMS_EVENT -> j
    org.jivesoftware.smackx.pubsub.PubSubElementType ITEM -> k
    org.jivesoftware.smackx.pubsub.PubSubElementType ITEM_EVENT -> l
    org.jivesoftware.smackx.pubsub.PubSubElementType PUBLISH -> m
    org.jivesoftware.smackx.pubsub.PubSubElementType PUBLISH_OPTIONS -> n
    org.jivesoftware.smackx.pubsub.PubSubElementType PURGE_OWNER -> o
    org.jivesoftware.smackx.pubsub.PubSubElementType PURGE_EVENT -> p
    org.jivesoftware.smackx.pubsub.PubSubElementType RETRACT -> q
    org.jivesoftware.smackx.pubsub.PubSubElementType AFFILIATIONS -> r
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIBE -> s
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIPTION -> t
    org.jivesoftware.smackx.pubsub.PubSubElementType SUBSCRIPTIONS -> u
    org.jivesoftware.smackx.pubsub.PubSubElementType UNSUBSCRIBE -> v
    java.lang.String eName -> w
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace nSpace -> x
    org.jivesoftware.smackx.pubsub.PubSubElementType[] $VALUES -> y
    org.jivesoftware.smackx.pubsub.PubSubElementType[] values() -> values
    org.jivesoftware.smackx.pubsub.PubSubElementType valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace getNamespace() -> a
    java.lang.String getElementName() -> b
    org.jivesoftware.smackx.pubsub.PubSubElementType valueOfFromElemName(java.lang.String,java.lang.String) -> a
org.jivesoftware.smackx.pubsub.RetractItem -> org.jivesoftware.smackx.pubsub.q:
    java.lang.String id -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.SimplePayload -> org.jivesoftware.smackx.pubsub.r:
    java.lang.String elemName -> a
    java.lang.String ns -> b
    java.lang.String payload -> c
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.String toString() -> toString
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.Subscription -> org.jivesoftware.smackx.pubsub.s:
    java.lang.String jid -> a
    java.lang.String id -> b
    org.jivesoftware.smackx.pubsub.Subscription$State state -> c
    boolean configRequired -> d
    java.lang.String toXML() -> a
    void appendAttribute(java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.Subscription$State -> org.jivesoftware.smackx.pubsub.t:
    org.jivesoftware.smackx.pubsub.Subscription$State subscribed -> a
    org.jivesoftware.smackx.pubsub.Subscription$State unconfigured -> b
    org.jivesoftware.smackx.pubsub.Subscription$State pending -> c
    org.jivesoftware.smackx.pubsub.Subscription$State none -> d
    org.jivesoftware.smackx.pubsub.Subscription$State[] $VALUES -> e
    org.jivesoftware.smackx.pubsub.Subscription$State[] values() -> values
    org.jivesoftware.smackx.pubsub.Subscription$State valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.pubsub.SubscriptionsExtension -> org.jivesoftware.smackx.pubsub.u:
    java.util.List items -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.pubsub.packet.PubSub -> org.jivesoftware.smackx.pubsub.packet.PubSub:
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace ns -> a
    java.lang.String getElementName() -> a
    java.lang.String getNamespace() -> b
    void setPubSubNamespace(org.jivesoftware.smackx.pubsub.packet.PubSubNamespace) -> a
    java.lang.String getChildElementXML() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.pubsub.packet.PubSubNamespace -> org.jivesoftware.smackx.pubsub.packet.a:
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace BASIC -> a
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace ERROR -> b
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace EVENT -> c
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace OWNER -> d
    java.lang.String fragment -> e
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace[] $VALUES -> f
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace[] values() -> values
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace valueOf(java.lang.String) -> valueOf
    java.lang.String getXmlns() -> a
    org.jivesoftware.smackx.pubsub.packet.PubSubNamespace valueOfFromXmlns(java.lang.String) -> a
org.jivesoftware.smackx.pubsub.provider.AffiliationProvider -> org.jivesoftware.smackx.pubsub.provider.AffiliationProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.AffiliationsProvider -> org.jivesoftware.smackx.pubsub.provider.AffiliationsProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.ConfigEventProvider -> org.jivesoftware.smackx.pubsub.provider.ConfigEventProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.EventProvider -> org.jivesoftware.smackx.pubsub.provider.EventProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.FormNodeProvider -> org.jivesoftware.smackx.pubsub.provider.FormNodeProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.ItemProvider -> org.jivesoftware.smackx.pubsub.provider.ItemProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.pubsub.provider.ItemsProvider -> org.jivesoftware.smackx.pubsub.provider.ItemsProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.PubSubProvider -> org.jivesoftware.smackx.pubsub.provider.PubSubProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.pubsub.provider.RetractEventProvider -> org.jivesoftware.smackx.pubsub.provider.RetractEventProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.SimpleNodeProvider -> org.jivesoftware.smackx.pubsub.provider.SimpleNodeProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.pubsub.provider.SubscriptionProvider -> org.jivesoftware.smackx.pubsub.provider.SubscriptionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.pubsub.provider.SubscriptionsProvider -> org.jivesoftware.smackx.pubsub.provider.SubscriptionsProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.receipts.DeliveryReceipt -> org.jivesoftware.smackx.receipts.DeliveryReceipt:
    java.lang.String id -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.receipts.DeliveryReceipt$Provider -> org.jivesoftware.smackx.receipts.DeliveryReceipt$Provider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest -> org.jivesoftware.smackx.receipts.DeliveryReceiptRequest:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest$Provider -> org.jivesoftware.smackx.receipts.DeliveryReceiptRequest$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.search.ReportedData -> org.jivesoftware.smackx.search.a:
    java.util.List columns -> a
    java.util.List rows -> b
    java.lang.String title -> c
    void addRow(org.jivesoftware.smackx.search.ReportedData$Row) -> a
    void addColumn(org.jivesoftware.smackx.search.ReportedData$Column) -> a
    java.util.List getColumns() -> a
org.jivesoftware.smackx.search.ReportedData$Column -> org.jivesoftware.smackx.search.b:
    java.lang.String label -> a
    java.lang.String variable -> b
    java.lang.String type -> c
    java.lang.String getVariable() -> a
org.jivesoftware.smackx.search.ReportedData$Field -> org.jivesoftware.smackx.search.c:
    java.lang.String variable -> a
    java.util.List values -> b
org.jivesoftware.smackx.search.ReportedData$Row -> org.jivesoftware.smackx.search.d:
    java.util.List fields -> a
org.jivesoftware.smackx.search.SimpleUserSearch -> org.jivesoftware.smackx.search.SimpleUserSearch:
    org.jivesoftware.smackx.xdata.Form form -> a
    org.jivesoftware.smackx.search.ReportedData data -> b
    java.lang.String getChildElementXML() -> a
    java.lang.String getItemsToSearch() -> b
    java.lang.String getSingleValue(org.jivesoftware.smackx.xdata.FormField) -> a
    void parseItems(org.xmlpull.v1.XmlPullParser) -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.search.UserSearch -> org.jivesoftware.smackx.search.UserSearch:
    java.lang.String getChildElementXML() -> a
    void buildDataForm(org.jivesoftware.smackx.search.SimpleUserSearch,java.lang.String,org.xmlpull.v1.XmlPullParser) -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
    void access$000(org.jivesoftware.smackx.search.SimpleUserSearch,java.lang.String,org.xmlpull.v1.XmlPullParser) -> a
org.jivesoftware.smackx.search.UserSearch$Provider -> org.jivesoftware.smackx.search.UserSearch$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo -> org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo:
    java.util.List groups -> a
    java.util.List getGroups() -> a
    java.lang.String getChildElementXML() -> b
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo$Provider -> org.jivesoftware.smackx.sharedgroups.packet.SharedGroupsInfo$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.shim.packet.Header -> org.jivesoftware.smackx.shim.a.a:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.shim.packet.HeadersExtension -> org.jivesoftware.smackx.shim.a.b:
    java.util.Collection headers -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.shim.provider.HeaderProvider -> org.jivesoftware.smackx.shim.provider.HeaderProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.shim.provider.HeadersProvider -> org.jivesoftware.smackx.shim.provider.HeadersProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.si.packet.StreamInitiation -> org.jivesoftware.smackx.si.packet.StreamInitiation:
    java.lang.String id -> a
    java.lang.String mimeType -> b
    org.jivesoftware.smackx.si.packet.StreamInitiation$File file -> c
    org.jivesoftware.smackx.si.packet.StreamInitiation$Feature featureNegotiation -> d
    void setSessionID(java.lang.String) -> a
    java.lang.String getSessionID() -> a
    void setMimeType(java.lang.String) -> b
    java.lang.String getMimeType() -> b
    void setFile(org.jivesoftware.smackx.si.packet.StreamInitiation$File) -> a
    void setFeatureNegotiationForm(org.jivesoftware.smackx.xdata.packet.DataForm) -> a
    java.lang.String getChildElementXML() -> c
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.si.packet.StreamInitiation$Feature -> org.jivesoftware.smackx.si.packet.a:
    org.jivesoftware.smackx.xdata.packet.DataForm data -> b
    org.jivesoftware.smackx.si.packet.StreamInitiation this$0 -> a
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.si.packet.StreamInitiation$File -> org.jivesoftware.smackx.si.packet.b:
    java.lang.String name -> a
    long size -> b
    java.lang.String hash -> c
    java.util.Date date -> d
    java.lang.String desc -> e
    boolean isRanged -> f
    java.lang.String getName() -> a
    long getSize() -> b
    void setHash(java.lang.String) -> a
    java.lang.String getHash() -> c
    void setDate(java.util.Date) -> a
    java.util.Date getDate() -> d
    void setDesc(java.lang.String) -> b
    java.lang.String getDesc() -> e
    void setRanged(boolean) -> a
    boolean isRanged() -> f
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> g
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.si.provider.StreamInitiationProvider -> org.jivesoftware.smackx.si.provider.StreamInitiationProvider:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.time.EntityTimeManager -> org.jivesoftware.smackx.time.EntityTimeManager:
    java.util.Map INSTANCES -> a
    org.jivesoftware.smack.filter.PacketFilter TIME_PACKET_FILTER -> b
    boolean autoEnable -> c
    boolean enabled -> d
    org.jivesoftware.smackx.time.EntityTimeManager getInstanceFor(org.jivesoftware.smack.XMPPConnection) -> a
    void enable() -> a
    boolean access$000(org.jivesoftware.smackx.time.EntityTimeManager) -> a
    org.jivesoftware.smack.XMPPConnection access$100(org.jivesoftware.smackx.time.EntityTimeManager) -> b
org.jivesoftware.smackx.time.EntityTimeManager$1 -> org.jivesoftware.smackx.time.a:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.time.EntityTimeManager$2 -> org.jivesoftware.smackx.time.b:
    org.jivesoftware.smackx.time.EntityTimeManager this$0 -> a
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.time.packet.Time -> org.jivesoftware.smackx.time.packet.Time:
    java.util.logging.Logger LOGGER -> a
    java.lang.String utc -> b
    java.lang.String tzo -> c
    org.jivesoftware.smackx.time.packet.Time createResponse(org.jivesoftware.smack.packet.Packet) -> a
    java.lang.String getChildElementXML() -> a
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.vcardtemp.VCardManager -> org.jivesoftware.smackx.vcardtemp.VCardManager:
org.jivesoftware.smackx.vcardtemp.VCardManager$1 -> org.jivesoftware.smackx.vcardtemp.a:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.vcardtemp.packet.VCard -> org.jivesoftware.smackx.vcardtemp.packet.VCard:
    java.util.logging.Logger LOGGER -> a
    java.util.Map homePhones -> b
    java.util.Map workPhones -> c
    java.util.Map homeAddr -> d
    java.util.Map workAddr -> e
    java.lang.String firstName -> f
    java.lang.String lastName -> g
    java.lang.String middleName -> h
    java.lang.String emailHome -> i
    java.lang.String emailWork -> j
    java.lang.String organization -> k
    java.lang.String organizationUnit -> l
    java.lang.String photoMimeType -> m
    java.lang.String photoBinval -> n
    java.util.Map otherSimpleFields -> o
    java.util.Map otherUnescapableFields -> p
    java.lang.String getField(java.lang.String) -> a
    void setField(java.lang.String,java.lang.String) -> a
    void setField(java.lang.String,java.lang.String,boolean) -> a
    void setFirstName(java.lang.String) -> b
    void setLastName(java.lang.String) -> c
    void setMiddleName(java.lang.String) -> d
    java.lang.String getNickName() -> a
    void setNickName(java.lang.String) -> e
    void setEmailHome(java.lang.String) -> f
    void setEmailWork(java.lang.String) -> g
    void setOrganization(java.lang.String) -> h
    void setOrganizationUnit(java.lang.String) -> i
    void setAddressFieldHome(java.lang.String,java.lang.String) -> b
    void setAddressFieldWork(java.lang.String,java.lang.String) -> c
    void setPhoneHome(java.lang.String,java.lang.String) -> d
    void setPhoneWork(java.lang.String,java.lang.String) -> e
    void removeAvatar() -> b
    void setAvatar(byte[]) -> a
    void setAvatar(byte[],java.lang.String) -> a
    void setAvatar(java.lang.String,java.lang.String) -> f
    byte[] getAvatar() -> c
    void updateFN() -> e
    void save(org.jivesoftware.smack.XMPPConnection) -> a
    void load(org.jivesoftware.smack.XMPPConnection) -> b
    void load(org.jivesoftware.smack.XMPPConnection,java.lang.String) -> a
    void doLoad(org.jivesoftware.smack.XMPPConnection,java.lang.String) -> b
    java.lang.String getChildElementXML() -> d
    void copyFieldsFrom(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> s
    void checkAuthenticated(org.jivesoftware.smack.XMPPConnection,boolean) -> a
    boolean hasContent() -> f
    boolean hasNameField() -> g
    boolean hasOrganizationFields() -> h
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.CharSequence getChildElementXML() -> getChildElementXML
    boolean access$000(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> a
    boolean access$200(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> b
    java.lang.String access$300(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> c
    java.lang.String access$400(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> d
    java.util.Map access$500(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> e
    java.util.Map access$600(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> f
    java.util.Map access$700(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> g
    java.util.Map access$800(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> h
    java.lang.String access$900(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> i
    java.lang.String access$1100(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> j
    java.util.Map access$1300(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> k
    java.util.Map access$1400(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> l
    boolean access$1500(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> m
    java.lang.String access$1600(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> n
    java.lang.String access$1700(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> o
    java.lang.String access$1800(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> p
    java.lang.String access$1900(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> q
    java.lang.String access$2000(org.jivesoftware.smackx.vcardtemp.packet.VCard) -> r
org.jivesoftware.smackx.vcardtemp.packet.VCard$ContentBuilder -> org.jivesoftware.smackx.vcardtemp.packet.a:
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter -> org.jivesoftware.smackx.vcardtemp.packet.b:
    java.lang.StringBuilder sb -> b
    org.jivesoftware.smackx.vcardtemp.packet.VCard this$0 -> a
    void write() -> a
    void buildActualContent() -> b
    void appendPhoto() -> c
    void appendEmail(java.lang.String,java.lang.String) -> a
    void appendPhones(java.util.Map,java.lang.String) -> a
    void appendAddress(java.util.Map,java.lang.String) -> b
    void appendEmptyTag(java.lang.Object) -> a
    void appendGenericFields() -> d
    void appendOrganization() -> e
    void appendN() -> f
    void appendTag(java.lang.String,java.lang.String,java.lang.String,boolean,org.jivesoftware.smackx.vcardtemp.packet.VCard$ContentBuilder) -> a
    void appendTag(java.lang.String,boolean,org.jivesoftware.smackx.vcardtemp.packet.VCard$ContentBuilder) -> a
    void appendTag(java.lang.String,java.lang.CharSequence) -> a
    void access$100(org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter) -> a
    void access$1000(org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter,java.lang.String,java.lang.CharSequence) -> a
    void access$1200(org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter,java.lang.Object) -> a
    java.lang.StringBuilder access$2100(org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter) -> b
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$1 -> org.jivesoftware.smackx.vcardtemp.packet.c:
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> a
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$2 -> org.jivesoftware.smackx.vcardtemp.packet.d:
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> a
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$3 -> org.jivesoftware.smackx.vcardtemp.packet.e:
    java.lang.String val$type -> a
    java.lang.String val$email -> b
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> c
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$4 -> org.jivesoftware.smackx.vcardtemp.packet.f:
    java.util.Map$Entry val$entry -> a
    java.lang.String val$code -> b
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> c
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$5 -> org.jivesoftware.smackx.vcardtemp.packet.g:
    java.lang.String val$code -> a
    java.util.Map val$addr -> b
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> c
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$6 -> org.jivesoftware.smackx.vcardtemp.packet.h:
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> a
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$7 -> org.jivesoftware.smackx.vcardtemp.packet.i:
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> a
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter$8 -> org.jivesoftware.smackx.vcardtemp.packet.j:
    java.lang.CharSequence val$tagText -> a
    org.jivesoftware.smackx.vcardtemp.packet.VCard$VCardWriter this$1 -> b
    void addTagContent() -> a
org.jivesoftware.smackx.vcardtemp.provider.VCardProvider -> org.jivesoftware.smackx.vcardtemp.provider.VCardProvider:
    java.util.logging.Logger LOGGER -> a
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.vcardtemp.packet.VCard createVCardFromXML(java.lang.String) -> a
org.jivesoftware.smackx.vcardtemp.provider.VCardProvider$VCardReader -> org.jivesoftware.smackx.vcardtemp.provider.a:
    org.jivesoftware.smackx.vcardtemp.packet.VCard vCard -> a
    org.w3c.dom.Document document -> b
    void initializeFields() -> a
    void setupPhoto() -> b
    void setupEmails() -> c
    void setupPhones() -> d
    boolean isWorkHome(java.lang.String) -> a
    void setupAddresses() -> e
    java.lang.String getTagContents(java.lang.String) -> b
    void setupSimpleFields() -> f
    java.lang.String getTextContent(org.w3c.dom.Node) -> a
    void appendText(java.lang.StringBuilder,org.w3c.dom.Node) -> a
org.jivesoftware.smackx.xdata.Form -> org.jivesoftware.smackx.xdata.a:
    org.jivesoftware.smackx.xdata.packet.DataForm dataForm -> a
    org.jivesoftware.smackx.xdata.Form getFormFrom(org.jivesoftware.smack.packet.Packet) -> a
    java.util.List getFields() -> a
    java.lang.String getType() -> b
    org.jivesoftware.smackx.xdata.packet.DataForm getDataFormToSend() -> c
    boolean isSubmitType() -> d
org.jivesoftware.smackx.xdata.FormField -> org.jivesoftware.smackx.xdata.b:
    java.lang.String description -> a
    boolean required -> b
    java.lang.String label -> c
    java.lang.String variable -> d
    java.lang.String type -> e
    java.util.List options -> f
    java.util.List values -> g
    java.lang.String getDescription() -> a
    java.lang.String getLabel() -> b
    java.util.List getOptions() -> c
    boolean isRequired() -> d
    java.lang.String getType() -> e
    java.util.List getValues() -> f
    java.lang.String getVariable() -> g
    void setDescription(java.lang.String) -> a
    void setLabel(java.lang.String) -> b
    void setRequired(boolean) -> a
    void setType(java.lang.String) -> c
    void addValue(java.lang.String) -> d
    void addOption(org.jivesoftware.smackx.xdata.FormField$Option) -> a
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> h
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.xdata.FormField$Option -> org.jivesoftware.smackx.xdata.c:
    java.lang.String value -> a
    java.lang.String label -> b
    java.lang.String getLabel() -> a
    java.lang.String getValue() -> b
    java.lang.String toString() -> toString
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.xdata.packet.DataForm -> org.jivesoftware.smackx.xdata.a.a:
    java.lang.String type -> a
    java.lang.String title -> b
    java.util.List instructions -> c
    org.jivesoftware.smackx.xdata.packet.DataForm$ReportedData reportedData -> d
    java.util.List items -> e
    java.util.List fields -> f
    java.lang.String getType() -> a
    java.lang.String getTitle() -> b
    java.util.List getInstructions() -> c
    org.jivesoftware.smackx.xdata.packet.DataForm$ReportedData getReportedData() -> d
    java.util.List getItems() -> e
    java.util.List getFields() -> f
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    void setTitle(java.lang.String) -> a
    void setReportedData(org.jivesoftware.smackx.xdata.packet.DataForm$ReportedData) -> a
    void addField(org.jivesoftware.smackx.xdata.FormField) -> a
    void addInstruction(java.lang.String) -> b
    void addItem(org.jivesoftware.smackx.xdata.packet.DataForm$Item) -> a
    boolean hasHiddenFormTypeField() -> g
    org.jivesoftware.smack.util.XmlStringBuilder toXML() -> h
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.xdata.packet.DataForm$Item -> org.jivesoftware.smackx.xdata.a.b:
    java.util.List fields -> a
    java.util.List getFields() -> a
    java.lang.CharSequence toXML() -> b
org.jivesoftware.smackx.xdata.packet.DataForm$ReportedData -> org.jivesoftware.smackx.xdata.a.c:
    java.util.List fields -> a
    java.util.List getFields() -> a
    java.lang.CharSequence toXML() -> b
org.jivesoftware.smackx.xdata.provider.DataFormProvider -> org.jivesoftware.smackx.xdata.provider.DataFormProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.xdata.FormField parseField(org.xmlpull.v1.XmlPullParser) -> a
    org.jivesoftware.smackx.xdata.packet.DataForm$Item parseItem(org.xmlpull.v1.XmlPullParser) -> b
    org.jivesoftware.smackx.xdata.packet.DataForm$ReportedData parseReported(org.xmlpull.v1.XmlPullParser) -> c
    org.jivesoftware.smackx.xdata.FormField$Option parseOption(org.xmlpull.v1.XmlPullParser) -> d
org.jivesoftware.smackx.xevent.packet.MessageEvent -> org.jivesoftware.smackx.xevent.a.a:
    boolean offline -> a
    boolean delivered -> b
    boolean displayed -> c
    boolean composing -> d
    boolean cancelled -> e
    java.lang.String packetID -> f
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    boolean isComposing() -> a
    boolean isDelivered() -> b
    boolean isDisplayed() -> c
    boolean isOffline() -> d
    java.lang.String getPacketID() -> e
    void setComposing(boolean) -> a
    void setDelivered(boolean) -> b
    void setDisplayed(boolean) -> c
    void setOffline(boolean) -> d
    void setCancelled(boolean) -> e
    void setPacketID(java.lang.String) -> a
    java.lang.String toXML() -> f
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.xevent.provider.MessageEventProvider -> org.jivesoftware.smackx.xevent.provider.MessageEventProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.xhtmlim.XHTMLManager -> org.jivesoftware.smackx.xhtmlim.XHTMLManager:
    void setServiceEnabled(org.jivesoftware.smack.XMPPConnection,boolean) -> a
    boolean isServiceEnabled(org.jivesoftware.smack.XMPPConnection) -> a
org.jivesoftware.smackx.xhtmlim.XHTMLManager$1 -> org.jivesoftware.smackx.xhtmlim.a:
    void connectionCreated(org.jivesoftware.smack.XMPPConnection) -> connectionCreated
org.jivesoftware.smackx.xhtmlim.packet.XHTMLExtension -> org.jivesoftware.smackx.xhtmlim.a.a:
    java.util.List bodies -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> a
    java.util.List getBodies() -> b
    void addBody(java.lang.String) -> a
    java.lang.CharSequence toXML() -> toXML
org.jivesoftware.smackx.xhtmlim.provider.XHTMLExtensionProvider -> org.jivesoftware.smackx.xhtmlim.provider.XHTMLExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    void appendStartTagPartial(java.lang.StringBuilder,org.xmlpull.v1.XmlPullParser,boolean) -> a
    void appendEndTag(java.lang.StringBuilder,org.xmlpull.v1.XmlPullParser,boolean) -> b
    boolean appendText(java.lang.StringBuilder,org.xmlpull.v1.XmlPullParser) -> a
    boolean maybeCloseTag(boolean,java.lang.StringBuilder) -> a
org.xbill.DNS.A6Record -> org.b.a.a:
    int prefixBits -> a
    java.net.InetAddress suffix -> b
    org.xbill.DNS.Name prefix -> c
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.AAAARecord -> org.b.a.b:
    java.net.InetAddress address -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.AFSDBRecord -> org.b.a.c:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.APLRecord -> org.b.a.d:
    java.util.List elements -> a
    org.xbill.DNS.Record getObject() -> a
    boolean validatePrefixLength(int,int) -> b
    byte[] parseAddress(byte[],int) -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    int addressLength(byte[]) -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    boolean access$000(int,int) -> a
org.xbill.DNS.APLRecord$1 -> org.b.a.e:
org.xbill.DNS.APLRecord$Element -> org.b.a.f:
    int family -> a
    boolean negative -> b
    int prefixLength -> c
    java.lang.Object address -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.xbill.DNS.ARecord -> org.b.a.g:
    int addr -> a
    org.xbill.DNS.Record getObject() -> a
    int fromArray(byte[]) -> b
    byte[] toArray(int) -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.Address -> org.b.a.h:
    java.lang.String toDottedQuad(byte[]) -> a
    int familyOf(java.net.InetAddress) -> a
    int addressLength(int) -> a
    java.net.InetAddress truncate(java.net.InetAddress,int) -> a
org.xbill.DNS.CERTRecord -> org.b.a.i:
    int certType -> a
    int keyTag -> b
    int alg -> c
    byte[] cert -> d
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.CNAMERecord -> org.b.a.j:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getTarget() -> a_
org.xbill.DNS.Cache -> org.b.a.k:
    org.xbill.DNS.Cache$CacheMap data -> a
    int maxncache -> b
    int maxcache -> c
    int dclass -> d
    int limitExpire(long,long) -> b
    java.lang.Object exactName(org.xbill.DNS.Name) -> a
    org.xbill.DNS.Cache$Element[] allElements(java.lang.Object) -> a
    org.xbill.DNS.Cache$Element oneElement(org.xbill.DNS.Name,java.lang.Object,int,int) -> a
    org.xbill.DNS.Cache$Element findElement(org.xbill.DNS.Name,int,int) -> c
    void addElement(org.xbill.DNS.Name,org.xbill.DNS.Cache$Element) -> a
    void removeElement(org.xbill.DNS.Name,int) -> a
    void clearCache() -> a
    void addRRset(org.xbill.DNS.RRset,int) -> a
    void addNegative(org.xbill.DNS.Name,int,org.xbill.DNS.SOARecord,int) -> a
    org.xbill.DNS.SetResponse lookup(org.xbill.DNS.Name,int,int) -> a
    org.xbill.DNS.SetResponse lookupRecords(org.xbill.DNS.Name,int,int) -> b
    int getCred(int,boolean) -> a
    void markAdditional(org.xbill.DNS.RRset,java.util.Set) -> a
    org.xbill.DNS.SetResponse addMessage(org.xbill.DNS.Message) -> a
    java.lang.String toString() -> toString
    int access$000(long,long) -> a
org.xbill.DNS.Cache$CacheMap -> org.b.a.l:
    int maxsize -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.xbill.DNS.Cache$CacheRRset -> org.b.a.m:
    int credibility -> a
    int expire -> b
    boolean expired() -> a
    int compareCredibility(int) -> a
    java.lang.String toString() -> toString
org.xbill.DNS.Cache$Element -> org.b.a.n:
    boolean expired() -> a
    int compareCredibility(int) -> a
    int getType() -> b
org.xbill.DNS.Cache$NegativeElement -> org.b.a.o:
    int type -> a
    org.xbill.DNS.Name name -> b
    int credibility -> c
    int expire -> d
    int getType() -> b
    boolean expired() -> a
    int compareCredibility(int) -> a
    java.lang.String toString() -> toString
org.xbill.DNS.Client -> org.b.a.p:
    long endTime -> a
    java.nio.channels.SelectionKey key -> b
    void blockUntil(java.nio.channels.SelectionKey,long) -> a
    void verboseLog(java.lang.String,byte[]) -> a
    void cleanup() -> a
org.xbill.DNS.ClientSubnetOption -> org.b.a.q:
    int family -> a
    int sourceNetmask -> b
    int scopeNetmask -> c
    java.net.InetAddress address -> d
    void optionFromWire(org.xbill.DNS.DNSInput) -> a
    void optionToWire(org.xbill.DNS.DNSOutput) -> a
    java.lang.String optionToString() -> a
org.xbill.DNS.Compression -> org.b.a.r:
    org.xbill.DNS.Compression$Entry[] table -> a
    boolean verbose -> b
    void add(int,org.xbill.DNS.Name) -> a
    int get(org.xbill.DNS.Name) -> a
org.xbill.DNS.Compression$1 -> org.b.a.s:
org.xbill.DNS.Compression$Entry -> org.b.a.t:
    org.xbill.DNS.Name name -> a
    int pos -> b
    org.xbill.DNS.Compression$Entry next -> c
org.xbill.DNS.DClass -> org.b.a.u:
    org.xbill.DNS.Mnemonic classes -> a
    void check(int) -> a
    java.lang.String string(int) -> b
org.xbill.DNS.DClass$DClassMnemonic -> org.b.a.v:
    void check(int) -> a
org.xbill.DNS.DHCIDRecord -> org.b.a.w:
    byte[] data -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.DLVRecord -> org.b.a.x:
    int footprint -> a
    int alg -> b
    int digestid -> c
    byte[] digest -> d
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.DNAMERecord -> org.b.a.y:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getTarget() -> b_
org.xbill.DNS.DNSInput -> org.b.a.z:
    byte[] array -> a
    int pos -> b
    int end -> c
    int saved_pos -> d
    int saved_end -> e
    int current() -> a
    int remaining() -> b
    void require(int) -> e
    void setActive(int) -> a
    void clearActive() -> c
    int saveActive() -> d
    void restoreActive(int) -> b
    void jump(int) -> c
    void save() -> e
    void restore() -> f
    int readU8() -> g
    int readU16() -> h
    long readU32() -> i
    void readByteArray(byte[],int,int) -> a
    byte[] readByteArray(int) -> d
    byte[] readByteArray() -> j
    byte[] readCountedString() -> k
org.xbill.DNS.DNSKEYRecord -> org.b.a.aa:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.DNSOutput -> org.b.a.ab:
    byte[] array -> a
    int pos -> b
    int saved_pos -> c
    int current() -> a
    void check(long,int) -> a
    void need(int) -> d
    void jump(int) -> a
    void save() -> b
    void restore() -> c
    void writeU8(int) -> b
    void writeU16(int) -> c
    void writeU16At(int,int) -> a
    void writeU32(long) -> a
    void writeByteArray(byte[],int,int) -> a
    void writeByteArray(byte[]) -> a
    void writeCountedString(byte[]) -> b
    byte[] toByteArray() -> d
org.xbill.DNS.DSRecord -> org.b.a.ac:
    int footprint -> a
    int alg -> b
    int digestid -> c
    byte[] digest -> d
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.EDNSOption -> org.b.a.ad:
    int code -> a
    java.lang.String toString() -> toString
    byte[] getData() -> b
    void optionFromWire(org.xbill.DNS.DNSInput) -> a
    org.xbill.DNS.EDNSOption fromWire(org.xbill.DNS.DNSInput) -> b
    void optionToWire(org.xbill.DNS.DNSOutput) -> a
    void toWire(org.xbill.DNS.DNSOutput) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String optionToString() -> a
org.xbill.DNS.EDNSOption$Code -> org.b.a.ae:
    org.xbill.DNS.Mnemonic codes -> a
    java.lang.String string(int) -> a
org.xbill.DNS.EmptyRecord -> org.b.a.af:
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.ExtendedResolver -> org.b.a.ag:
    java.util.List resolvers -> a
    boolean loadBalance -> b
    int lbStart -> c
    int retries -> d
    void init() -> a
    void setTimeout(int,int) -> a
    void setTimeout(int) -> a
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> a
    java.lang.Object sendAsync(org.xbill.DNS.Message,org.xbill.DNS.ResolverListener) -> a
    java.util.List access$000(org.xbill.DNS.ExtendedResolver) -> a
    boolean access$100(org.xbill.DNS.ExtendedResolver) -> b
    int access$208(org.xbill.DNS.ExtendedResolver) -> c
    int access$200(org.xbill.DNS.ExtendedResolver) -> d
    int access$244(org.xbill.DNS.ExtendedResolver,int) -> a
    int access$300(org.xbill.DNS.ExtendedResolver) -> e
org.xbill.DNS.ExtendedResolver$Resolution -> org.b.a.ah:
    org.xbill.DNS.Resolver[] resolvers -> a
    int[] sent -> b
    java.lang.Object[] inprogress -> c
    int retries -> d
    int outstanding -> e
    boolean done -> f
    org.xbill.DNS.Message query -> g
    org.xbill.DNS.Message response -> h
    java.lang.Throwable thrown -> i
    org.xbill.DNS.ResolverListener listener -> j
    void send(int) -> a
    org.xbill.DNS.Message start() -> a
    void startAsync(org.xbill.DNS.ResolverListener) -> a
    void receiveMessage(java.lang.Object,org.xbill.DNS.Message) -> a
    void handleException(java.lang.Object,java.lang.Exception) -> a
org.xbill.DNS.Flags -> org.b.a.ai:
    org.xbill.DNS.Mnemonic flags -> a
    java.lang.String string(int) -> a
    boolean isFlag(int) -> b
org.xbill.DNS.FormattedTime -> org.b.a.aj:
    java.text.NumberFormat w2 -> a
    java.text.NumberFormat w4 -> b
    java.lang.String format(java.util.Date) -> a
org.xbill.DNS.GPOSRecord -> org.b.a.ak:
    byte[] latitude -> a
    byte[] longitude -> b
    byte[] altitude -> c
    org.xbill.DNS.Record getObject() -> a
    void validate(double,double) -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    java.lang.String getLongitudeString() -> d_
    double getLongitude() -> d
    java.lang.String getLatitudeString() -> e
    double getLatitude() -> f
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.GenericEDNSOption -> org.b.a.al:
    byte[] data -> a
    void optionFromWire(org.xbill.DNS.DNSInput) -> a
    void optionToWire(org.xbill.DNS.DNSOutput) -> a
    java.lang.String optionToString() -> a
org.xbill.DNS.HINFORecord -> org.b.a.am:
    byte[] cpu -> a
    byte[] os -> b
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.Header -> org.b.a.an:
    int id -> a
    int flags -> b
    int[] counts -> c
    java.util.Random random -> d
    void init() -> f
    void toWire(org.xbill.DNS.DNSOutput) -> a
    byte[] toWire() -> a
    boolean validFlag(int) -> i
    void checkFlag(int) -> j
    void setFlag(int) -> a
    boolean getFlag(int) -> b
    int getID() -> b
    void setID(int) -> c
    int getRcode() -> c
    void setOpcode(int) -> d
    int getOpcode() -> d
    void setCount(int,int) -> a
    void incCount(int) -> e
    void decCount(int) -> f
    int getCount(int) -> g
    java.lang.String printFlags() -> e
    java.lang.String toStringWithRcode(int) -> h
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.xbill.DNS.IPSECKEYRecord -> org.b.a.ao:
    int precedence -> a
    int gatewayType -> b
    int algorithmType -> c
    java.lang.Object gateway -> d
    byte[] key -> e
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.ISDNRecord -> org.b.a.ap:
    byte[] address -> a
    byte[] subAddress -> b
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.InvalidDClassException -> org.b.a.aq:
org.xbill.DNS.InvalidTTLException -> org.b.a.ar:
org.xbill.DNS.InvalidTypeException -> org.b.a.as:
org.xbill.DNS.KEYBase -> org.b.a.at:
    int flags -> a
    int proto -> b
    int alg -> c
    byte[] key -> d
    int footprint -> e
    java.security.PublicKey publicKey -> f
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    int getFootprint() -> c_
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.KEYRecord -> org.b.a.au:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.KXRecord -> org.b.a.av:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.LOCRecord -> org.b.a.aw:
    java.text.NumberFormat w2 -> a
    java.text.NumberFormat w3 -> b
    long size -> c
    long hPrecision -> d
    long vPrecision -> e
    long latitude -> f
    long longitude -> k
    long altitude -> l
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void renderFixedPoint(java.lang.StringBuffer,java.text.NumberFormat,long,long) -> a
    java.lang.String positionToString(long,char,char) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    long parseLOCformat(int) -> a
    int toLOCformat(long) -> b
org.xbill.DNS.Lookup -> org.b.a.ax:
    org.xbill.DNS.Resolver defaultResolver -> b
    org.xbill.DNS.Name[] defaultSearchPath -> c
    java.util.Map defaultCaches -> d
    int defaultNdots -> e
    org.xbill.DNS.Resolver resolver -> f
    org.xbill.DNS.Name[] searchPath -> g
    org.xbill.DNS.Cache cache -> h
    boolean temporary_cache -> i
    int credibility -> j
    org.xbill.DNS.Name name -> k
    int type -> l
    int dclass -> m
    boolean verbose -> n
    int iterations -> o
    boolean foundAlias -> p
    boolean done -> q
    boolean doneCurrent -> r
    java.util.List aliases -> s
    org.xbill.DNS.Record[] answers -> t
    int result -> u
    java.lang.String error -> v
    boolean nxdomain -> w
    boolean badresponse -> x
    java.lang.String badresponse_error -> y
    boolean networkerror -> z
    boolean timedout -> A
    boolean nametoolong -> B
    boolean referral -> C
    org.xbill.DNS.Name[] noAliases -> D
    java.lang.Class class$org$xbill$DNS$Lookup -> a
    void refreshDefault() -> a
    org.xbill.DNS.Resolver getDefaultResolver() -> b
    org.xbill.DNS.Cache getDefaultCache(int) -> a
    org.xbill.DNS.Name[] getDefaultSearchPath() -> c
    void reset() -> e
    void follow(org.xbill.DNS.Name,org.xbill.DNS.Name) -> a
    void processResponse(org.xbill.DNS.Name,org.xbill.DNS.SetResponse) -> a
    void lookup(org.xbill.DNS.Name) -> a
    void resolve(org.xbill.DNS.Name,org.xbill.DNS.Name) -> b
    org.xbill.DNS.Record[] run() -> d
    java.lang.Class class$(java.lang.String) -> a
org.xbill.DNS.MBRecord -> org.b.a.ay:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.MDRecord -> org.b.a.az:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.MFRecord -> org.b.a.ba:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.MGRecord -> org.b.a.bb:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.MINFORecord -> org.b.a.bc:
    org.xbill.DNS.Name responsibleAddress -> a
    org.xbill.DNS.Name errorAddress -> b
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.MRRecord -> org.b.a.bd:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.MXRecord -> org.b.a.be:
    org.xbill.DNS.Record getObject() -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.Message -> org.b.a.bf:
    org.xbill.DNS.Header header -> d
    java.util.List[] sections -> e
    int size -> f
    org.xbill.DNS.TSIG tsigkey -> g
    org.xbill.DNS.TSIGRecord querytsig -> h
    int tsigerror -> i
    int tsigstart -> a
    int tsigState -> b
    int sig0start -> c
    org.xbill.DNS.Record[] emptyRecordArray -> j
    org.xbill.DNS.RRset[] emptyRRsetArray -> k
    org.xbill.DNS.Message newQuery(org.xbill.DNS.Record) -> a
    org.xbill.DNS.Header getHeader() -> a
    void addRecord(org.xbill.DNS.Record,int) -> a
    org.xbill.DNS.Record getQuestion() -> b
    org.xbill.DNS.TSIGRecord getTSIG() -> c
    boolean isSigned() -> d
    boolean isVerified() -> e
    org.xbill.DNS.OPTRecord getOPT() -> f
    int getRcode() -> g
    org.xbill.DNS.Record[] getSectionArray(int) -> a
    boolean sameSet(org.xbill.DNS.Record,org.xbill.DNS.Record) -> a
    org.xbill.DNS.RRset[] getSectionRRsets(int) -> b
    void toWire(org.xbill.DNS.DNSOutput) -> a
    int sectionToWire(org.xbill.DNS.DNSOutput,int,org.xbill.DNS.Compression,int) -> a
    boolean toWire(org.xbill.DNS.DNSOutput,int) -> a
    byte[] toWire() -> h
    byte[] toWire(int) -> c
    int numBytes() -> i
    java.lang.String sectionToString(int) -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.xbill.DNS.Mnemonic -> org.b.a.bg:
    java.lang.Integer[] cachedInts -> a
    java.util.HashMap strings -> b
    java.util.HashMap values -> c
    java.lang.String description -> d
    int wordcase -> e
    java.lang.String prefix -> f
    int max -> g
    boolean numericok -> h
    void setMaximum(int) -> b
    void setPrefix(java.lang.String) -> a
    void setNumericAllowed(boolean) -> a
    java.lang.Integer toInteger(int) -> c
    void check(int) -> a
    java.lang.String sanitize(java.lang.String) -> b
    void add(int,java.lang.String) -> a
    void addAlias(int,java.lang.String) -> b
    void addAll(org.xbill.DNS.Mnemonic) -> a
    java.lang.String getText(int) -> d
org.xbill.DNS.NAPTRRecord -> org.b.a.bh:
    int order -> a
    int preference -> b
    byte[] flags -> c
    byte[] service -> d
    byte[] regexp -> e
    org.xbill.DNS.Name replacement -> f
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.NSAPRecord -> org.b.a.bi:
    byte[] address -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.NSAP_PTRRecord -> org.b.a.bj:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.NSEC3PARAMRecord -> org.b.a.bk:
    int hashAlg -> a
    int flags -> b
    int iterations -> c
    byte[] salt -> d
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.NSEC3Record -> org.b.a.bl:
    int hashAlg -> a
    int flags -> b
    int iterations -> c
    byte[] salt -> d
    byte[] next -> e
    org.xbill.DNS.TypeBitmap types -> f
    org.xbill.DNS.utils.base32 b32 -> k
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.NSECRecord -> org.b.a.bm:
    org.xbill.DNS.Name next -> a
    org.xbill.DNS.TypeBitmap types -> b
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.NSIDOption -> org.b.a.bn:
org.xbill.DNS.NSRecord -> org.b.a.bo:
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.NULLRecord -> org.b.a.bp:
    byte[] data -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.NXTRecord -> org.b.a.bq:
    org.xbill.DNS.Name next -> a
    java.util.BitSet bitmap -> b
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.Name -> org.b.a.br:
    byte[] name -> c
    long offsets -> d
    int hashcode -> e
    byte[] emptyLabel -> f
    byte[] wildLabel -> g
    org.xbill.DNS.Name root -> a
    org.xbill.DNS.Name empty -> b
    java.text.DecimalFormat byteFormat -> h
    byte[] lowercase -> i
    org.xbill.DNS.Name wild -> j
    void setoffset(int,int) -> a
    int offset(int) -> a
    void setlabels(int) -> b
    int getlabels() -> e
    void copy(org.xbill.DNS.Name,org.xbill.DNS.Name) -> b
    void append(byte[],int,int) -> a
    org.xbill.DNS.TextParseException parseException(java.lang.String,java.lang.String) -> a
    void appendFromString(java.lang.String,byte[],int,int) -> a
    void appendSafe(byte[],int,int) -> b
    org.xbill.DNS.Name fromString(java.lang.String,org.xbill.DNS.Name) -> a
    org.xbill.DNS.Name fromString(java.lang.String) -> a
    org.xbill.DNS.Name fromConstantString(java.lang.String) -> b
    org.xbill.DNS.Name concatenate(org.xbill.DNS.Name,org.xbill.DNS.Name) -> a
    org.xbill.DNS.Name fromDNAME(org.xbill.DNS.DNAMERecord) -> a
    boolean isAbsolute() -> a
    short length() -> b
    int labels() -> c
    boolean subdomain(org.xbill.DNS.Name) -> a
    java.lang.String byteString(byte[],int) -> a
    java.lang.String toString(boolean) -> a
    java.lang.String toString() -> toString
    void toWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression) -> a
    void toWireCanonical(org.xbill.DNS.DNSOutput) -> a
    byte[] toWireCanonical() -> d
    void toWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    boolean equals(byte[],int) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
org.xbill.DNS.NameTooLongException -> org.b.a.bs:
org.xbill.DNS.OPTRecord -> org.b.a.bt:
    java.util.List options -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    int getPayloadSize() -> d
    int getExtendedRcode() -> e
    int getVersion() -> f
    int getFlags() -> g
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.Opcode -> org.b.a.bu:
    org.xbill.DNS.Mnemonic opcodes -> a
    java.lang.String string(int) -> a
org.xbill.DNS.Options -> org.b.a.bv:
    java.util.Map table -> a
    void refresh() -> a
    void set(java.lang.String) -> a
    void set(java.lang.String,java.lang.String) -> a
    boolean check(java.lang.String) -> b
    java.lang.String value(java.lang.String) -> c
    int intValue(java.lang.String) -> d
org.xbill.DNS.PTRRecord -> org.b.a.bw:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.PXRecord -> org.b.a.bx:
    int preference -> a
    org.xbill.DNS.Name map822 -> b
    org.xbill.DNS.Name mapX400 -> c
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.RPRecord -> org.b.a.by:
    org.xbill.DNS.Name mailbox -> a
    org.xbill.DNS.Name textDomain -> b
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.RRSIGRecord -> org.b.a.bz:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.RRset -> org.b.a.ca:
    java.util.List rrs -> a
    short nsigs -> b
    short position -> c
    void safeAddRR(org.xbill.DNS.Record) -> b
    void addRR(org.xbill.DNS.Record) -> a
    java.util.Iterator iterator(boolean,boolean) -> a
    java.util.Iterator rrs() -> c
    org.xbill.DNS.Name getName() -> d
    int getType() -> b
    int getDClass() -> e
    long getTTL() -> f
    org.xbill.DNS.Record first() -> g
    java.lang.String iteratorToString(java.util.Iterator) -> a
    java.lang.String toString() -> toString
org.xbill.DNS.RTRecord -> org.b.a.cb:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.Rcode -> org.b.a.cc:
    org.xbill.DNS.Mnemonic rcodes -> a
    org.xbill.DNS.Mnemonic tsigrcodes -> b
    java.lang.String string(int) -> a
    java.lang.String TSIGstring(int) -> b
org.xbill.DNS.Record -> org.b.a.cd:
    org.xbill.DNS.Name name -> g
    int type -> h
    int dclass -> i
    long ttl -> j
    java.text.DecimalFormat byteFormat -> a
    org.xbill.DNS.Record getObject() -> a
    org.xbill.DNS.Record getEmptyRecord(org.xbill.DNS.Name,int,int,long,boolean) -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long,int,org.xbill.DNS.DNSInput) -> a
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int,long) -> a
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,int,int) -> a
    org.xbill.DNS.Record fromWire(org.xbill.DNS.DNSInput,int,boolean) -> a
    void toWire(org.xbill.DNS.DNSOutput,int,org.xbill.DNS.Compression) -> a
    void toWireCanonical(org.xbill.DNS.DNSOutput,boolean) -> a
    byte[] toWireCanonical(boolean) -> a
    byte[] rdataToWireCanonical() -> h
    java.lang.String rrToString() -> b
    java.lang.String rdataToString() -> i
    java.lang.String toString() -> toString
    java.lang.String byteArrayToString(byte[],boolean) -> a
    java.lang.String unknownToString(byte[]) -> a
    org.xbill.DNS.Name getName() -> j
    int getType() -> k
    int getRRsetType() -> l
    int getDClass() -> m
    long getTTL() -> n
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    boolean sameRRset(org.xbill.DNS.Record) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.xbill.DNS.Record cloneRecord() -> o
    void setTTL(long) -> a
    int compareTo(java.lang.Object) -> compareTo
    org.xbill.DNS.Name getAdditionalName() -> c
    int checkU16(java.lang.String,int) -> a
    long checkU32(java.lang.String,long) -> a
    org.xbill.DNS.Name checkName(java.lang.String,org.xbill.DNS.Name) -> a
org.xbill.DNS.RelativeNameException -> org.b.a.ce:
org.xbill.DNS.ResolveThread -> org.b.a.cf:
    org.xbill.DNS.Message query -> a
    java.lang.Object id -> b
    org.xbill.DNS.ResolverListener listener -> c
    org.xbill.DNS.Resolver res -> d
    void run() -> run
org.xbill.DNS.Resolver -> org.b.a.cg:
    void setTimeout(int,int) -> a
    void setTimeout(int) -> a
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> a
    java.lang.Object sendAsync(org.xbill.DNS.Message,org.xbill.DNS.ResolverListener) -> a
org.xbill.DNS.ResolverConfig -> org.b.a.ch:
    java.lang.String[] servers -> c
    org.xbill.DNS.Name[] searchlist -> d
    int ndots -> e
    org.xbill.DNS.ResolverConfig currentConfig -> f
    java.lang.Class class$org$xbill$DNS$ResolverConfig -> a
    java.lang.Class class$java$lang$String -> b
    void addServer(java.lang.String,java.util.List) -> a
    void addSearch(java.lang.String,java.util.List) -> b
    int parseNdots(java.lang.String) -> b
    void configureFromLists(java.util.List,java.util.List) -> a
    void configureNdots(int) -> a
    boolean findProperty() -> g
    boolean findSunJVM() -> h
    void findResolvConf(java.lang.String) -> c
    void findUnix() -> i
    void findNetware() -> j
    void findWin(java.io.InputStream,java.util.Locale) -> a
    void findWin(java.io.InputStream) -> a
    void find95() -> k
    void findNT() -> l
    void findAndroid() -> m
    java.lang.String[] servers() -> a
    java.lang.String server() -> b
    org.xbill.DNS.Name[] searchPath() -> c
    int ndots() -> d
    org.xbill.DNS.ResolverConfig getCurrentConfig() -> e
    void refresh() -> f
    java.lang.Class class$(java.lang.String) -> a
org.xbill.DNS.ResolverListener -> org.b.a.ci:
    void receiveMessage(java.lang.Object,org.xbill.DNS.Message) -> a
    void handleException(java.lang.Object,java.lang.Exception) -> a
org.xbill.DNS.SIGBase -> org.b.a.cj:
    int covered -> a
    int alg -> b
    int labels -> c
    long origttl -> d
    java.util.Date expire -> e
    java.util.Date timeSigned -> f
    int footprint -> k
    org.xbill.DNS.Name signer -> l
    byte[] signature -> m
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    int getTypeCovered() -> d
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.SIGRecord -> org.b.a.ck:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.SOARecord -> org.b.a.cl:
    org.xbill.DNS.Name host -> a
    org.xbill.DNS.Name admin -> b
    long serial -> c
    long refresh -> d
    long retry -> e
    long expire -> f
    long minimum -> k
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    long getSerial() -> d
    long getMinimum() -> e
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.SPFRecord -> org.b.a.cm:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.SRVRecord -> org.b.a.cn:
    int priority -> a
    int weight -> b
    int port -> c
    org.xbill.DNS.Name target -> d
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    int getPriority() -> d
    int getWeight() -> e
    int getPort() -> f
    org.xbill.DNS.Name getTarget() -> g
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    org.xbill.DNS.Name getAdditionalName() -> c
org.xbill.DNS.SSHFPRecord -> org.b.a.co:
    int alg -> a
    int digestType -> b
    byte[] fingerprint -> c
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.Section -> org.b.a.cp:
    org.xbill.DNS.Mnemonic sections -> a
    java.lang.String[] longSections -> b
    java.lang.String[] updateSections -> c
    java.lang.String string(int) -> a
    java.lang.String longString(int) -> b
    java.lang.String updString(int) -> c
org.xbill.DNS.Serial -> org.b.a.cq:
    int compare(long,long) -> a
org.xbill.DNS.SetResponse -> org.b.a.cr:
    org.xbill.DNS.SetResponse unknown -> a
    org.xbill.DNS.SetResponse nxdomain -> b
    org.xbill.DNS.SetResponse nxrrset -> c
    int type -> d
    java.lang.Object data -> e
    org.xbill.DNS.SetResponse ofType(int) -> a
    void addRRset(org.xbill.DNS.RRset) -> a
    boolean isNXDOMAIN() -> a
    boolean isNXRRSET() -> b
    boolean isDelegation() -> c
    boolean isCNAME() -> d
    boolean isDNAME() -> e
    boolean isSuccessful() -> f
    org.xbill.DNS.RRset[] answers() -> g
    org.xbill.DNS.CNAMERecord getCNAME() -> h
    org.xbill.DNS.DNAMERecord getDNAME() -> i
    java.lang.String toString() -> toString
org.xbill.DNS.SimpleResolver -> org.b.a.cs:
    java.net.InetSocketAddress address -> a
    java.net.InetSocketAddress localAddress -> b
    boolean useTCP -> c
    boolean ignoreTruncation -> d
    org.xbill.DNS.OPTRecord queryOPT -> e
    org.xbill.DNS.TSIG tsig -> f
    long timeoutValue -> g
    java.lang.String defaultResolver -> h
    int uniqueID -> i
    void setTimeout(int,int) -> a
    void setTimeout(int) -> a
    long getTimeout() -> a
    org.xbill.DNS.Message parseMessage(byte[]) -> a
    void verifyTSIG(org.xbill.DNS.Message,org.xbill.DNS.Message,byte[],org.xbill.DNS.TSIG) -> a
    void applyEDNS(org.xbill.DNS.Message) -> b
    int maxUDPSize(org.xbill.DNS.Message) -> c
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> a
    java.lang.Object sendAsync(org.xbill.DNS.Message,org.xbill.DNS.ResolverListener) -> a
    org.xbill.DNS.Message sendAXFR(org.xbill.DNS.Message) -> d
org.xbill.DNS.SingleCompressedNameBase -> org.b.a.ct:
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.SingleNameBase -> org.b.a.cu:
    org.xbill.DNS.Name singleName -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    org.xbill.DNS.Name getSingleName() -> d
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.TCPClient -> org.b.a.cv:
    void bind(java.net.SocketAddress) -> a
    void connect(java.net.SocketAddress) -> b
    void send(byte[]) -> a
    byte[] _recv(int) -> a
    byte[] recv() -> b
    byte[] sendrecv(java.net.SocketAddress,java.net.SocketAddress,byte[],long) -> a
org.xbill.DNS.TKEYRecord -> org.b.a.cw:
    org.xbill.DNS.Name alg -> a
    java.util.Date timeInception -> b
    java.util.Date timeExpire -> c
    int mode -> d
    int error -> e
    byte[] key -> f
    byte[] other -> k
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String modeString() -> d
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.TLSARecord -> org.b.a.cx:
    int certificateUsage -> a
    int selector -> b
    int matchingType -> c
    byte[] certificateAssociationData -> d
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.TSIG -> org.b.a.cy:
    org.xbill.DNS.Name HMAC_MD5 -> a
    org.xbill.DNS.Name HMAC -> b
    org.xbill.DNS.Name HMAC_SHA1 -> c
    org.xbill.DNS.Name HMAC_SHA224 -> d
    org.xbill.DNS.Name HMAC_SHA256 -> e
    org.xbill.DNS.Name HMAC_SHA384 -> f
    org.xbill.DNS.Name HMAC_SHA512 -> g
    org.xbill.DNS.Name name -> h
    org.xbill.DNS.Name alg -> i
    java.lang.String digest -> j
    int digestBlockLength -> k
    byte[] key -> l
    org.xbill.DNS.TSIGRecord generate(org.xbill.DNS.Message,byte[],int,org.xbill.DNS.TSIGRecord) -> a
    void apply(org.xbill.DNS.Message,int,org.xbill.DNS.TSIGRecord) -> a
    void apply(org.xbill.DNS.Message,org.xbill.DNS.TSIGRecord) -> a
    byte verify(org.xbill.DNS.Message,byte[],int,org.xbill.DNS.TSIGRecord) -> b
    int verify(org.xbill.DNS.Message,byte[],org.xbill.DNS.TSIGRecord) -> a
    int recordLength() -> a
    java.lang.String access$000(org.xbill.DNS.TSIG) -> a
    int access$100(org.xbill.DNS.TSIG) -> b
    byte[] access$200(org.xbill.DNS.TSIG) -> c
    org.xbill.DNS.Name access$300(org.xbill.DNS.TSIG) -> d
    org.xbill.DNS.Name access$400(org.xbill.DNS.TSIG) -> e
org.xbill.DNS.TSIG$StreamVerifier -> org.b.a.cz:
    org.xbill.DNS.TSIG key -> a
    org.xbill.DNS.utils.HMAC verifier -> b
    int nresponses -> c
    int lastsigned -> d
    org.xbill.DNS.TSIGRecord lastTSIG -> e
    int verify(org.xbill.DNS.Message,byte[]) -> a
org.xbill.DNS.TSIGRecord -> org.b.a.da:
    org.xbill.DNS.Name alg -> a
    java.util.Date timeSigned -> b
    int fudge -> c
    byte[] signature -> d
    int originalID -> e
    int error -> f
    byte[] other -> k
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    org.xbill.DNS.Name getAlgorithm() -> d
    java.util.Date getTimeSigned() -> e
    int getFudge() -> f
    byte[] getSignature() -> g
    int getError() -> p
    byte[] getOther() -> q
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.TTL -> org.b.a.db:
    void check(long) -> a
    java.lang.String format(long) -> b
org.xbill.DNS.TXTBase -> org.b.a.dc:
    java.util.List strings -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.TXTRecord -> org.b.a.dd:
    org.xbill.DNS.Record getObject() -> a
org.xbill.DNS.TextParseException -> org.b.a.de:
org.xbill.DNS.Type -> org.b.a.df:
    org.xbill.DNS.Type$TypeMnemonic types -> a
    void check(int) -> a
    java.lang.String string(int) -> b
    org.xbill.DNS.Record getProto(int) -> c
    boolean isRR(int) -> d
org.xbill.DNS.Type$TypeMnemonic -> org.b.a.dg:
    java.util.HashMap objects -> a
    void add(int,java.lang.String,org.xbill.DNS.Record) -> a
    void check(int) -> a
    org.xbill.DNS.Record getProto(int) -> e
org.xbill.DNS.TypeBitmap -> org.b.a.dh:
    java.util.TreeSet types -> a
    java.lang.String toString() -> toString
    void mapToWire(org.xbill.DNS.DNSOutput,java.util.TreeSet,int) -> a
    void toWire(org.xbill.DNS.DNSOutput) -> a
    boolean empty() -> a
org.xbill.DNS.U16NameBase -> org.b.a.di:
    int u16Field -> a
    org.xbill.DNS.Name nameField -> b
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    org.xbill.DNS.Name getNameField() -> d
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.UDPClient -> org.b.a.dj:
    java.security.SecureRandom prng -> c
    boolean prng_initializing -> d
    boolean bound -> e
    void bind_random(java.net.InetSocketAddress) -> a
    void bind(java.net.SocketAddress) -> a
    void connect(java.net.SocketAddress) -> b
    void send(byte[]) -> a
    byte[] recv(int) -> a
    byte[] sendrecv(java.net.SocketAddress,java.net.SocketAddress,byte[],int,long) -> a
    java.security.SecureRandom access$000() -> b
    boolean access$102(boolean) -> a
org.xbill.DNS.UDPClient$1 -> org.b.a.dk:
    void run() -> run
org.xbill.DNS.UNKRecord -> org.b.a.dl:
    byte[] data -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.WKSRecord -> org.b.a.dm:
    byte[] address -> a
    int protocol -> b
    int[] services -> c
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    java.lang.String rrToString() -> b
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
org.xbill.DNS.WireParseException -> org.b.a.dn:
org.xbill.DNS.X25Record -> org.b.a.do:
    byte[] address -> a
    org.xbill.DNS.Record getObject() -> a
    void rrFromWire(org.xbill.DNS.DNSInput) -> a
    void rrToWire(org.xbill.DNS.DNSOutput,org.xbill.DNS.Compression,boolean) -> a
    java.lang.String rrToString() -> b
org.xbill.DNS.ZoneTransferException -> org.b.a.dp:
org.xbill.DNS.ZoneTransferIn -> org.b.a.dq:
    org.xbill.DNS.Name zname -> a
    int qtype -> b
    int dclass -> c
    long ixfr_serial -> d
    boolean want_fallback -> e
    org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler handler -> f
    java.net.SocketAddress localAddress -> g
    java.net.SocketAddress address -> h
    org.xbill.DNS.TCPClient client -> i
    org.xbill.DNS.TSIG tsig -> j
    org.xbill.DNS.TSIG$StreamVerifier verifier -> k
    long timeout -> l
    int state -> m
    long end_serial -> n
    long current_serial -> o
    org.xbill.DNS.Record initialsoa -> p
    int rtype -> q
    org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name,java.net.SocketAddress,org.xbill.DNS.TSIG) -> a
    void setTimeout(int) -> a
    void setLocalAddress(java.net.SocketAddress) -> a
    void openConnection() -> c
    void sendQuery() -> d
    long getSOASerial(org.xbill.DNS.Record) -> b
    void logxfr(java.lang.String) -> a
    void fail(java.lang.String) -> b
    void fallback() -> e
    void parseRR(org.xbill.DNS.Record) -> c
    void closeConnection() -> f
    org.xbill.DNS.Message parseMessage(byte[]) -> a
    void doxfr() -> g
    void run(org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler) -> a
    java.util.List run() -> a
    org.xbill.DNS.ZoneTransferIn$BasicHandler getBasicHandler() -> h
    java.util.List getAXFR() -> b
    long access$100(org.xbill.DNS.Record) -> a
org.xbill.DNS.ZoneTransferIn$1 -> org.b.a.dr:
org.xbill.DNS.ZoneTransferIn$BasicHandler -> org.b.a.ds:
    java.util.List axfr -> a
    java.util.List ixfr -> b
    void startAXFR() -> a
    void startIXFR() -> b
    void startIXFRDeletes(org.xbill.DNS.Record) -> a
    void startIXFRAdds(org.xbill.DNS.Record) -> b
    void handleRecord(org.xbill.DNS.Record) -> c
    java.util.List access$300(org.xbill.DNS.ZoneTransferIn$BasicHandler) -> a
    java.util.List access$400(org.xbill.DNS.ZoneTransferIn$BasicHandler) -> b
org.xbill.DNS.ZoneTransferIn$Delta -> org.b.a.dt:
    long start -> a
    long end -> b
    java.util.List adds -> c
    java.util.List deletes -> d
org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler -> org.b.a.du:
    void startAXFR() -> a
    void startIXFR() -> b
    void startIXFRDeletes(org.xbill.DNS.Record) -> a
    void startIXFRAdds(org.xbill.DNS.Record) -> b
    void handleRecord(org.xbill.DNS.Record) -> c
org.xbill.DNS.utils.HMAC -> org.b.a.a.a:
    java.security.MessageDigest digest -> a
    int blockLength -> b
    byte[] ipad -> c
    byte[] opad -> d
    void init(byte[]) -> c
    void update(byte[],int,int) -> a
    void update(byte[]) -> a
    byte[] sign() -> a
    boolean verify(byte[]) -> b
    boolean verify(byte[],boolean) -> a
    void clear() -> b
    int digestLength() -> c
org.xbill.DNS.utils.base16 -> org.b.a.a.b:
    java.lang.String toString(byte[]) -> a
org.xbill.DNS.utils.base32 -> org.b.a.a.c:
    java.lang.String alphabet -> a
    boolean padding -> b
    boolean lowercase -> c
    int blockLenToPadding(int) -> a
    java.lang.String toString(byte[]) -> a
org.xbill.DNS.utils.base64 -> org.b.a.a.d:
    java.lang.String toString(byte[]) -> a
    java.lang.String formatString(byte[],int,java.lang.String,boolean) -> a
org.xbill.DNS.utils.hexdump -> org.b.a.a.e:
    char[] hex -> a
    java.lang.String dump(java.lang.String,byte[],int,int) -> a
    java.lang.String dump(java.lang.String,byte[]) -> a
